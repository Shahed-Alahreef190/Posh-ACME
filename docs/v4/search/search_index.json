{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Posh-ACME \u00b6 A PowerShell module and ACME client to create publicly trusted SSL/TLS certificates from an ACME capable certificate authority such as Let's Encrypt . Features \u00b6 Multi-domain (SAN) and wildcard (*.example.com) certificates supported IP Address certificates ( RFC 8738 ) (Requires ACME CA support) All-in-one command for new certs, New-PACertificate Easy renewals with Submit-Renewal RSA and ECDSA keys supported for accounts and certificates Built-in validation plugins for DNS and HTTP based challenges. (pull requests welcome) Support for pre-created certificate requests (CSR) PEM and PFX output files No elevated Windows privileges required (unless using -Install switch) Cross platform PowerShell support. (FAQ) Account key rollover support OCSP Must-Staple support DNS challenge CNAME support Multiple ACME accounts supported per ACME CA External Account Binding support for ACME CAs that require it (Guide) Preferred Chain support to use alternative CA trust chains (Guide) PowerShell SecretManagement support (Guide) Installation (Stable) \u00b6 The latest release can found in the PowerShell Gallery or the GitHub releases page . Installing is easiest from the gallery using Install-Module . See Installing PowerShellGet if you run into problems with it. # install for all users (requires elevated privs) Install-Module -Name Posh-ACME -Scope AllUsers # install for current user Install-Module -Name Posh-ACME -Scope CurrentUser Warning If you use PowerShell 5.1 or earlier, Install-Module may throw an error depending on your Windows and .NET version due to a change PowerShell Gallery made to their TLS settings. For more info and a workaround, see the official blog post . Installation (Development) \u00b6 Use the following PowerShell command to install the latest development version from the git main branch. This method assumes a default PSModulePath environment variable and installs to the CurrentUser scope. iex ( irm https :// raw . githubusercontent . com / rmbolger / Posh-ACME / main / instdev . ps1 ) You can also download the source manually from GitHub and extract the Posh-ACME folder to your desired module location. Quick Start \u00b6 The minimum parameters you need for a cert are the domain name and the -AcceptTOS flag. This uses the default Manual DNS plugin which requires you to manually edit your DNS server to create the TXT records required for challenge validation. New-PACertificate example . com -AcceptTOS Warning On Windows, you may need to set a less restrictive PowerShell execution policy before you can import the module. Set-ExecutionPolicy RemoteSigned -Scope CurrentUser -Force Import-Module Posh-ACME Here's a more complete example with a typical wildcard cert utilizing a hypothetical FakeDNS DNS plugin that also adds a contact email address to the account for expiration notifications. $certNames = '*.example.com' , 'example.com' $email = 'admin@example.com' $pArgs = @{ FDToken = ( Read-Host 'FakeDNS API Token' -AsSecureString ) } New-PACertificate $certNames -AcceptTOS -Contact $email -Plugin FakeDNS -PluginArgs $pArgs To learn how to use a specific plugins, check out Get-PAPlugin <PluginName> -Guide . There's also a tutorial for a more in-depth guide to using the module. The output of New-PACertificate is an object that contains various properties about the certificate you generated. Only a subset of the properties are displayed by default. To see the full list including the filesystem paths to any certificate files that were generated, pipe the original output to Format-List or use Get-PACertificate | Format-List . You can also get the path to the server's config using (Get-PAServer).Folder . Requirements and Platform Support \u00b6 Supports Windows PowerShell 5.1 (Desktop edition) with .NET Framework 4.7.1 or later Supports PowerShell 6.2 or later ( Core edition ) on all supported OS platforms. Requires FullLanguage language mode Note PowerShell 6.0-6.1 should also work, but there are known issues when using SecureString or PSCredential plugin args on non-Windows platforms. Changelog \u00b6 See CHANGELOG.md","title":"Home"},{"location":"#posh-acme","text":"A PowerShell module and ACME client to create publicly trusted SSL/TLS certificates from an ACME capable certificate authority such as Let's Encrypt .","title":"Posh-ACME"},{"location":"#features","text":"Multi-domain (SAN) and wildcard (*.example.com) certificates supported IP Address certificates ( RFC 8738 ) (Requires ACME CA support) All-in-one command for new certs, New-PACertificate Easy renewals with Submit-Renewal RSA and ECDSA keys supported for accounts and certificates Built-in validation plugins for DNS and HTTP based challenges. (pull requests welcome) Support for pre-created certificate requests (CSR) PEM and PFX output files No elevated Windows privileges required (unless using -Install switch) Cross platform PowerShell support. (FAQ) Account key rollover support OCSP Must-Staple support DNS challenge CNAME support Multiple ACME accounts supported per ACME CA External Account Binding support for ACME CAs that require it (Guide) Preferred Chain support to use alternative CA trust chains (Guide) PowerShell SecretManagement support (Guide)","title":"Features"},{"location":"#installation-stable","text":"The latest release can found in the PowerShell Gallery or the GitHub releases page . Installing is easiest from the gallery using Install-Module . See Installing PowerShellGet if you run into problems with it. # install for all users (requires elevated privs) Install-Module -Name Posh-ACME -Scope AllUsers # install for current user Install-Module -Name Posh-ACME -Scope CurrentUser Warning If you use PowerShell 5.1 or earlier, Install-Module may throw an error depending on your Windows and .NET version due to a change PowerShell Gallery made to their TLS settings. For more info and a workaround, see the official blog post .","title":"Installation (Stable)"},{"location":"#installation-development","text":"Use the following PowerShell command to install the latest development version from the git main branch. This method assumes a default PSModulePath environment variable and installs to the CurrentUser scope. iex ( irm https :// raw . githubusercontent . com / rmbolger / Posh-ACME / main / instdev . ps1 ) You can also download the source manually from GitHub and extract the Posh-ACME folder to your desired module location.","title":"Installation (Development)"},{"location":"#quick-start","text":"The minimum parameters you need for a cert are the domain name and the -AcceptTOS flag. This uses the default Manual DNS plugin which requires you to manually edit your DNS server to create the TXT records required for challenge validation. New-PACertificate example . com -AcceptTOS Warning On Windows, you may need to set a less restrictive PowerShell execution policy before you can import the module. Set-ExecutionPolicy RemoteSigned -Scope CurrentUser -Force Import-Module Posh-ACME Here's a more complete example with a typical wildcard cert utilizing a hypothetical FakeDNS DNS plugin that also adds a contact email address to the account for expiration notifications. $certNames = '*.example.com' , 'example.com' $email = 'admin@example.com' $pArgs = @{ FDToken = ( Read-Host 'FakeDNS API Token' -AsSecureString ) } New-PACertificate $certNames -AcceptTOS -Contact $email -Plugin FakeDNS -PluginArgs $pArgs To learn how to use a specific plugins, check out Get-PAPlugin <PluginName> -Guide . There's also a tutorial for a more in-depth guide to using the module. The output of New-PACertificate is an object that contains various properties about the certificate you generated. Only a subset of the properties are displayed by default. To see the full list including the filesystem paths to any certificate files that were generated, pipe the original output to Format-List or use Get-PACertificate | Format-List . You can also get the path to the server's config using (Get-PAServer).Folder .","title":"Quick Start"},{"location":"#requirements-and-platform-support","text":"Supports Windows PowerShell 5.1 (Desktop edition) with .NET Framework 4.7.1 or later Supports PowerShell 6.2 or later ( Core edition ) on all supported OS platforms. Requires FullLanguage language mode Note PowerShell 6.0-6.1 should also work, but there are known issues when using SecureString or PSCredential plugin args on non-Windows platforms.","title":"Requirements and Platform Support"},{"location":"#changelog","text":"See CHANGELOG.md","title":"Changelog"},{"location":"FAQ/","text":"Frequently Asked Questions (FAQ) \u00b6 Where is my config? Where is my cert? \u00b6 Unless you have changed the default , all Posh-ACME config is in your user profile depending on the OS: Windows: %LOCALAPPDATA%\\Posh-ACME Linux: $HOME/.config/Posh-ACME MacOS: $HOME/Library/Preferences/Posh-ACME The full paths to all cert files for the current order is in the detailed output of Get-PACertificate . Get-PACertificate | Format-List How Do I Upgrade From 3.x to 4.x? \u00b6 If your certificate renewals are using Submit-Renewal , no changes should be necessary in order to upgrade from 3.x to 4.0 unless you were using the -NewKey parameter which has been removed. Orders can now be configured to always generate a new private key using Set-PAOrder -AlwaysNewKey . For example, you can set the flag for all orders in an account like this: Get-PAOrder -List | Set-PAOrder -AlwaysNewKey For custom scripts that use more of the module's functions be aware of the following changes: Invoke-HttpChallengeListener is deprecated and may be removed in a future release. Users should migrate to the WebSelfHost plugin. Publish/Unpublish/Save-DnsChallenge functions have been renamed to Publish/Unpublish/Save-Challenge . All references to the DnsPlugin parameter should be replaced with Plugin . NewKey has been removed from Submit-Renewal . NewKey / NewCertKey have been replaced by AlwaysNewKey in New-PACertificate and New-PAOrder . AlwaysNewKey has been added to Set-PAOrder . DnsPlugin , PluginArgs , DnsAlias , DnsSleep , ValidationTimeout and Account parameters have been removed from Submit-ChallengeValidation . The account associated with the order must be the currently active account. The rest of the parameters are read directly from the order object and can be modified in advance with Set-PAOrder if necessary. The NoPrefix switch in Publish/Unpublish-Challenge has been replaced with a DnsAlias parameter that will override the Domain parameter if specified. \"_acme-challenge.\" will not be automatically added to DnsAlias values. For example: # Old 3.x method to publish an alias Publish-DnsChallenge -Domain alias . example . com -NoPrefix -DnsPlugin MyPlugin -Account ( Get-PAAccount ) -Token xxxx -PluginArgs $pArgs # New 4.x method to publish an alias Publish-DnsChallenge -Domain example . com -DnsAlias alias . example . com -Plugin MyPlugin -Account ( Get-PAAccount ) -Token xxxx -PluginArgs $pArgs If your workflow relied on new orders automatically using the plugin args from previously configured orders, that no longer works and you will have to explicitly set the -PluginArgs parameter for each new order. However, you can use Get-PAPluginArgs to make it easier. For example: # Old 3.x method where new order uses old plugin args automatically New-PACertificate www1 . example . com -Plugin MyPlugin -PluginArgs @{ MyArg = 'xxxx' } New-PACertificate www2 . example . com -Plugin MyPlugin # New 4.x method New-PACertificate www1 . example . com -Plugin MyPlugin -PluginArgs @{ MyArg = 'xxxx' } $pArgs = Get-PAPluginArgs www1 . example . com New-PACertificate www2 . example . com -Plugin MyPlugin -PluginArgs $pArgs How have Plugins changed in 4.x? \u00b6 See the Migrating DNS Plugins from 3x to 4x section of the plugin development guide. Does Posh-ACME work cross platform on PowerShell Core? \u00b6 Yes as of 2.2.0!...with a few caveats. The -Install parameter in New-PACertificate is not supported on non-Windows platforms and will throw an error if used because there's no certificate store equivalent to install to. On non-Windows OSes, [securestring] and [pscredential] plugins are not encrypted on disk by default because the encryption APIs used on Windows aren't available. However, you can enable AES based encryption that is also portable between OSes on a per-account level. This can be done during account creation or after the fact and you can switch between native and AES encryption at any time as in the following examples: # enable AES encryption during account creation New-PAAccount -AcceptTOS -Contact me @example . com -UseAltPluginEncryption # enable AES encryption on an existing account Set-PAAccount -UseAltPluginEncryption # switch back to OS-native encryption on an existing account Set-PAAccount -UseAltPluginEncryption : $false Key not valid for use in specified state \u00b6 This can happen on Windows if you try to copy the Posh-ACME profile folder to a different Windows computer or a different user's profile on the same computer. The underlying APIs used to encrypt plugin parameters using SecureString and PSCredential objects are tied to both the current computer and user and are not portable. However, you can use the Set-PAAccount -UseAltPluginEncryption to change the encryption used for the account to a portable AES based method and then copy the profile. Export-PluginArgs : Access is denied \u00b6 This may happen on Windows if you're trying to run Posh-ACME over a remote or non-interactive session. By default, Posh-ACME encrypts \"secure\" plugin parameters before saving them to disk Windows' DPAPI subsystem. This has a known limitation that requires the current user's profile to be loaded which doesn't always happen in remote or non-interactive sessions. If you run into this problem, try running Set-PAAccount -UseAltPluginEncryption to use an alternative encryption option that doesn't rely on DPAPI. The underlying connection was closed: Cloud not establish trust relationship for the SSL/TLS secure channel. \u00b6 This shouldn't ever happen when using a publicly trusted certificate authority such as Let's Encrypt. If it does, an attacker or malware might be trying to MitM your connection. However if you're doing development against a test ACME server like Pebble or a private instance of Boulder , this is normal because the server is likely using a self-signed certificate. You can work around the problem by adding the -SkipCertificateCheck parameter to Set-PAServer . If the error seems to originate from one of the plugins, submit an issue and we can figure it out. Access is denied \u00b6 The most common reason this error shows up is that you used the -Install parameter with New-PACertificate and you're not running PowerShell as an elevated process (Run as Administrator). Both the original call to New-PACertificate and any subsequent calls to Submit-Renewal need to run elevated for the module to install the resulting certificate. Refer to sub-problems for more information. \u00b6 This is generally part of a longer error message and most often shows up when you're trying to create a certificate with multiple names. It means that the error body has additional detail that can help identify what went wrong. You can access the sub-problem data from the Exception object like this. # If you haven't caught the error in a try/catch block, it should be in the first index in the error object $Error [ 0 ]. Exception . Data . subproblems | Format-List # If you did catch the error, it will be in the $_ object catch { $_ . Exception . Data . subproblems | Format-List }","title":"FAQ"},{"location":"FAQ/#frequently-asked-questions-faq","text":"","title":"Frequently Asked Questions (FAQ)"},{"location":"FAQ/#where-is-my-config-where-is-my-cert","text":"Unless you have changed the default , all Posh-ACME config is in your user profile depending on the OS: Windows: %LOCALAPPDATA%\\Posh-ACME Linux: $HOME/.config/Posh-ACME MacOS: $HOME/Library/Preferences/Posh-ACME The full paths to all cert files for the current order is in the detailed output of Get-PACertificate . Get-PACertificate | Format-List","title":"Where is my config? Where is my cert?"},{"location":"FAQ/#how-do-i-upgrade-from-3x-to-4x","text":"If your certificate renewals are using Submit-Renewal , no changes should be necessary in order to upgrade from 3.x to 4.0 unless you were using the -NewKey parameter which has been removed. Orders can now be configured to always generate a new private key using Set-PAOrder -AlwaysNewKey . For example, you can set the flag for all orders in an account like this: Get-PAOrder -List | Set-PAOrder -AlwaysNewKey For custom scripts that use more of the module's functions be aware of the following changes: Invoke-HttpChallengeListener is deprecated and may be removed in a future release. Users should migrate to the WebSelfHost plugin. Publish/Unpublish/Save-DnsChallenge functions have been renamed to Publish/Unpublish/Save-Challenge . All references to the DnsPlugin parameter should be replaced with Plugin . NewKey has been removed from Submit-Renewal . NewKey / NewCertKey have been replaced by AlwaysNewKey in New-PACertificate and New-PAOrder . AlwaysNewKey has been added to Set-PAOrder . DnsPlugin , PluginArgs , DnsAlias , DnsSleep , ValidationTimeout and Account parameters have been removed from Submit-ChallengeValidation . The account associated with the order must be the currently active account. The rest of the parameters are read directly from the order object and can be modified in advance with Set-PAOrder if necessary. The NoPrefix switch in Publish/Unpublish-Challenge has been replaced with a DnsAlias parameter that will override the Domain parameter if specified. \"_acme-challenge.\" will not be automatically added to DnsAlias values. For example: # Old 3.x method to publish an alias Publish-DnsChallenge -Domain alias . example . com -NoPrefix -DnsPlugin MyPlugin -Account ( Get-PAAccount ) -Token xxxx -PluginArgs $pArgs # New 4.x method to publish an alias Publish-DnsChallenge -Domain example . com -DnsAlias alias . example . com -Plugin MyPlugin -Account ( Get-PAAccount ) -Token xxxx -PluginArgs $pArgs If your workflow relied on new orders automatically using the plugin args from previously configured orders, that no longer works and you will have to explicitly set the -PluginArgs parameter for each new order. However, you can use Get-PAPluginArgs to make it easier. For example: # Old 3.x method where new order uses old plugin args automatically New-PACertificate www1 . example . com -Plugin MyPlugin -PluginArgs @{ MyArg = 'xxxx' } New-PACertificate www2 . example . com -Plugin MyPlugin # New 4.x method New-PACertificate www1 . example . com -Plugin MyPlugin -PluginArgs @{ MyArg = 'xxxx' } $pArgs = Get-PAPluginArgs www1 . example . com New-PACertificate www2 . example . com -Plugin MyPlugin -PluginArgs $pArgs","title":"How Do I Upgrade From 3.x to 4.x?"},{"location":"FAQ/#how-have-plugins-changed-in-4x","text":"See the Migrating DNS Plugins from 3x to 4x section of the plugin development guide.","title":"How have Plugins changed in 4.x?"},{"location":"FAQ/#does-posh-acme-work-cross-platform-on-powershell-core","text":"Yes as of 2.2.0!...with a few caveats. The -Install parameter in New-PACertificate is not supported on non-Windows platforms and will throw an error if used because there's no certificate store equivalent to install to. On non-Windows OSes, [securestring] and [pscredential] plugins are not encrypted on disk by default because the encryption APIs used on Windows aren't available. However, you can enable AES based encryption that is also portable between OSes on a per-account level. This can be done during account creation or after the fact and you can switch between native and AES encryption at any time as in the following examples: # enable AES encryption during account creation New-PAAccount -AcceptTOS -Contact me @example . com -UseAltPluginEncryption # enable AES encryption on an existing account Set-PAAccount -UseAltPluginEncryption # switch back to OS-native encryption on an existing account Set-PAAccount -UseAltPluginEncryption : $false","title":"Does Posh-ACME work cross platform on PowerShell Core?"},{"location":"FAQ/#key-not-valid-for-use-in-specified-state","text":"This can happen on Windows if you try to copy the Posh-ACME profile folder to a different Windows computer or a different user's profile on the same computer. The underlying APIs used to encrypt plugin parameters using SecureString and PSCredential objects are tied to both the current computer and user and are not portable. However, you can use the Set-PAAccount -UseAltPluginEncryption to change the encryption used for the account to a portable AES based method and then copy the profile.","title":"Key not valid for use in specified state"},{"location":"FAQ/#export-pluginargs-access-is-denied","text":"This may happen on Windows if you're trying to run Posh-ACME over a remote or non-interactive session. By default, Posh-ACME encrypts \"secure\" plugin parameters before saving them to disk Windows' DPAPI subsystem. This has a known limitation that requires the current user's profile to be loaded which doesn't always happen in remote or non-interactive sessions. If you run into this problem, try running Set-PAAccount -UseAltPluginEncryption to use an alternative encryption option that doesn't rely on DPAPI.","title":"Export-PluginArgs : Access is denied"},{"location":"FAQ/#the-underlying-connection-was-closed-cloud-not-establish-trust-relationship-for-the-ssltls-secure-channel","text":"This shouldn't ever happen when using a publicly trusted certificate authority such as Let's Encrypt. If it does, an attacker or malware might be trying to MitM your connection. However if you're doing development against a test ACME server like Pebble or a private instance of Boulder , this is normal because the server is likely using a self-signed certificate. You can work around the problem by adding the -SkipCertificateCheck parameter to Set-PAServer . If the error seems to originate from one of the plugins, submit an issue and we can figure it out.","title":"The underlying connection was closed: Cloud not establish trust relationship for the SSL/TLS secure channel."},{"location":"FAQ/#access-is-denied","text":"The most common reason this error shows up is that you used the -Install parameter with New-PACertificate and you're not running PowerShell as an elevated process (Run as Administrator). Both the original call to New-PACertificate and any subsequent calls to Submit-Renewal need to run elevated for the module to install the resulting certificate.","title":"Access is denied"},{"location":"FAQ/#refer-to-sub-problems-for-more-information","text":"This is generally part of a longer error message and most often shows up when you're trying to create a certificate with multiple names. It means that the error body has additional detail that can help identify what went wrong. You can access the sub-problem data from the Exception object like this. # If you haven't caught the error in a try/catch block, it should be in the first index in the error object $Error [ 0 ]. Exception . Data . subproblems | Format-List # If you did catch the error, it will be in the $_ object catch { $_ . Exception . Data . subproblems | Format-List }","title":"Refer to sub-problems for more information."},{"location":"Functions/Complete-PAOrder/","text":"Complete-PAOrder \u00b6 Synopsis \u00b6 Exports cert files for a completed order and adds suggested renewal window to the order. Syntax \u00b6 Complete-PAOrder [[ -Order ] < Object >] [< CommonParameters >] Description \u00b6 Once an ACME order is finalized, the signed certificate and chain can be downloaded and combined with the local private key to generate the supported PEM and PFX files on disk. This function will also calculate the renewal window based on the signed certificate's expiration date and update the order object with that info. If the Install flag is set, this function will attempt to import the certificate into the Windows certificate store. Examples \u00b6 Example 1: Complete the current order \u00b6 Complete-PAOrder Example 2: Complete a specific order \u00b6 Get-PAOrder example . com | Complete-PAOrder Parameters \u00b6 -Order \u00b6 The order object to complete which must be associated with the currently active ACME account. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . Inputs \u00b6 PoshACME.PAOrder \u00b6 An order object as returned by Get-PAOrder. Outputs \u00b6 PoshACME.PACertificate \u00b6 The certificate object for the order. Related Links \u00b6 Get-PAOrder New-PAOrder","title":"Complete-PAOrder"},{"location":"Functions/Complete-PAOrder/#complete-paorder","text":"","title":"Complete-PAOrder"},{"location":"Functions/Complete-PAOrder/#synopsis","text":"Exports cert files for a completed order and adds suggested renewal window to the order.","title":"Synopsis"},{"location":"Functions/Complete-PAOrder/#syntax","text":"Complete-PAOrder [[ -Order ] < Object >] [< CommonParameters >]","title":"Syntax"},{"location":"Functions/Complete-PAOrder/#description","text":"Once an ACME order is finalized, the signed certificate and chain can be downloaded and combined with the local private key to generate the supported PEM and PFX files on disk. This function will also calculate the renewal window based on the signed certificate's expiration date and update the order object with that info. If the Install flag is set, this function will attempt to import the certificate into the Windows certificate store.","title":"Description"},{"location":"Functions/Complete-PAOrder/#examples","text":"","title":"Examples"},{"location":"Functions/Complete-PAOrder/#example-1-complete-the-current-order","text":"Complete-PAOrder","title":"Example 1: Complete the current order"},{"location":"Functions/Complete-PAOrder/#example-2-complete-a-specific-order","text":"Get-PAOrder example . com | Complete-PAOrder","title":"Example 2: Complete a specific order"},{"location":"Functions/Complete-PAOrder/#parameters","text":"","title":"Parameters"},{"location":"Functions/Complete-PAOrder/#-order","text":"The order object to complete which must be associated with the currently active ACME account. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Order"},{"location":"Functions/Complete-PAOrder/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Complete-PAOrder/#inputs","text":"","title":"Inputs"},{"location":"Functions/Complete-PAOrder/#poshacmepaorder","text":"An order object as returned by Get-PAOrder.","title":"PoshACME.PAOrder"},{"location":"Functions/Complete-PAOrder/#outputs","text":"","title":"Outputs"},{"location":"Functions/Complete-PAOrder/#poshacmepacertificate","text":"The certificate object for the order.","title":"PoshACME.PACertificate"},{"location":"Functions/Complete-PAOrder/#related-links","text":"Get-PAOrder New-PAOrder","title":"Related Links"},{"location":"Functions/Export-PAAccountKey/","text":"Export-PAAccountKey \u00b6 Synopsis \u00b6 Export an ACME account private key. Syntax \u00b6 Export-PAAccountKey [[ -ID ] < String >] -OutputFile < String > [ -Force ] [ -WhatIf ] [ -Confirm ] [< CommonParameters >] Description \u00b6 The account key is saved as an unencrypted Base64 encoded PEM file. Examples \u00b6 Example 1: Export the current account key \u00b6 Export-PAAccountKey -OutputFile .\\ mykey . pem Exports the current ACME account's key to the specified file. Example 2: Export the specified account key \u00b6 Export-PAAccountKey 12345 -OutputFile .\\ mykey . pem -Force Exports the specified ACME account's key to the specified file and overwrites it if necessary. Example 3: Backup account keys to the desktop \u00b6 $fldr = Join-Path ( [Environment] :: GetFolderPath ( 'Desktop' )) 'AcmeAccountKeys' New-Item -ItemType Directory -Force -Path $fldr | Out-Null Get-PAAccount -List | %{ Export-PAAccountKey $_ . ID -OutputFile \"$fldr\\ $( $_ . ID ) .key\" -Force } Backup all account keys for this ACME server to a folder on the desktop. Parameters \u00b6 -ID \u00b6 The ACME account ID value. Type : String Parameter Sets : (All) Aliases : Name Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -OutputFile \u00b6 The path to the file to write the key data to. Type : String Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Force \u00b6 If specified and the output file already exists, it will be overwritten. Without the switch, a confirmation prompt will be presented. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -WhatIf \u00b6 Shows what would happen if the cmdlet runs. The cmdlet is not run. Type : SwitchParameter Parameter Sets : (All) Aliases : wi Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Confirm \u00b6 Prompts you for confirmation before running the cmdlet. Type : SwitchParameter Parameter Sets : (All) Aliases : cf Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . Related Links \u00b6 Get-PAAccount","title":"Export-PAAccountKey"},{"location":"Functions/Export-PAAccountKey/#export-paaccountkey","text":"","title":"Export-PAAccountKey"},{"location":"Functions/Export-PAAccountKey/#synopsis","text":"Export an ACME account private key.","title":"Synopsis"},{"location":"Functions/Export-PAAccountKey/#syntax","text":"Export-PAAccountKey [[ -ID ] < String >] -OutputFile < String > [ -Force ] [ -WhatIf ] [ -Confirm ] [< CommonParameters >]","title":"Syntax"},{"location":"Functions/Export-PAAccountKey/#description","text":"The account key is saved as an unencrypted Base64 encoded PEM file.","title":"Description"},{"location":"Functions/Export-PAAccountKey/#examples","text":"","title":"Examples"},{"location":"Functions/Export-PAAccountKey/#example-1-export-the-current-account-key","text":"Export-PAAccountKey -OutputFile .\\ mykey . pem Exports the current ACME account's key to the specified file.","title":"Example 1: Export the current account key"},{"location":"Functions/Export-PAAccountKey/#example-2-export-the-specified-account-key","text":"Export-PAAccountKey 12345 -OutputFile .\\ mykey . pem -Force Exports the specified ACME account's key to the specified file and overwrites it if necessary.","title":"Example 2: Export the specified account key"},{"location":"Functions/Export-PAAccountKey/#example-3-backup-account-keys-to-the-desktop","text":"$fldr = Join-Path ( [Environment] :: GetFolderPath ( 'Desktop' )) 'AcmeAccountKeys' New-Item -ItemType Directory -Force -Path $fldr | Out-Null Get-PAAccount -List | %{ Export-PAAccountKey $_ . ID -OutputFile \"$fldr\\ $( $_ . ID ) .key\" -Force } Backup all account keys for this ACME server to a folder on the desktop.","title":"Example 3: Backup account keys to the desktop"},{"location":"Functions/Export-PAAccountKey/#parameters","text":"","title":"Parameters"},{"location":"Functions/Export-PAAccountKey/#-id","text":"The ACME account ID value. Type : String Parameter Sets : (All) Aliases : Name Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ID"},{"location":"Functions/Export-PAAccountKey/#-outputfile","text":"The path to the file to write the key data to. Type : String Parameter Sets : (All) Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-OutputFile"},{"location":"Functions/Export-PAAccountKey/#-force","text":"If specified and the output file already exists, it will be overwritten. Without the switch, a confirmation prompt will be presented. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Force"},{"location":"Functions/Export-PAAccountKey/#-whatif","text":"Shows what would happen if the cmdlet runs. The cmdlet is not run. Type : SwitchParameter Parameter Sets : (All) Aliases : wi Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-WhatIf"},{"location":"Functions/Export-PAAccountKey/#-confirm","text":"Prompts you for confirmation before running the cmdlet. Type : SwitchParameter Parameter Sets : (All) Aliases : cf Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Confirm"},{"location":"Functions/Export-PAAccountKey/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Export-PAAccountKey/#related-links","text":"Get-PAAccount","title":"Related Links"},{"location":"Functions/Get-KeyAuthorization/","text":"Get-KeyAuthorization \u00b6 Synopsis \u00b6 Calculate a key authorization string for a challenge token. Syntax \u00b6 Get-KeyAuthorization [ -Token ] < String > [[ -Account ] < Object >] [ -ForDNS ] [< CommonParameters >] Description \u00b6 A key authorization is a string that expresses a domain holder's authorization for a specified key to satisfy a specified challenge, by concatenating the token for the challenge with a key fingerprint. Examples \u00b6 Example 1: Specific Key Auth \u00b6 Get-KeyAuthorization 'XxXxXxXxXxXx' Get the key authorization for the specified token using the current account. Example 2: DNS Key Auths for current order \u00b6 ( Get-PAOrder | Get-PAAuthorization ). DNS01Token | Get-KeyAuthorization -ForDNS Get all key authorizations for the DNS challenges in the current order using the current account. Parameters \u00b6 -Token \u00b6 The token string for an ACME challenge. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False -Account \u00b6 The ACME account associated with the challenge. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -ForDNS \u00b6 Enable this switch if you're using the key authorization value for the 'dns-01' challenge type. It will do a few additional manipulation steps on the value that are required for a DNS TXT record. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . Inputs \u00b6 System.String \u00b6 The token value from an ACME challenge object. Outputs \u00b6 System.String \u00b6 The key authorization value. Related Links \u00b6 Get-PAAuthorization Submit-ChallengeValidation","title":"Get-KeyAuthorization"},{"location":"Functions/Get-KeyAuthorization/#get-keyauthorization","text":"","title":"Get-KeyAuthorization"},{"location":"Functions/Get-KeyAuthorization/#synopsis","text":"Calculate a key authorization string for a challenge token.","title":"Synopsis"},{"location":"Functions/Get-KeyAuthorization/#syntax","text":"Get-KeyAuthorization [ -Token ] < String > [[ -Account ] < Object >] [ -ForDNS ] [< CommonParameters >]","title":"Syntax"},{"location":"Functions/Get-KeyAuthorization/#description","text":"A key authorization is a string that expresses a domain holder's authorization for a specified key to satisfy a specified challenge, by concatenating the token for the challenge with a key fingerprint.","title":"Description"},{"location":"Functions/Get-KeyAuthorization/#examples","text":"","title":"Examples"},{"location":"Functions/Get-KeyAuthorization/#example-1-specific-key-auth","text":"Get-KeyAuthorization 'XxXxXxXxXxXx' Get the key authorization for the specified token using the current account.","title":"Example 1: Specific Key Auth"},{"location":"Functions/Get-KeyAuthorization/#example-2-dns-key-auths-for-current-order","text":"( Get-PAOrder | Get-PAAuthorization ). DNS01Token | Get-KeyAuthorization -ForDNS Get all key authorizations for the DNS challenges in the current order using the current account.","title":"Example 2: DNS Key Auths for current order"},{"location":"Functions/Get-KeyAuthorization/#parameters","text":"","title":"Parameters"},{"location":"Functions/Get-KeyAuthorization/#-token","text":"The token string for an ACME challenge. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Token"},{"location":"Functions/Get-KeyAuthorization/#-account","text":"The ACME account associated with the challenge. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Account"},{"location":"Functions/Get-KeyAuthorization/#-fordns","text":"Enable this switch if you're using the key authorization value for the 'dns-01' challenge type. It will do a few additional manipulation steps on the value that are required for a DNS TXT record. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-ForDNS"},{"location":"Functions/Get-KeyAuthorization/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Get-KeyAuthorization/#inputs","text":"","title":"Inputs"},{"location":"Functions/Get-KeyAuthorization/#systemstring","text":"The token value from an ACME challenge object.","title":"System.String"},{"location":"Functions/Get-KeyAuthorization/#outputs","text":"","title":"Outputs"},{"location":"Functions/Get-KeyAuthorization/#systemstring_1","text":"The key authorization value.","title":"System.String"},{"location":"Functions/Get-KeyAuthorization/#related-links","text":"Get-PAAuthorization Submit-ChallengeValidation","title":"Related Links"},{"location":"Functions/Get-PAAccount/","text":"Get-PAAccount \u00b6 Synopsis \u00b6 Get ACME account details. Syntax \u00b6 Specific \u00b6 Get-PAAccount [[ -ID ] < String >] [ -Refresh ] [ -ExtraParams < Object >] [< CommonParameters >] List \u00b6 Get-PAAccount [ -List ] [ -Status < String >] [ -Contact < String []>] [ -KeyLength < String []>] [ -Refresh ] [ -ExtraParams < Object >] [< CommonParameters >] Description \u00b6 Returns details such as Email, key length, and status for one or more ACME accounts previously created. Examples \u00b6 Example 1: Current Account \u00b6 Get-PAAccount Get cached ACME account details for the currently selected account. Example 2: Specific Account \u00b6 Get-PAAccount -ID 1234567 Get cached ACME account details for the specified account ID. Example 3: All Accounts \u00b6 Get-PAAccount -List Get all cached ACME account details. Example 4: Filter on Contact \u00b6 Get-PAAccount -List -Contact 'user1@example.com' Get cached ACME account details for all accounts that have user1@example.com as the only contact. Parameters \u00b6 -ID \u00b6 The account id value as returned by the ACME server. 'Name' is also an alias for this parameter. Type : String Parameter Sets : Specific Aliases : Name Required : False Position : 1 Default value : None Accept pipeline input : True (ByPropertyName, ByValue) Accept wildcard characters : False -List \u00b6 If specified, the details for all accounts will be returned. Type : SwitchParameter Parameter Sets : List Aliases : Required : True Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Status \u00b6 A Status string to filter the list of accounts with. Type : String Parameter Sets : List Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Contact \u00b6 One or more email addresses to filter the list of accounts with. Returned accounts must match exactly (not including the order). Type : String[] Parameter Sets : List Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -KeyLength \u00b6 The type and size of private key to filter the list of accounts with. For RSA keys, specify a number between 2048-4096 (divisible by 128). For ECC keys, specify either 'ec-256' or 'ec-384'. Type : String[] Parameter Sets : List Aliases : AccountKeyLength Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Refresh \u00b6 If specified, any account details returned will be freshly queried from the ACME server (excluding deactivated accounts). Otherwise, cached details will be returned. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -ExtraParams \u00b6 This parameter can be ignored and is only used to prevent errors when splatting with more parameters than this function supports. Type : Object Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . Outputs \u00b6 PoshACME.PAAccount \u00b6 An account object. Related Links \u00b6 Set-PAAccount New-PAAccount","title":"Get-PAAccount"},{"location":"Functions/Get-PAAccount/#get-paaccount","text":"","title":"Get-PAAccount"},{"location":"Functions/Get-PAAccount/#synopsis","text":"Get ACME account details.","title":"Synopsis"},{"location":"Functions/Get-PAAccount/#syntax","text":"","title":"Syntax"},{"location":"Functions/Get-PAAccount/#specific","text":"Get-PAAccount [[ -ID ] < String >] [ -Refresh ] [ -ExtraParams < Object >] [< CommonParameters >]","title":"Specific"},{"location":"Functions/Get-PAAccount/#list","text":"Get-PAAccount [ -List ] [ -Status < String >] [ -Contact < String []>] [ -KeyLength < String []>] [ -Refresh ] [ -ExtraParams < Object >] [< CommonParameters >]","title":"List"},{"location":"Functions/Get-PAAccount/#description","text":"Returns details such as Email, key length, and status for one or more ACME accounts previously created.","title":"Description"},{"location":"Functions/Get-PAAccount/#examples","text":"","title":"Examples"},{"location":"Functions/Get-PAAccount/#example-1-current-account","text":"Get-PAAccount Get cached ACME account details for the currently selected account.","title":"Example 1: Current Account"},{"location":"Functions/Get-PAAccount/#example-2-specific-account","text":"Get-PAAccount -ID 1234567 Get cached ACME account details for the specified account ID.","title":"Example 2: Specific Account"},{"location":"Functions/Get-PAAccount/#example-3-all-accounts","text":"Get-PAAccount -List Get all cached ACME account details.","title":"Example 3: All Accounts"},{"location":"Functions/Get-PAAccount/#example-4-filter-on-contact","text":"Get-PAAccount -List -Contact 'user1@example.com' Get cached ACME account details for all accounts that have user1@example.com as the only contact.","title":"Example 4: Filter on Contact"},{"location":"Functions/Get-PAAccount/#parameters","text":"","title":"Parameters"},{"location":"Functions/Get-PAAccount/#-id","text":"The account id value as returned by the ACME server. 'Name' is also an alias for this parameter. Type : String Parameter Sets : Specific Aliases : Name Required : False Position : 1 Default value : None Accept pipeline input : True (ByPropertyName, ByValue) Accept wildcard characters : False","title":"-ID"},{"location":"Functions/Get-PAAccount/#-list","text":"If specified, the details for all accounts will be returned. Type : SwitchParameter Parameter Sets : List Aliases : Required : True Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-List"},{"location":"Functions/Get-PAAccount/#-status","text":"A Status string to filter the list of accounts with. Type : String Parameter Sets : List Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Status"},{"location":"Functions/Get-PAAccount/#-contact","text":"One or more email addresses to filter the list of accounts with. Returned accounts must match exactly (not including the order). Type : String[] Parameter Sets : List Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Contact"},{"location":"Functions/Get-PAAccount/#-keylength","text":"The type and size of private key to filter the list of accounts with. For RSA keys, specify a number between 2048-4096 (divisible by 128). For ECC keys, specify either 'ec-256' or 'ec-384'. Type : String[] Parameter Sets : List Aliases : AccountKeyLength Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-KeyLength"},{"location":"Functions/Get-PAAccount/#-refresh","text":"If specified, any account details returned will be freshly queried from the ACME server (excluding deactivated accounts). Otherwise, cached details will be returned. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Refresh"},{"location":"Functions/Get-PAAccount/#-extraparams","text":"This parameter can be ignored and is only used to prevent errors when splatting with more parameters than this function supports. Type : Object Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ExtraParams"},{"location":"Functions/Get-PAAccount/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Get-PAAccount/#outputs","text":"","title":"Outputs"},{"location":"Functions/Get-PAAccount/#poshacmepaaccount","text":"An account object.","title":"PoshACME.PAAccount"},{"location":"Functions/Get-PAAccount/#related-links","text":"Set-PAAccount New-PAAccount","title":"Related Links"},{"location":"Functions/Get-PAAuthorization/","text":"Get-PAAuthorization \u00b6 Synopsis \u00b6 Get the authorizations associated with a particular order or set of authorization URLs. Syntax \u00b6 Get-PAAuthorization [ -AuthURLs ] < String []> [[ -Account ] < Object >] [< CommonParameters >] Description \u00b6 Returns details such as fqdn, status, expiration, and challenges for one or more ACME authorizations. Examples \u00b6 Example 1: Specific Authorization \u00b6 Get-PAAuthorization https :// acme . example . com / authz / 1234567 Get the authorization for the specified URL. Example 2: Order Authorizations \u00b6 Get-PAOrder | Get-PAAuthorization Get the authorizations for the current order on the current account. Parameters \u00b6 -AuthURLs \u00b6 One or more authorization URLs. You also pipe in one or more PoshACME.PAOrder objects. Type : String[] Parameter Sets : (All) Aliases : authorizations Required : True Position : 1 Default value : None Accept pipeline input : True (ByPropertyName, ByValue) Accept wildcard characters : False -Account \u00b6 An existing ACME account object such as the output from Get-PAAccount. If no account is specified, the current account will be used. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . Inputs \u00b6 System.String \u00b6 The URI of the authorization object. Outputs \u00b6 PoshACME.PAAuthorization \u00b6 An authorization object. Related Links \u00b6 Get-PAOrder New-PAOrder","title":"Get-PAAuthorization"},{"location":"Functions/Get-PAAuthorization/#get-paauthorization","text":"","title":"Get-PAAuthorization"},{"location":"Functions/Get-PAAuthorization/#synopsis","text":"Get the authorizations associated with a particular order or set of authorization URLs.","title":"Synopsis"},{"location":"Functions/Get-PAAuthorization/#syntax","text":"Get-PAAuthorization [ -AuthURLs ] < String []> [[ -Account ] < Object >] [< CommonParameters >]","title":"Syntax"},{"location":"Functions/Get-PAAuthorization/#description","text":"Returns details such as fqdn, status, expiration, and challenges for one or more ACME authorizations.","title":"Description"},{"location":"Functions/Get-PAAuthorization/#examples","text":"","title":"Examples"},{"location":"Functions/Get-PAAuthorization/#example-1-specific-authorization","text":"Get-PAAuthorization https :// acme . example . com / authz / 1234567 Get the authorization for the specified URL.","title":"Example 1: Specific Authorization"},{"location":"Functions/Get-PAAuthorization/#example-2-order-authorizations","text":"Get-PAOrder | Get-PAAuthorization Get the authorizations for the current order on the current account.","title":"Example 2: Order Authorizations"},{"location":"Functions/Get-PAAuthorization/#parameters","text":"","title":"Parameters"},{"location":"Functions/Get-PAAuthorization/#-authurls","text":"One or more authorization URLs. You also pipe in one or more PoshACME.PAOrder objects. Type : String[] Parameter Sets : (All) Aliases : authorizations Required : True Position : 1 Default value : None Accept pipeline input : True (ByPropertyName, ByValue) Accept wildcard characters : False","title":"-AuthURLs"},{"location":"Functions/Get-PAAuthorization/#-account","text":"An existing ACME account object such as the output from Get-PAAccount. If no account is specified, the current account will be used. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Account"},{"location":"Functions/Get-PAAuthorization/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Get-PAAuthorization/#inputs","text":"","title":"Inputs"},{"location":"Functions/Get-PAAuthorization/#systemstring","text":"The URI of the authorization object.","title":"System.String"},{"location":"Functions/Get-PAAuthorization/#outputs","text":"","title":"Outputs"},{"location":"Functions/Get-PAAuthorization/#poshacmepaauthorization","text":"An authorization object.","title":"PoshACME.PAAuthorization"},{"location":"Functions/Get-PAAuthorization/#related-links","text":"Get-PAOrder New-PAOrder","title":"Related Links"},{"location":"Functions/Get-PACertificate/","text":"Get-PACertificate \u00b6 Synopsis \u00b6 Get ACME certificate details. Syntax \u00b6 Specific \u00b6 Get-PACertificate [[ -MainDomain ] < String >] [ -Name < String >] [< CommonParameters >] List \u00b6 Get-PACertificate [ -List ] [< CommonParameters >] Description \u00b6 Returns details such as Thumbprint, Subject, Validity, SANs, and file locations for one or more ACME certificates previously created. Examples \u00b6 Example 1: Current Certificate \u00b6 Get-PACertificate Get cached ACME order details for the currently selected order. Example 2: Specific Certificate \u00b6 Get-PACertificate example . com Get cached ACME order details for the specified domain. Example 3: All Certificates \u00b6 Get-PACertificate -List Get all cached ACME order details. Parameters \u00b6 -MainDomain \u00b6 The primary domain associated with the certificate. This is the domain that goes in the certificate's subject. Type : String Parameter Sets : Specific Aliases : Required : False Position : 1 Default value : None Accept pipeline input : True (ByPropertyName, ByValue) Accept wildcard characters : False -Name \u00b6 The name of the ACME order. This can be useful to distinguish between two orders that have the same MainDomain. Type : String Parameter Sets : Specific Aliases : Required : False Position : Named Default value : None Accept pipeline input : True (ByPropertyName) Accept wildcard characters : False -List \u00b6 If specified, the details for all completed certificates will be returned for the current account. Type : SwitchParameter Parameter Sets : List Aliases : Required : True Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . Outputs \u00b6 PoshACME.PACertificate \u00b6 A certificate object. Related Links \u00b6 New-PACertificate","title":"Get-PACertificate"},{"location":"Functions/Get-PACertificate/#get-pacertificate","text":"","title":"Get-PACertificate"},{"location":"Functions/Get-PACertificate/#synopsis","text":"Get ACME certificate details.","title":"Synopsis"},{"location":"Functions/Get-PACertificate/#syntax","text":"","title":"Syntax"},{"location":"Functions/Get-PACertificate/#specific","text":"Get-PACertificate [[ -MainDomain ] < String >] [ -Name < String >] [< CommonParameters >]","title":"Specific"},{"location":"Functions/Get-PACertificate/#list","text":"Get-PACertificate [ -List ] [< CommonParameters >]","title":"List"},{"location":"Functions/Get-PACertificate/#description","text":"Returns details such as Thumbprint, Subject, Validity, SANs, and file locations for one or more ACME certificates previously created.","title":"Description"},{"location":"Functions/Get-PACertificate/#examples","text":"","title":"Examples"},{"location":"Functions/Get-PACertificate/#example-1-current-certificate","text":"Get-PACertificate Get cached ACME order details for the currently selected order.","title":"Example 1: Current Certificate"},{"location":"Functions/Get-PACertificate/#example-2-specific-certificate","text":"Get-PACertificate example . com Get cached ACME order details for the specified domain.","title":"Example 2: Specific Certificate"},{"location":"Functions/Get-PACertificate/#example-3-all-certificates","text":"Get-PACertificate -List Get all cached ACME order details.","title":"Example 3: All Certificates"},{"location":"Functions/Get-PACertificate/#parameters","text":"","title":"Parameters"},{"location":"Functions/Get-PACertificate/#-maindomain","text":"The primary domain associated with the certificate. This is the domain that goes in the certificate's subject. Type : String Parameter Sets : Specific Aliases : Required : False Position : 1 Default value : None Accept pipeline input : True (ByPropertyName, ByValue) Accept wildcard characters : False","title":"-MainDomain"},{"location":"Functions/Get-PACertificate/#-name","text":"The name of the ACME order. This can be useful to distinguish between two orders that have the same MainDomain. Type : String Parameter Sets : Specific Aliases : Required : False Position : Named Default value : None Accept pipeline input : True (ByPropertyName) Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Get-PACertificate/#-list","text":"If specified, the details for all completed certificates will be returned for the current account. Type : SwitchParameter Parameter Sets : List Aliases : Required : True Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-List"},{"location":"Functions/Get-PACertificate/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Get-PACertificate/#outputs","text":"","title":"Outputs"},{"location":"Functions/Get-PACertificate/#poshacmepacertificate","text":"A certificate object.","title":"PoshACME.PACertificate"},{"location":"Functions/Get-PACertificate/#related-links","text":"New-PACertificate","title":"Related Links"},{"location":"Functions/Get-PAOrder/","text":"Get-PAOrder \u00b6 Synopsis \u00b6 Get ACME order details. Syntax \u00b6 Specific \u00b6 Get-PAOrder [[ -MainDomain ] < String >] [ -Name < String >] [ -Refresh ] [< CommonParameters >] List \u00b6 Get-PAOrder [ -List ] [ -Refresh ] [< CommonParameters >] Description \u00b6 Returns details such as Domains, key length, expiration, and status for one or more ACME orders previously created. Examples \u00b6 Example 1: Current Order \u00b6 Get-PAOrder Get cached ACME order details for the currently selected order. Example 2: Specific Order \u00b6 Get-PAOrder example . com Get cached ACME order details for the specified domain. Example 3: All Orders \u00b6 Get-PAOrder -List Get all cached ACME order details. Example 4: Refresh Order Status \u00b6 Get-PAOrder -Refresh Get fresh ACME order details for the currently selected order. Parameters \u00b6 -MainDomain \u00b6 The primary domain associated with the order. This is the domain that goes in the certificate's subject. Type : String Parameter Sets : Specific Aliases : Required : False Position : 1 Default value : None Accept pipeline input : True (ByPropertyName, ByValue) Accept wildcard characters : False -Name \u00b6 The name of the ACME order. This can be useful to distinguish between two orders that have the same MainDomain. Type : String Parameter Sets : Specific Aliases : Required : False Position : Named Default value : None Accept pipeline input : True (ByPropertyName) Accept wildcard characters : False -List \u00b6 If specified, the details for all orders will be returned. Type : SwitchParameter Parameter Sets : List Aliases : Required : True Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Refresh \u00b6 If specified, any order details returned will be freshly queried from the ACME server. Otherwise, cached details will be returned. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . Outputs \u00b6 PoshACME.PAOrder \u00b6 An order object. Related Links \u00b6 Set-PAOrder New-PAOrder","title":"Get-PAOrder"},{"location":"Functions/Get-PAOrder/#get-paorder","text":"","title":"Get-PAOrder"},{"location":"Functions/Get-PAOrder/#synopsis","text":"Get ACME order details.","title":"Synopsis"},{"location":"Functions/Get-PAOrder/#syntax","text":"","title":"Syntax"},{"location":"Functions/Get-PAOrder/#specific","text":"Get-PAOrder [[ -MainDomain ] < String >] [ -Name < String >] [ -Refresh ] [< CommonParameters >]","title":"Specific"},{"location":"Functions/Get-PAOrder/#list","text":"Get-PAOrder [ -List ] [ -Refresh ] [< CommonParameters >]","title":"List"},{"location":"Functions/Get-PAOrder/#description","text":"Returns details such as Domains, key length, expiration, and status for one or more ACME orders previously created.","title":"Description"},{"location":"Functions/Get-PAOrder/#examples","text":"","title":"Examples"},{"location":"Functions/Get-PAOrder/#example-1-current-order","text":"Get-PAOrder Get cached ACME order details for the currently selected order.","title":"Example 1: Current Order"},{"location":"Functions/Get-PAOrder/#example-2-specific-order","text":"Get-PAOrder example . com Get cached ACME order details for the specified domain.","title":"Example 2: Specific Order"},{"location":"Functions/Get-PAOrder/#example-3-all-orders","text":"Get-PAOrder -List Get all cached ACME order details.","title":"Example 3: All Orders"},{"location":"Functions/Get-PAOrder/#example-4-refresh-order-status","text":"Get-PAOrder -Refresh Get fresh ACME order details for the currently selected order.","title":"Example 4: Refresh Order Status"},{"location":"Functions/Get-PAOrder/#parameters","text":"","title":"Parameters"},{"location":"Functions/Get-PAOrder/#-maindomain","text":"The primary domain associated with the order. This is the domain that goes in the certificate's subject. Type : String Parameter Sets : Specific Aliases : Required : False Position : 1 Default value : None Accept pipeline input : True (ByPropertyName, ByValue) Accept wildcard characters : False","title":"-MainDomain"},{"location":"Functions/Get-PAOrder/#-name","text":"The name of the ACME order. This can be useful to distinguish between two orders that have the same MainDomain. Type : String Parameter Sets : Specific Aliases : Required : False Position : Named Default value : None Accept pipeline input : True (ByPropertyName) Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Get-PAOrder/#-list","text":"If specified, the details for all orders will be returned. Type : SwitchParameter Parameter Sets : List Aliases : Required : True Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-List"},{"location":"Functions/Get-PAOrder/#-refresh","text":"If specified, any order details returned will be freshly queried from the ACME server. Otherwise, cached details will be returned. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Refresh"},{"location":"Functions/Get-PAOrder/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Get-PAOrder/#outputs","text":"","title":"Outputs"},{"location":"Functions/Get-PAOrder/#poshacmepaorder","text":"An order object.","title":"PoshACME.PAOrder"},{"location":"Functions/Get-PAOrder/#related-links","text":"Set-PAOrder New-PAOrder","title":"Related Links"},{"location":"Functions/Get-PAPlugin/","text":"Get-PAPlugin \u00b6 Synopsis \u00b6 Show plugin details, help, or launch the online guide. Syntax \u00b6 Basic (Default) \u00b6 Get-PAPlugin [[ -Plugin ] < String >] [< CommonParameters >] Params \u00b6 Get-PAPlugin [ -Plugin ] < String > [ -Params ] [< CommonParameters >] Guide \u00b6 Get-PAPlugin [ -Plugin ] < String > [ -Guide ] [< CommonParameters >] Help \u00b6 Get-PAPlugin [ -Plugin ] < String > [ -Help ] [< CommonParameters >] Description \u00b6 With no parameters, this function will return a list of built-in validation plugins and their details. With a Plugin specified, this function will return that plugin's details, help, or launch the online guide depending on which switches are specified. Examples \u00b6 Example 1: List Plugins \u00b6 Get-PAPlugin Get the list of available validation plugins Example 2: Show Plugin Parameter Sets \u00b6 Get-PAPlugin Route53 -Params Launch the user's default web browser to the online guide for the specified plugin. Example 3: Open Plugin Guide \u00b6 Get-PAPlugin Route53 -Guide Launch the user's default web browser to the online guide for the specified plugin. Parameters \u00b6 -Plugin \u00b6 The name of a validation plugin. Type : String Parameter Sets : Basic Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False Type : String Parameter Sets : Params, Guide, Help Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Help \u00b6 If specified, display the help contents for the specified plugin. Type : SwitchParameter Parameter Sets : Help Aliases : Required : True Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Guide \u00b6 If specified, launch the default web browser to the specified plugin's online guide. This currently only works on Windows and will simply display the URL on other OSes. Type : SwitchParameter Parameter Sets : Guide Aliases : Required : True Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Params \u00b6 If specified, returns the plugin-specific parameter sets associated with this plugin. Type : SwitchParameter Parameter Sets : Params Aliases : Required : True Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . Related Links \u00b6 New-PACertificate Publish-Challenge","title":"Get-PAPlugin"},{"location":"Functions/Get-PAPlugin/#get-paplugin","text":"","title":"Get-PAPlugin"},{"location":"Functions/Get-PAPlugin/#synopsis","text":"Show plugin details, help, or launch the online guide.","title":"Synopsis"},{"location":"Functions/Get-PAPlugin/#syntax","text":"","title":"Syntax"},{"location":"Functions/Get-PAPlugin/#basic-default","text":"Get-PAPlugin [[ -Plugin ] < String >] [< CommonParameters >]","title":"Basic (Default)"},{"location":"Functions/Get-PAPlugin/#params","text":"Get-PAPlugin [ -Plugin ] < String > [ -Params ] [< CommonParameters >]","title":"Params"},{"location":"Functions/Get-PAPlugin/#guide","text":"Get-PAPlugin [ -Plugin ] < String > [ -Guide ] [< CommonParameters >]","title":"Guide"},{"location":"Functions/Get-PAPlugin/#help","text":"Get-PAPlugin [ -Plugin ] < String > [ -Help ] [< CommonParameters >]","title":"Help"},{"location":"Functions/Get-PAPlugin/#description","text":"With no parameters, this function will return a list of built-in validation plugins and their details. With a Plugin specified, this function will return that plugin's details, help, or launch the online guide depending on which switches are specified.","title":"Description"},{"location":"Functions/Get-PAPlugin/#examples","text":"","title":"Examples"},{"location":"Functions/Get-PAPlugin/#example-1-list-plugins","text":"Get-PAPlugin Get the list of available validation plugins","title":"Example 1: List Plugins"},{"location":"Functions/Get-PAPlugin/#example-2-show-plugin-parameter-sets","text":"Get-PAPlugin Route53 -Params Launch the user's default web browser to the online guide for the specified plugin.","title":"Example 2: Show Plugin Parameter Sets"},{"location":"Functions/Get-PAPlugin/#example-3-open-plugin-guide","text":"Get-PAPlugin Route53 -Guide Launch the user's default web browser to the online guide for the specified plugin.","title":"Example 3: Open Plugin Guide"},{"location":"Functions/Get-PAPlugin/#parameters","text":"","title":"Parameters"},{"location":"Functions/Get-PAPlugin/#-plugin","text":"The name of a validation plugin. Type : String Parameter Sets : Basic Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False Type : String Parameter Sets : Params, Guide, Help Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Plugin"},{"location":"Functions/Get-PAPlugin/#-help","text":"If specified, display the help contents for the specified plugin. Type : SwitchParameter Parameter Sets : Help Aliases : Required : True Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Help"},{"location":"Functions/Get-PAPlugin/#-guide","text":"If specified, launch the default web browser to the specified plugin's online guide. This currently only works on Windows and will simply display the URL on other OSes. Type : SwitchParameter Parameter Sets : Guide Aliases : Required : True Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Guide"},{"location":"Functions/Get-PAPlugin/#-params","text":"If specified, returns the plugin-specific parameter sets associated with this plugin. Type : SwitchParameter Parameter Sets : Params Aliases : Required : True Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Params"},{"location":"Functions/Get-PAPlugin/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Get-PAPlugin/#related-links","text":"New-PACertificate Publish-Challenge","title":"Related Links"},{"location":"Functions/Get-PAPluginArgs/","text":"Get-PAPluginArgs \u00b6 Synopsis \u00b6 Retrieve the plugin args for the current or specified order. Syntax \u00b6 Get-PAPluginArgs [[ -MainDomain ] < String >] [ -Name < String >] [< CommonParameters >] Description \u00b6 An easy way to recall the plugin args used for a given order. Examples \u00b6 Example 1: Current Order Args \u00b6 Get-PAPluginArgs Retrieve the plugin args for the current order. Example 2: Specific Order Args \u00b6 Get-PAOrder -Name myorder | Get-PAPluginArgs Retrieve the plugin args for the specified order. Parameters \u00b6 -MainDomain \u00b6 The primary domain for the order. For a SAN order, this was the first domain in the list when creating the order. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : True (ByPropertyName, ByValue) Accept wildcard characters : False -Name \u00b6 The name of the ACME order. This can be useful to distinguish between two orders that have the same MainDomain. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : True (ByPropertyName) Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . Outputs \u00b6 System.Collections.Hashtable \u00b6 A hashtable containing saved plugin parameters. Related Links \u00b6 Gew-PAOrder","title":"Get-PAPluginArgs"},{"location":"Functions/Get-PAPluginArgs/#get-papluginargs","text":"","title":"Get-PAPluginArgs"},{"location":"Functions/Get-PAPluginArgs/#synopsis","text":"Retrieve the plugin args for the current or specified order.","title":"Synopsis"},{"location":"Functions/Get-PAPluginArgs/#syntax","text":"Get-PAPluginArgs [[ -MainDomain ] < String >] [ -Name < String >] [< CommonParameters >]","title":"Syntax"},{"location":"Functions/Get-PAPluginArgs/#description","text":"An easy way to recall the plugin args used for a given order.","title":"Description"},{"location":"Functions/Get-PAPluginArgs/#examples","text":"","title":"Examples"},{"location":"Functions/Get-PAPluginArgs/#example-1-current-order-args","text":"Get-PAPluginArgs Retrieve the plugin args for the current order.","title":"Example 1: Current Order Args"},{"location":"Functions/Get-PAPluginArgs/#example-2-specific-order-args","text":"Get-PAOrder -Name myorder | Get-PAPluginArgs Retrieve the plugin args for the specified order.","title":"Example 2: Specific Order Args"},{"location":"Functions/Get-PAPluginArgs/#parameters","text":"","title":"Parameters"},{"location":"Functions/Get-PAPluginArgs/#-maindomain","text":"The primary domain for the order. For a SAN order, this was the first domain in the list when creating the order. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : True (ByPropertyName, ByValue) Accept wildcard characters : False","title":"-MainDomain"},{"location":"Functions/Get-PAPluginArgs/#-name","text":"The name of the ACME order. This can be useful to distinguish between two orders that have the same MainDomain. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : True (ByPropertyName) Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Get-PAPluginArgs/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Get-PAPluginArgs/#outputs","text":"","title":"Outputs"},{"location":"Functions/Get-PAPluginArgs/#systemcollectionshashtable","text":"A hashtable containing saved plugin parameters.","title":"System.Collections.Hashtable"},{"location":"Functions/Get-PAPluginArgs/#related-links","text":"Gew-PAOrder","title":"Related Links"},{"location":"Functions/Get-PAServer/","text":"Get-PAServer \u00b6 Synopsis \u00b6 Get ACME server details. Syntax \u00b6 Specific (Default) \u00b6 Get-PAServer [[ -DirectoryUrl ] < String >] [ -Name < String >] [ -Refresh ] [ -Quiet ] [< CommonParameters >] List \u00b6 Get-PAServer [ -List ] [ -Refresh ] [< CommonParameters >] Description \u00b6 The primary use for this function is checking which ACME server is currently configured. New Account and Cert requests will be directed to this server. It may also be used to refresh server details and list additional servers that have previously been used. Examples \u00b6 Example 1: Current Server \u00b6 Get-PAServer Get cached ACME server details for the currently selected server. Example 2: Specific Server \u00b6 Get-PAServer -DirectoryUrl LE_PROD Get cached LetsEncrypt production server details using the short name. Example 3: Specific Server URL \u00b6 Get-PAServer -DirectoryUrl https :// myacme . example . com / directory Get cached ACME server details for the specified directory URL. Example 4: All Servers \u00b6 Get-PAServer -List Get all cached ACME server details. Parameters \u00b6 -DirectoryUrl \u00b6 Either the URL to an ACME server's \"directory\" endpoint or one of the supported short names. Currently supported short names include LE_PROD (LetsEncrypt Production), LE_STAGE (LetsEncrypt Staging), BUYPASS_PROD (BuyPass.com Production), BUYPASS_TEST (BuyPass.com Testing), and ZEROSSL_PROD (Zerossl.com Production). Type : String Parameter Sets : Specific Aliases : location Required : False Position : 1 Default value : None Accept pipeline input : True (ByPropertyName, ByValue) Accept wildcard characters : False -Name \u00b6 The name of the ACME server. The parameter is ignored if DirectoryUrl is specified. Type : String Parameter Sets : Specific Aliases : Required : False Position : Named Default value : None Accept pipeline input : True (ByPropertyName) Accept wildcard characters : False -List \u00b6 If specified, the details for all previously used servers will be returned. Type : SwitchParameter Parameter Sets : List Aliases : Required : True Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Refresh \u00b6 If specified, any server details returned will be freshly queried from the ACME server. Otherwise, cached details will be returned. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Quiet \u00b6 If specified, no warning will be thrown if a specified server is not found. Type : SwitchParameter Parameter Sets : Specific Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . Outputs \u00b6 PoshACME.PAServer \u00b6 A server object. Related Links \u00b6 Set-PAServer","title":"Get-PAServer"},{"location":"Functions/Get-PAServer/#get-paserver","text":"","title":"Get-PAServer"},{"location":"Functions/Get-PAServer/#synopsis","text":"Get ACME server details.","title":"Synopsis"},{"location":"Functions/Get-PAServer/#syntax","text":"","title":"Syntax"},{"location":"Functions/Get-PAServer/#specific-default","text":"Get-PAServer [[ -DirectoryUrl ] < String >] [ -Name < String >] [ -Refresh ] [ -Quiet ] [< CommonParameters >]","title":"Specific (Default)"},{"location":"Functions/Get-PAServer/#list","text":"Get-PAServer [ -List ] [ -Refresh ] [< CommonParameters >]","title":"List"},{"location":"Functions/Get-PAServer/#description","text":"The primary use for this function is checking which ACME server is currently configured. New Account and Cert requests will be directed to this server. It may also be used to refresh server details and list additional servers that have previously been used.","title":"Description"},{"location":"Functions/Get-PAServer/#examples","text":"","title":"Examples"},{"location":"Functions/Get-PAServer/#example-1-current-server","text":"Get-PAServer Get cached ACME server details for the currently selected server.","title":"Example 1: Current Server"},{"location":"Functions/Get-PAServer/#example-2-specific-server","text":"Get-PAServer -DirectoryUrl LE_PROD Get cached LetsEncrypt production server details using the short name.","title":"Example 2: Specific Server"},{"location":"Functions/Get-PAServer/#example-3-specific-server-url","text":"Get-PAServer -DirectoryUrl https :// myacme . example . com / directory Get cached ACME server details for the specified directory URL.","title":"Example 3: Specific Server URL"},{"location":"Functions/Get-PAServer/#example-4-all-servers","text":"Get-PAServer -List Get all cached ACME server details.","title":"Example 4: All Servers"},{"location":"Functions/Get-PAServer/#parameters","text":"","title":"Parameters"},{"location":"Functions/Get-PAServer/#-directoryurl","text":"Either the URL to an ACME server's \"directory\" endpoint or one of the supported short names. Currently supported short names include LE_PROD (LetsEncrypt Production), LE_STAGE (LetsEncrypt Staging), BUYPASS_PROD (BuyPass.com Production), BUYPASS_TEST (BuyPass.com Testing), and ZEROSSL_PROD (Zerossl.com Production). Type : String Parameter Sets : Specific Aliases : location Required : False Position : 1 Default value : None Accept pipeline input : True (ByPropertyName, ByValue) Accept wildcard characters : False","title":"-DirectoryUrl"},{"location":"Functions/Get-PAServer/#-name","text":"The name of the ACME server. The parameter is ignored if DirectoryUrl is specified. Type : String Parameter Sets : Specific Aliases : Required : False Position : Named Default value : None Accept pipeline input : True (ByPropertyName) Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Get-PAServer/#-list","text":"If specified, the details for all previously used servers will be returned. Type : SwitchParameter Parameter Sets : List Aliases : Required : True Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-List"},{"location":"Functions/Get-PAServer/#-refresh","text":"If specified, any server details returned will be freshly queried from the ACME server. Otherwise, cached details will be returned. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Refresh"},{"location":"Functions/Get-PAServer/#-quiet","text":"If specified, no warning will be thrown if a specified server is not found. Type : SwitchParameter Parameter Sets : Specific Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Quiet"},{"location":"Functions/Get-PAServer/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Get-PAServer/#outputs","text":"","title":"Outputs"},{"location":"Functions/Get-PAServer/#poshacmepaserver","text":"A server object.","title":"PoshACME.PAServer"},{"location":"Functions/Get-PAServer/#related-links","text":"Set-PAServer","title":"Related Links"},{"location":"Functions/Install-PACertificate/","text":"Install-PACertificate \u00b6 Synopsis \u00b6 Install a Posh-ACME certificate into a Windows certificate store. Syntax \u00b6 Install-PACertificate [[ -PACertificate ] < Object >] [[ -StoreLocation ] < String >] [[ -StoreName ] < String >] [ -NotExportable ] [< CommonParameters >] Description \u00b6 This can be used instead of the -Install parameter on New-PACertificate to import a certificate with additional options. Examples \u00b6 Example 1: Import Current Certificate \u00b6 Install-PACertificate Install the certificate for the currently selected order to the default LocalMachine\\My store. Example 2: Import Specific Certificate \u00b6 Get-PACertificate example . com | Install-PACertificate Install the specified certificate to the default LocalMachine\\My store. Example 3: Import with Options \u00b6 Install-PACertificate -StoreLocation 'CurrentUser' -NotExportable Install the certificate for the currently selected order to the CurrentUser\\My store and mark the private key as not exportable. Parameters \u00b6 -PACertificate \u00b6 The PACertificate object you want to import. This can be retrieved using Get-PACertificate and is also returned from things like New-PACertificate and Submit-Renewal. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False -StoreLocation \u00b6 Either 'LocalMachine' or 'CurrentUser'. Defaults to 'LocalMachine'. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : LocalMachine Accept pipeline input : False Accept wildcard characters : False -StoreName \u00b6 The name of the certificate store to import to. Defaults to 'My'. The store must already exist and will not be created automatically. Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : My Accept pipeline input : False Accept wildcard characters : False -NotExportable \u00b6 If specified, the private key will not be marked as Exportable. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . Inputs \u00b6 PoshACME.PACertificate \u00b6 A certificate object as returned by Get-PACertificate. Notes \u00b6 This function only currently works on Windows OSes. A warning will be thrown on other OSes. Related Links \u00b6 Get-PACertificate","title":"Install-PACertificate"},{"location":"Functions/Install-PACertificate/#install-pacertificate","text":"","title":"Install-PACertificate"},{"location":"Functions/Install-PACertificate/#synopsis","text":"Install a Posh-ACME certificate into a Windows certificate store.","title":"Synopsis"},{"location":"Functions/Install-PACertificate/#syntax","text":"Install-PACertificate [[ -PACertificate ] < Object >] [[ -StoreLocation ] < String >] [[ -StoreName ] < String >] [ -NotExportable ] [< CommonParameters >]","title":"Syntax"},{"location":"Functions/Install-PACertificate/#description","text":"This can be used instead of the -Install parameter on New-PACertificate to import a certificate with additional options.","title":"Description"},{"location":"Functions/Install-PACertificate/#examples","text":"","title":"Examples"},{"location":"Functions/Install-PACertificate/#example-1-import-current-certificate","text":"Install-PACertificate Install the certificate for the currently selected order to the default LocalMachine\\My store.","title":"Example 1: Import Current Certificate"},{"location":"Functions/Install-PACertificate/#example-2-import-specific-certificate","text":"Get-PACertificate example . com | Install-PACertificate Install the specified certificate to the default LocalMachine\\My store.","title":"Example 2: Import Specific Certificate"},{"location":"Functions/Install-PACertificate/#example-3-import-with-options","text":"Install-PACertificate -StoreLocation 'CurrentUser' -NotExportable Install the certificate for the currently selected order to the CurrentUser\\My store and mark the private key as not exportable.","title":"Example 3: Import with Options"},{"location":"Functions/Install-PACertificate/#parameters","text":"","title":"Parameters"},{"location":"Functions/Install-PACertificate/#-pacertificate","text":"The PACertificate object you want to import. This can be retrieved using Get-PACertificate and is also returned from things like New-PACertificate and Submit-Renewal. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-PACertificate"},{"location":"Functions/Install-PACertificate/#-storelocation","text":"Either 'LocalMachine' or 'CurrentUser'. Defaults to 'LocalMachine'. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : LocalMachine Accept pipeline input : False Accept wildcard characters : False","title":"-StoreLocation"},{"location":"Functions/Install-PACertificate/#-storename","text":"The name of the certificate store to import to. Defaults to 'My'. The store must already exist and will not be created automatically. Type : String Parameter Sets : (All) Aliases : Required : False Position : 3 Default value : My Accept pipeline input : False Accept wildcard characters : False","title":"-StoreName"},{"location":"Functions/Install-PACertificate/#-notexportable","text":"If specified, the private key will not be marked as Exportable. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-NotExportable"},{"location":"Functions/Install-PACertificate/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Install-PACertificate/#inputs","text":"","title":"Inputs"},{"location":"Functions/Install-PACertificate/#poshacmepacertificate","text":"A certificate object as returned by Get-PACertificate.","title":"PoshACME.PACertificate"},{"location":"Functions/Install-PACertificate/#notes","text":"This function only currently works on Windows OSes. A warning will be thrown on other OSes.","title":"Notes"},{"location":"Functions/Install-PACertificate/#related-links","text":"Get-PACertificate","title":"Related Links"},{"location":"Functions/Invoke-HttpChallengeListener/","text":"Invoke-HttpChallengeListener \u00b6 Synopsis \u00b6 Starts a local web server to answer pending http-01 ACME challenges. Syntax \u00b6 Invoke-HttpChallengeListener [[ -MainDomain ] < String >] [[ -Name ] < String >] [ -ListenerTimeout < Int32 >] [ -Port < Int32 >] [ -ListenerPrefixes < String []>] [ -WhatIf ] [ -Confirm ] [< CommonParameters >] Description \u00b6 Uses System.Net.HttpListener to answer http-01 ACME challenges for the current or specified order. If MainDomain is not specified, the current Order is used. If running on Windows with non-admin privileges, Access Denied errors may be thrown unless a URL reservation is added using netsh that matches the HttpListener prefix that will be used. The default wildcard prefix is http://+/.well-known/acme-challenge and the netsh command might look something like this: netsh http add urlacl url=http://+/.well-known/acme-challenge/ user=Everyone Examples \u00b6 Example 1: Answer for Current Order \u00b6 Invoke-HttpChallengeListener Start listener on default port 80 for pending challenges for the current order. Example 2: Specific Order with Options \u00b6 Invoke-HttpChallengeListener -MainDomain 'example.com' -Port 8080 -ListenerTimeout 30 Start listener on port 8080 with a timeout of 30 seconds for the specified order. Example 3: Using Other Prefixes \u00b6 $prefixes = 'http://example.com/.well-known/acme-challenge/' , 'http://www.example.com/.well-known/acme-challenge' Invoke-HttpChallengeListener -ListenerPrefixes $prefixes Start listener using the specified prefixes for the current order. Parameters \u00b6 -MainDomain \u00b6 The primary domain associated with an order. Type : String Parameter Sets : (All) Aliases : domain, fqdn Required : False Position : 1 Default value : None Accept pipeline input : True (ByPropertyName, ByValue) Accept wildcard characters : False -Name \u00b6 The name of the ACME order. This can be useful to distinguish between two orders that have the same MainDomain. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : True (ByPropertyName) Accept wildcard characters : False -ListenerTimeout \u00b6 The timeout in seconds for the webserver. When reached, the http listener stops regardless of challenge status. Type : Int32 Parameter Sets : (All) Aliases : TTL Required : False Position : Named Default value : 120 Accept pipeline input : False Accept wildcard characters : False -Port \u00b6 The TCP port on which the http listener is listening. 80 by default. This parameter is ignored when ListenerPrefixes is specified. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 0 Accept pipeline input : False Accept wildcard characters : False -ListenerPrefixes \u00b6 Overrides the default wildcard listener prefix with the specified prefixes instead. Be sure to include the port if necessary and a trailing '/' on all included prefixes. See https://docs.microsoft.com/en-us/dotnet/api/system.net.httplistener for details. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -WhatIf \u00b6 Shows what would happen if the cmdlet runs. The cmdlet is not run. Type : SwitchParameter Parameter Sets : (All) Aliases : wi Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Confirm \u00b6 Prompts you for confirmation before running the cmdlet. Type : SwitchParameter Parameter Sets : (All) Aliases : cf Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . Outputs \u00b6 PoshACME.PAAuthorization \u00b6 The authorization object associated with the order. Notes \u00b6 Warning This function is deprecated and may be removed in a future major version. Please migrate your scripts to use the WebSelfHost plugin. Related Links \u00b6 Get-PAOrder Get-PAAuthorization","title":"Invoke-HttpChallengeListener"},{"location":"Functions/Invoke-HttpChallengeListener/#invoke-httpchallengelistener","text":"","title":"Invoke-HttpChallengeListener"},{"location":"Functions/Invoke-HttpChallengeListener/#synopsis","text":"Starts a local web server to answer pending http-01 ACME challenges.","title":"Synopsis"},{"location":"Functions/Invoke-HttpChallengeListener/#syntax","text":"Invoke-HttpChallengeListener [[ -MainDomain ] < String >] [[ -Name ] < String >] [ -ListenerTimeout < Int32 >] [ -Port < Int32 >] [ -ListenerPrefixes < String []>] [ -WhatIf ] [ -Confirm ] [< CommonParameters >]","title":"Syntax"},{"location":"Functions/Invoke-HttpChallengeListener/#description","text":"Uses System.Net.HttpListener to answer http-01 ACME challenges for the current or specified order. If MainDomain is not specified, the current Order is used. If running on Windows with non-admin privileges, Access Denied errors may be thrown unless a URL reservation is added using netsh that matches the HttpListener prefix that will be used. The default wildcard prefix is http://+/.well-known/acme-challenge and the netsh command might look something like this: netsh http add urlacl url=http://+/.well-known/acme-challenge/ user=Everyone","title":"Description"},{"location":"Functions/Invoke-HttpChallengeListener/#examples","text":"","title":"Examples"},{"location":"Functions/Invoke-HttpChallengeListener/#example-1-answer-for-current-order","text":"Invoke-HttpChallengeListener Start listener on default port 80 for pending challenges for the current order.","title":"Example 1: Answer for Current Order"},{"location":"Functions/Invoke-HttpChallengeListener/#example-2-specific-order-with-options","text":"Invoke-HttpChallengeListener -MainDomain 'example.com' -Port 8080 -ListenerTimeout 30 Start listener on port 8080 with a timeout of 30 seconds for the specified order.","title":"Example 2: Specific Order with Options"},{"location":"Functions/Invoke-HttpChallengeListener/#example-3-using-other-prefixes","text":"$prefixes = 'http://example.com/.well-known/acme-challenge/' , 'http://www.example.com/.well-known/acme-challenge' Invoke-HttpChallengeListener -ListenerPrefixes $prefixes Start listener using the specified prefixes for the current order.","title":"Example 3: Using Other Prefixes"},{"location":"Functions/Invoke-HttpChallengeListener/#parameters","text":"","title":"Parameters"},{"location":"Functions/Invoke-HttpChallengeListener/#-maindomain","text":"The primary domain associated with an order. Type : String Parameter Sets : (All) Aliases : domain, fqdn Required : False Position : 1 Default value : None Accept pipeline input : True (ByPropertyName, ByValue) Accept wildcard characters : False","title":"-MainDomain"},{"location":"Functions/Invoke-HttpChallengeListener/#-name","text":"The name of the ACME order. This can be useful to distinguish between two orders that have the same MainDomain. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : True (ByPropertyName) Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Invoke-HttpChallengeListener/#-listenertimeout","text":"The timeout in seconds for the webserver. When reached, the http listener stops regardless of challenge status. Type : Int32 Parameter Sets : (All) Aliases : TTL Required : False Position : Named Default value : 120 Accept pipeline input : False Accept wildcard characters : False","title":"-ListenerTimeout"},{"location":"Functions/Invoke-HttpChallengeListener/#-port","text":"The TCP port on which the http listener is listening. 80 by default. This parameter is ignored when ListenerPrefixes is specified. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 0 Accept pipeline input : False Accept wildcard characters : False","title":"-Port"},{"location":"Functions/Invoke-HttpChallengeListener/#-listenerprefixes","text":"Overrides the default wildcard listener prefix with the specified prefixes instead. Be sure to include the port if necessary and a trailing '/' on all included prefixes. See https://docs.microsoft.com/en-us/dotnet/api/system.net.httplistener for details. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ListenerPrefixes"},{"location":"Functions/Invoke-HttpChallengeListener/#-whatif","text":"Shows what would happen if the cmdlet runs. The cmdlet is not run. Type : SwitchParameter Parameter Sets : (All) Aliases : wi Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-WhatIf"},{"location":"Functions/Invoke-HttpChallengeListener/#-confirm","text":"Prompts you for confirmation before running the cmdlet. Type : SwitchParameter Parameter Sets : (All) Aliases : cf Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Confirm"},{"location":"Functions/Invoke-HttpChallengeListener/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Invoke-HttpChallengeListener/#outputs","text":"","title":"Outputs"},{"location":"Functions/Invoke-HttpChallengeListener/#poshacmepaauthorization","text":"The authorization object associated with the order.","title":"PoshACME.PAAuthorization"},{"location":"Functions/Invoke-HttpChallengeListener/#notes","text":"Warning This function is deprecated and may be removed in a future major version. Please migrate your scripts to use the WebSelfHost plugin.","title":"Notes"},{"location":"Functions/Invoke-HttpChallengeListener/#related-links","text":"Get-PAOrder Get-PAAuthorization","title":"Related Links"},{"location":"Functions/New-PAAccount/","text":"New-PAAccount \u00b6 Synopsis \u00b6 Create a new account on the current ACME server. Syntax \u00b6 Generate (Default) \u00b6 New-PAAccount [[ -Contact ] < String []>] [[ -KeyLength ] < String >] [ -ID < String >] [ -AcceptTOS ] [ -Force ] [ -ExtAcctKID < String >] [ -ExtAcctHMACKey < String >] [ -ExtAcctAlgorithm < String >] [ -UseAltPluginEncryption ] [ -ExtraParams < Object >] [ -WhatIf ] [ -Confirm ] [< CommonParameters >] ImportKey \u00b6 New-PAAccount [[ -Contact ] < String []>] -KeyFile < String > [ -ID < String >] [ -AcceptTOS ] [ -OnlyReturnExisting ] [ -Force ] [ -ExtAcctKID < String >] [ -ExtAcctHMACKey < String >] [ -ExtAcctAlgorithm < String >] [ -UseAltPluginEncryption ] [ -ExtraParams < Object >] [ -WhatIf ] [ -Confirm ] [< CommonParameters >] Description \u00b6 All certificate requests require a valid account on an ACME server. An contact email address is not required for Let's Encrypt, but other CAs may require it. Without an email address, certificate expiration notices will not be sent. The account KeyLength is a personal preference and does not relate to the KeyLength of the certificates. Examples \u00b6 Example 1: Basic Account \u00b6 New-PAAccount -Contact 'me@example.com' -AcceptTOS Create a new account with the specified email and the default key length. Example 2: No Contact and Alternate KeyLength \u00b6 New-PAAccount -KeyLength 'ec-384' -AcceptTOS -Force Create a new account with no contact email and an ECC key using P-384 curve that ignores any confirmations. Example 3: Pre-Generated Key \u00b6 New-PAAccount -KeyFile .\\ mykey . key -AcceptTOS Create a new account using a pre-generated private key file. Example 4: External Account Binding \u00b6 $eabKID = 'xxxxxxxx' $eabHMAC = 'yyyyyyyy' New-PAAccount -ExtAcctKID $eabKID -ExtAcctHMACKey $eabHMAC -Contact 'me@example.com' -AcceptTOS Create a new account using External Account Binding (EAB) values provided by your ACME CA. Example 5: Alternative Plugin Encryption \u00b6 New-PAAccount -UseAltPluginEncryption -Contact 'me@example.com' -AcceptTOS Create a new account configured for alternative plugin encryption which uses an OS-portable AES key instead of the OS-native libraries. Parameters \u00b6 -Contact \u00b6 One or more email addresses to associate with this account. These addresses will be used by the ACME server to send certificate expiration notifications or other important account notices. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -KeyLength \u00b6 The type and size of private key to use. For RSA keys, specify a number between 2048-4096 (divisible by 128). For ECC keys, specify either 'ec-256' or 'ec-384'. Defaults to 'ec-256'. Type : String Parameter Sets : Generate Aliases : AccountKeyLength Required : False Position : 2 Default value : Ec-256 Accept pipeline input : False Accept wildcard characters : False -KeyFile \u00b6 The path to an existing EC or RSA private key file. This will attempt to create the account using the specified key as the ACME account key. This can be used to recover/import an existing ACME account if one is already associated with the key. Type : String Parameter Sets : ImportKey Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -ID \u00b6 The name of the ACME acccount. Type : String Parameter Sets : (All) Aliases : Name Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -AcceptTOS \u00b6 If not specified, the ACME server will throw an error with a link to the current Terms of Service. Using this switch indicates acceptance of those Terms of Service and is required for successful account creation. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -OnlyReturnExisting \u00b6 If specified, the ACME server will only return the account details if they already exist for the given private key. Otherwise, an error will be thrown. This can be useful to check whether an existing private key is associated with an ACME acount and recover the account details without creating a new account. Type : SwitchParameter Parameter Sets : ImportKey Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Force \u00b6 If specified, confirmation prompts that may have been generated will be skipped. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -ExtAcctKID \u00b6 The external account key identifier supplied by the CA. This is required for ACME CAs that require external account binding. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -ExtAcctHMACKey \u00b6 The external account HMAC key supplied by the CA and encoded as Base64Url. This is required for ACME CAs that require external account binding. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -ExtAcctAlgorithm \u00b6 The HMAC algorithm to use. Defaults to 'HS256'. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : HS256 Accept pipeline input : False Accept wildcard characters : False -UseAltPluginEncryption \u00b6 If specified, the account will be configured to use a randomly generated AES key to encrypt sensitive plugin parameters on disk instead of using the OS's native encryption methods. This can be useful if the config is being shared across systems or platforms. You can revert to OS native encryption using Set-PAAccount -UseAltPluginEncryption:$false . Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -ExtraParams \u00b6 This parameter can be ignored and is only used to prevent errors when splatting with more parameters than this function supports. Type : Object Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -WhatIf \u00b6 Shows what would happen if the cmdlet runs. The cmdlet is not run. Type : SwitchParameter Parameter Sets : (All) Aliases : wi Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Confirm \u00b6 Prompts you for confirmation before running the cmdlet. Type : SwitchParameter Parameter Sets : (All) Aliases : cf Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . Outputs \u00b6 PoshACME.PAAccount \u00b6 An account object. Related Links \u00b6 Get-PAAccount Set-PAAccount","title":"New-PAAccount"},{"location":"Functions/New-PAAccount/#new-paaccount","text":"","title":"New-PAAccount"},{"location":"Functions/New-PAAccount/#synopsis","text":"Create a new account on the current ACME server.","title":"Synopsis"},{"location":"Functions/New-PAAccount/#syntax","text":"","title":"Syntax"},{"location":"Functions/New-PAAccount/#generate-default","text":"New-PAAccount [[ -Contact ] < String []>] [[ -KeyLength ] < String >] [ -ID < String >] [ -AcceptTOS ] [ -Force ] [ -ExtAcctKID < String >] [ -ExtAcctHMACKey < String >] [ -ExtAcctAlgorithm < String >] [ -UseAltPluginEncryption ] [ -ExtraParams < Object >] [ -WhatIf ] [ -Confirm ] [< CommonParameters >]","title":"Generate (Default)"},{"location":"Functions/New-PAAccount/#importkey","text":"New-PAAccount [[ -Contact ] < String []>] -KeyFile < String > [ -ID < String >] [ -AcceptTOS ] [ -OnlyReturnExisting ] [ -Force ] [ -ExtAcctKID < String >] [ -ExtAcctHMACKey < String >] [ -ExtAcctAlgorithm < String >] [ -UseAltPluginEncryption ] [ -ExtraParams < Object >] [ -WhatIf ] [ -Confirm ] [< CommonParameters >]","title":"ImportKey"},{"location":"Functions/New-PAAccount/#description","text":"All certificate requests require a valid account on an ACME server. An contact email address is not required for Let's Encrypt, but other CAs may require it. Without an email address, certificate expiration notices will not be sent. The account KeyLength is a personal preference and does not relate to the KeyLength of the certificates.","title":"Description"},{"location":"Functions/New-PAAccount/#examples","text":"","title":"Examples"},{"location":"Functions/New-PAAccount/#example-1-basic-account","text":"New-PAAccount -Contact 'me@example.com' -AcceptTOS Create a new account with the specified email and the default key length.","title":"Example 1: Basic Account"},{"location":"Functions/New-PAAccount/#example-2-no-contact-and-alternate-keylength","text":"New-PAAccount -KeyLength 'ec-384' -AcceptTOS -Force Create a new account with no contact email and an ECC key using P-384 curve that ignores any confirmations.","title":"Example 2: No Contact and Alternate KeyLength"},{"location":"Functions/New-PAAccount/#example-3-pre-generated-key","text":"New-PAAccount -KeyFile .\\ mykey . key -AcceptTOS Create a new account using a pre-generated private key file.","title":"Example 3: Pre-Generated Key"},{"location":"Functions/New-PAAccount/#example-4-external-account-binding","text":"$eabKID = 'xxxxxxxx' $eabHMAC = 'yyyyyyyy' New-PAAccount -ExtAcctKID $eabKID -ExtAcctHMACKey $eabHMAC -Contact 'me@example.com' -AcceptTOS Create a new account using External Account Binding (EAB) values provided by your ACME CA.","title":"Example 4: External Account Binding"},{"location":"Functions/New-PAAccount/#example-5-alternative-plugin-encryption","text":"New-PAAccount -UseAltPluginEncryption -Contact 'me@example.com' -AcceptTOS Create a new account configured for alternative plugin encryption which uses an OS-portable AES key instead of the OS-native libraries.","title":"Example 5: Alternative Plugin Encryption"},{"location":"Functions/New-PAAccount/#parameters","text":"","title":"Parameters"},{"location":"Functions/New-PAAccount/#-contact","text":"One or more email addresses to associate with this account. These addresses will be used by the ACME server to send certificate expiration notifications or other important account notices. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Contact"},{"location":"Functions/New-PAAccount/#-keylength","text":"The type and size of private key to use. For RSA keys, specify a number between 2048-4096 (divisible by 128). For ECC keys, specify either 'ec-256' or 'ec-384'. Defaults to 'ec-256'. Type : String Parameter Sets : Generate Aliases : AccountKeyLength Required : False Position : 2 Default value : Ec-256 Accept pipeline input : False Accept wildcard characters : False","title":"-KeyLength"},{"location":"Functions/New-PAAccount/#-keyfile","text":"The path to an existing EC or RSA private key file. This will attempt to create the account using the specified key as the ACME account key. This can be used to recover/import an existing ACME account if one is already associated with the key. Type : String Parameter Sets : ImportKey Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-KeyFile"},{"location":"Functions/New-PAAccount/#-id","text":"The name of the ACME acccount. Type : String Parameter Sets : (All) Aliases : Name Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ID"},{"location":"Functions/New-PAAccount/#-accepttos","text":"If not specified, the ACME server will throw an error with a link to the current Terms of Service. Using this switch indicates acceptance of those Terms of Service and is required for successful account creation. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-AcceptTOS"},{"location":"Functions/New-PAAccount/#-onlyreturnexisting","text":"If specified, the ACME server will only return the account details if they already exist for the given private key. Otherwise, an error will be thrown. This can be useful to check whether an existing private key is associated with an ACME acount and recover the account details without creating a new account. Type : SwitchParameter Parameter Sets : ImportKey Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-OnlyReturnExisting"},{"location":"Functions/New-PAAccount/#-force","text":"If specified, confirmation prompts that may have been generated will be skipped. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Force"},{"location":"Functions/New-PAAccount/#-extacctkid","text":"The external account key identifier supplied by the CA. This is required for ACME CAs that require external account binding. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ExtAcctKID"},{"location":"Functions/New-PAAccount/#-extaccthmackey","text":"The external account HMAC key supplied by the CA and encoded as Base64Url. This is required for ACME CAs that require external account binding. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ExtAcctHMACKey"},{"location":"Functions/New-PAAccount/#-extacctalgorithm","text":"The HMAC algorithm to use. Defaults to 'HS256'. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : HS256 Accept pipeline input : False Accept wildcard characters : False","title":"-ExtAcctAlgorithm"},{"location":"Functions/New-PAAccount/#-usealtpluginencryption","text":"If specified, the account will be configured to use a randomly generated AES key to encrypt sensitive plugin parameters on disk instead of using the OS's native encryption methods. This can be useful if the config is being shared across systems or platforms. You can revert to OS native encryption using Set-PAAccount -UseAltPluginEncryption:$false . Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-UseAltPluginEncryption"},{"location":"Functions/New-PAAccount/#-extraparams","text":"This parameter can be ignored and is only used to prevent errors when splatting with more parameters than this function supports. Type : Object Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-ExtraParams"},{"location":"Functions/New-PAAccount/#-whatif","text":"Shows what would happen if the cmdlet runs. The cmdlet is not run. Type : SwitchParameter Parameter Sets : (All) Aliases : wi Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-WhatIf"},{"location":"Functions/New-PAAccount/#-confirm","text":"Prompts you for confirmation before running the cmdlet. Type : SwitchParameter Parameter Sets : (All) Aliases : cf Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Confirm"},{"location":"Functions/New-PAAccount/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/New-PAAccount/#outputs","text":"","title":"Outputs"},{"location":"Functions/New-PAAccount/#poshacmepaaccount","text":"An account object.","title":"PoshACME.PAAccount"},{"location":"Functions/New-PAAccount/#related-links","text":"Get-PAAccount Set-PAAccount","title":"Related Links"},{"location":"Functions/New-PAAuthorization/","text":"New-PAAuthorization \u00b6 Synopsis \u00b6 Create a pre-authorization for an ACME identifier. Syntax \u00b6 New-PAAuthorization [ -Domain ] < String []> [[ -Account ] < Object >] [< CommonParameters >] Description \u00b6 Instead of creating an ACME order object and satisfying the associated authorization challenges on demand, users may choose to pre-authorize one or more identifiers in advance. When a user later creates an order with pre-authorized identifiers, it will be immediately ready to finalize. NOTE: Not all ACME servers support pre-authorization. The authorizations created this way also expire the same way they do when associated directly with an order. Examples \u00b6 Example 1: Auth for Current Account \u00b6 $auth = New-PAAuthorization example . com Create a new authorization for the specified domain using the current account. Example 2: Auths for Specific Account \u00b6 $auths = 'example.com' , 'www.example.com' | New-PAAuthorization -Account ( Get-PAAccount 123 ) Create new authorizations for the specified domains using the specified account. Parameters \u00b6 -Domain \u00b6 One or more ACME identifiers (usually domain names). Type : String[] Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False -Account \u00b6 An existing ACME account object such as the output from Get-PAAccount. If no account is specified, the current account will be used. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . Inputs \u00b6 System.String \u00b6 The domain or IP address identifier to authorize. Outputs \u00b6 PoshACME.PAAuthorization \u00b6 An authorization object. Related Links \u00b6 Get-PAAuthorization New-PAOrder","title":"New-PAAuthorization"},{"location":"Functions/New-PAAuthorization/#new-paauthorization","text":"","title":"New-PAAuthorization"},{"location":"Functions/New-PAAuthorization/#synopsis","text":"Create a pre-authorization for an ACME identifier.","title":"Synopsis"},{"location":"Functions/New-PAAuthorization/#syntax","text":"New-PAAuthorization [ -Domain ] < String []> [[ -Account ] < Object >] [< CommonParameters >]","title":"Syntax"},{"location":"Functions/New-PAAuthorization/#description","text":"Instead of creating an ACME order object and satisfying the associated authorization challenges on demand, users may choose to pre-authorize one or more identifiers in advance. When a user later creates an order with pre-authorized identifiers, it will be immediately ready to finalize. NOTE: Not all ACME servers support pre-authorization. The authorizations created this way also expire the same way they do when associated directly with an order.","title":"Description"},{"location":"Functions/New-PAAuthorization/#examples","text":"","title":"Examples"},{"location":"Functions/New-PAAuthorization/#example-1-auth-for-current-account","text":"$auth = New-PAAuthorization example . com Create a new authorization for the specified domain using the current account.","title":"Example 1: Auth for Current Account"},{"location":"Functions/New-PAAuthorization/#example-2-auths-for-specific-account","text":"$auths = 'example.com' , 'www.example.com' | New-PAAuthorization -Account ( Get-PAAccount 123 ) Create new authorizations for the specified domains using the specified account.","title":"Example 2: Auths for Specific Account"},{"location":"Functions/New-PAAuthorization/#parameters","text":"","title":"Parameters"},{"location":"Functions/New-PAAuthorization/#-domain","text":"One or more ACME identifiers (usually domain names). Type : String[] Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Domain"},{"location":"Functions/New-PAAuthorization/#-account","text":"An existing ACME account object such as the output from Get-PAAccount. If no account is specified, the current account will be used. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Account"},{"location":"Functions/New-PAAuthorization/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/New-PAAuthorization/#inputs","text":"","title":"Inputs"},{"location":"Functions/New-PAAuthorization/#systemstring","text":"The domain or IP address identifier to authorize.","title":"System.String"},{"location":"Functions/New-PAAuthorization/#outputs","text":"","title":"Outputs"},{"location":"Functions/New-PAAuthorization/#poshacmepaauthorization","text":"An authorization object.","title":"PoshACME.PAAuthorization"},{"location":"Functions/New-PAAuthorization/#related-links","text":"Get-PAAuthorization New-PAOrder","title":"Related Links"},{"location":"Functions/New-PACertificate/","text":"New-PACertificate \u00b6 Synopsis \u00b6 Request a new certificate Syntax \u00b6 FromScratch (Default) \u00b6 New-PACertificate [ -Domain ] < String []> [ -Name < String >] [ -Contact < String []>] [ -CertKeyLength < String >] [ -AlwaysNewKey ] [ -AcceptTOS ] [ -AccountKeyLength < String >] [ -DirectoryUrl < String >] [ -Plugin < String []>] [ -PluginArgs < Hashtable >] [ -LifetimeDays < Int32 >] [ -DnsAlias < String []>] [ -OCSPMustStaple ] [ -Subject < String >] [ -FriendlyName < String >] [ -PfxPass < String >] [ -PfxPassSecure < SecureString >] [ -UseModernPfxEncryption ] [ -Install ] [ -UseSerialValidation ] [ -Force ] [ -DnsSleep < Int32 >] [ -ValidationTimeout < Int32 >] [ -PreferredChain < String >] [< CommonParameters >] FromCSR \u00b6 New-PACertificate [ -CSRPath ] < String > [ -Name < String >] [ -Contact < String []>] [ -AcceptTOS ] [ -AccountKeyLength < String >] [ -DirectoryUrl < String >] [ -Plugin < String []>] [ -PluginArgs < Hashtable >] [ -LifetimeDays < Int32 >] [ -DnsAlias < String []>] [ -UseSerialValidation ] [ -Force ] [ -DnsSleep < Int32 >] [ -ValidationTimeout < Int32 >] [ -PreferredChain < String >] [< CommonParameters >] Description \u00b6 This is the primary function for this module and is capable executing the entire ACME certificate request process from start to finish without any prerequisite steps. However, utilizing the module's other functions can enable more complicated workflows and reduce the number of parameters you need to supply to this function. Examples \u00b6 Example 1: Basic Manual Certificate \u00b6 New-PACertificate 'example.com' , 'www.example.com' -AcceptTOS This is the bare minimum necessary to create a certificate for a basic domain (plus the www alt name). It prompts you to add the required DNS TXT record manually. You can omit the -AcceptTOS parameter if you already have an ACME account configured. Example 2: Wildcard Certificate with Contact \u00b6 New-PACertificate '*.example.com' , 'example.com' -Contact 'admin@example.com' Wildcard certificates generally include the non-wildcard root as a SAN because the wildcard doesn't match it. The contact email address is typically used by the CA to send expiration warnings. Example 3: Using a plugin \u00b6 $pArgs = @{ FDToken = ( Read-Host 'FakeDNS API Token' -AsSecureString ) } New-PACertificate 'example.com' -Plugin FakeDNS -PluginArgs $pArgs Plugin parameters are passed as a basic hashtable object. Some parameters may require SecureString or PSCredential objects to protect sensitive API credentials, tokens, and keys. Example 4: Using multiple plugins \u00b6 $pArgs = @{ FDToken = ( Read-Host 'FakeDNS API Token' -AsSecureString ) WSHPort = 8080 } New-PACertificate '*.example.com' , 'example.com' -Plugin FakeDNS , WebSelfHost -PluginArgs $pArgs Each name in a certificate can use a different plugin if necessary. Be sure the specified plugin order matches the order of the names they are associated with. If there are fewer plugins specified than names, the last plugin in the list will be applied to all remaining names. Each plugin's parameters should be combined into the same hashtable object. Example 5: Using a DNS Challenge Alias \u00b6 $pArgs = @{ FDToken = ( Read-Host 'FakeDNS API Token' -AsSecureString ) } New-PACertificate 'example.com' -Plugin FakeDNS -PluginArgs $pArgs -DnsAlias 'acme.example.net' Using DnsAlias tells the plugin to create the required TXT record to an alternate hostname. It requires having added a CNAME record for each name in the cert pointing to the alternate record location. In this case, _acme-challenge.example.com is pointing to acme.example.net . Parameters \u00b6 -Domain \u00b6 One or more domain names to include in this order/certificate. The first one in the list will be considered the \"MainDomain\" and be set as the subject of the finalized certificate. Type : String[] Parameter Sets : FromScratch Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -CSRPath \u00b6 The path to a pre-made certificate request file in PEM (Base64) format. This is useful for appliances that need to generate their own keys and cert requests. Type : String Parameter Sets : FromCSR Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Name \u00b6 The name of the ACME order. This can be useful to distinguish between two orders that have the same MainDomain. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Contact \u00b6 One or more email addresses to associate with this certificate. These addresses will be used by the ACME server to send certificate expiration notifications or other important account notices. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -CertKeyLength \u00b6 The type and size of private key to use for the certificate. For RSA keys, specify a number between 2048-4096 (divisible by 128). For ECC keys, specify either 'ec-256' or 'ec-384'. Defaults to '2048'. Type : String Parameter Sets : FromScratch Aliases : Required : False Position : Named Default value : 2048 Accept pipeline input : False Accept wildcard characters : False -AlwaysNewKey \u00b6 If specified, the order will be configured to always generate a new private key during each renewal. Otherwise, the old key is re-used if it exists. Type : SwitchParameter Parameter Sets : FromScratch Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -AcceptTOS \u00b6 This switch is required when creating a new account as part of a certificate request. It implies you have read and accepted the Terms of Service for the ACME server you are connected to. The first time you connect to an ACME server, a link to the Terms of Service should have been displayed. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -AccountKeyLength \u00b6 The type and size of private key to use for the account associated with this certificate. For RSA keys, specify a number between 2048-4096 (divisible by 128). For ECC keys, specify either 'ec-256' or 'ec-384'. Defaults to 'ec-256'. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : Ec-256 Accept pipeline input : False Accept wildcard characters : False -DirectoryUrl \u00b6 Either the URL to an ACME server's \"directory\" endpoint or one of the supported short names. Currently supported short names include LE_PROD (LetsEncrypt Production), LE_STAGE (LetsEncrypt Staging), BUYPASS_PROD (BuyPass.com Production), BUYPASS_TEST (BuyPass.com Testing), and ZEROSSL_PROD (Zerossl.com Production). Type : String Parameter Sets : (All) Aliases : location Required : False Position : Named Default value : LE_PROD Accept pipeline input : False Accept wildcard characters : False -Plugin \u00b6 One or more validation plugin names to use for this order's challenges. If no plugin is specified, the DNS \"Manual\" plugin will be used. If the same plugin is used for all domains in the order, you can just specify it once. Otherwise, you should specify as many plugin names as there are domains in the order and in the same sequence as the order. Type : String[] Parameter Sets : (All) Aliases : DnsPlugin Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -PluginArgs \u00b6 A hashtable containing the plugin arguments to use with the specified Plugin list. So if a plugin has a -MyText string and -MyNumber integer parameter, you could specify them as @{MyText='text';MyNumber=1234} . Type : Hashtable Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -DnsAlias \u00b6 One or more FQDNs that DNS challenges should be published to instead of the certificate domain's zone. This is used in advanced setups where a CNAME in the certificate domain's zone has been pre-created to point to the alias's FQDN which makes the ACME server check the alias domain when validation challenge TXT records. If the same alias is used for all domains in the order, you can just specify it once. Otherwise, you should specify as many alias FQDNs as there are domains in the order and in the same sequence as the order. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -OCSPMustStaple \u00b6 If specified, the certificate generated for this order will have the OCSP Must-Staple flag set. Type : SwitchParameter Parameter Sets : FromScratch Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Subject \u00b6 Sets the x509 \"Subject\" field in the certificate request that gets sent to the ACME server. By default, it is set to 'CN=FQDN' where 'FQDN' is the first name in the Domain parameter. For public certificate authorities issuing DV certificates, anything other than a DNS name from the list of domains will either be rejected or stripped from the finalized certificate. Type : String Parameter Sets : FromScratch Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -FriendlyName \u00b6 Set a friendly name for the certificate. This will populate the \"Friendly Name\" field in the Windows certificate store when the PFX is imported. Defaults to the first item in the Domain parameter. Type : String Parameter Sets : FromScratch Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -PfxPass \u00b6 Set the export password for generated PFX files. Defaults to 'poshacme'. When the PfxPassSecure parameter is specified, this parameter is ignored. Type : String Parameter Sets : FromScratch Aliases : Required : False Position : Named Default value : Poshacme Accept pipeline input : False Accept wildcard characters : False -PfxPassSecure \u00b6 Set the export password for generated PFX files using a SecureString value. When this parameter is specified, the PfxPass parameter is ignored. Type : SecureString Parameter Sets : FromScratch Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Install \u00b6 If specified, the certificate generated for this order will be imported to the local computer's Personal certificate store. Using this switch requires running the command from an elevated PowerShell session. Type : SwitchParameter Parameter Sets : FromScratch Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -UseSerialValidation \u00b6 If specified, the names in the order will be validated individually rather than all at once. This can significantly increase the time it takes to process validations and should only be used for plugins that require it. The plugin's usage guide should indicate whether it is required. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Force \u00b6 If specified, a new certificate order will always be created regardless of the status of a previous order for the same primary domain. Otherwise, the previous order still in progress will be used instead. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -DnsSleep \u00b6 Number of seconds to wait for DNS changes to propagate before asking the ACME server to validate DNS challenges. Default is 120. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 120 Accept pipeline input : False Accept wildcard characters : False -ValidationTimeout \u00b6 Number of seconds to wait for the ACME server to validate the challenges after asking it to do so. Default is 60. If the timeout is exceeded, an error will be thrown. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 60 Accept pipeline input : False Accept wildcard characters : False -PreferredChain \u00b6 If the CA offers multiple certificate chains, prefer the chain with an issuer matching this Subject Common Name. If no match, the default offered chain will be used. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -LifetimeDays \u00b6 How long in days the certificate should be valid for. NOTE: Many CAs do not support this feature and have fixed lifetime values. Some may ignore the request. Others may throw an error if specified. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -UseModernPfxEncryption \u00b6 If specified, PFX files generated from this order will use AES256 with SHA256 for the private key encryption instead of the default which is RC2-40-CBC. This can affect compatibility with some crypto libraries and tools. Most notably, OpenSSL 3.x requires the newer options to avoid using \"legacy\" mode. But it breaks compatibility with OpenSSL 1.0.x. Type : SwitchParameter Parameter Sets : FromScratch Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . Outputs \u00b6 PoshACME.PACertificate \u00b6 A certificate object. Related Links \u00b6 Submit-Renewal Get-PAPlugin","title":"New-PACertificate"},{"location":"Functions/New-PACertificate/#new-pacertificate","text":"","title":"New-PACertificate"},{"location":"Functions/New-PACertificate/#synopsis","text":"Request a new certificate","title":"Synopsis"},{"location":"Functions/New-PACertificate/#syntax","text":"","title":"Syntax"},{"location":"Functions/New-PACertificate/#fromscratch-default","text":"New-PACertificate [ -Domain ] < String []> [ -Name < String >] [ -Contact < String []>] [ -CertKeyLength < String >] [ -AlwaysNewKey ] [ -AcceptTOS ] [ -AccountKeyLength < String >] [ -DirectoryUrl < String >] [ -Plugin < String []>] [ -PluginArgs < Hashtable >] [ -LifetimeDays < Int32 >] [ -DnsAlias < String []>] [ -OCSPMustStaple ] [ -Subject < String >] [ -FriendlyName < String >] [ -PfxPass < String >] [ -PfxPassSecure < SecureString >] [ -UseModernPfxEncryption ] [ -Install ] [ -UseSerialValidation ] [ -Force ] [ -DnsSleep < Int32 >] [ -ValidationTimeout < Int32 >] [ -PreferredChain < String >] [< CommonParameters >]","title":"FromScratch (Default)"},{"location":"Functions/New-PACertificate/#fromcsr","text":"New-PACertificate [ -CSRPath ] < String > [ -Name < String >] [ -Contact < String []>] [ -AcceptTOS ] [ -AccountKeyLength < String >] [ -DirectoryUrl < String >] [ -Plugin < String []>] [ -PluginArgs < Hashtable >] [ -LifetimeDays < Int32 >] [ -DnsAlias < String []>] [ -UseSerialValidation ] [ -Force ] [ -DnsSleep < Int32 >] [ -ValidationTimeout < Int32 >] [ -PreferredChain < String >] [< CommonParameters >]","title":"FromCSR"},{"location":"Functions/New-PACertificate/#description","text":"This is the primary function for this module and is capable executing the entire ACME certificate request process from start to finish without any prerequisite steps. However, utilizing the module's other functions can enable more complicated workflows and reduce the number of parameters you need to supply to this function.","title":"Description"},{"location":"Functions/New-PACertificate/#examples","text":"","title":"Examples"},{"location":"Functions/New-PACertificate/#example-1-basic-manual-certificate","text":"New-PACertificate 'example.com' , 'www.example.com' -AcceptTOS This is the bare minimum necessary to create a certificate for a basic domain (plus the www alt name). It prompts you to add the required DNS TXT record manually. You can omit the -AcceptTOS parameter if you already have an ACME account configured.","title":"Example 1: Basic Manual Certificate"},{"location":"Functions/New-PACertificate/#example-2-wildcard-certificate-with-contact","text":"New-PACertificate '*.example.com' , 'example.com' -Contact 'admin@example.com' Wildcard certificates generally include the non-wildcard root as a SAN because the wildcard doesn't match it. The contact email address is typically used by the CA to send expiration warnings.","title":"Example 2: Wildcard Certificate with Contact"},{"location":"Functions/New-PACertificate/#example-3-using-a-plugin","text":"$pArgs = @{ FDToken = ( Read-Host 'FakeDNS API Token' -AsSecureString ) } New-PACertificate 'example.com' -Plugin FakeDNS -PluginArgs $pArgs Plugin parameters are passed as a basic hashtable object. Some parameters may require SecureString or PSCredential objects to protect sensitive API credentials, tokens, and keys.","title":"Example 3: Using a plugin"},{"location":"Functions/New-PACertificate/#example-4-using-multiple-plugins","text":"$pArgs = @{ FDToken = ( Read-Host 'FakeDNS API Token' -AsSecureString ) WSHPort = 8080 } New-PACertificate '*.example.com' , 'example.com' -Plugin FakeDNS , WebSelfHost -PluginArgs $pArgs Each name in a certificate can use a different plugin if necessary. Be sure the specified plugin order matches the order of the names they are associated with. If there are fewer plugins specified than names, the last plugin in the list will be applied to all remaining names. Each plugin's parameters should be combined into the same hashtable object.","title":"Example 4: Using multiple plugins"},{"location":"Functions/New-PACertificate/#example-5-using-a-dns-challenge-alias","text":"$pArgs = @{ FDToken = ( Read-Host 'FakeDNS API Token' -AsSecureString ) } New-PACertificate 'example.com' -Plugin FakeDNS -PluginArgs $pArgs -DnsAlias 'acme.example.net' Using DnsAlias tells the plugin to create the required TXT record to an alternate hostname. It requires having added a CNAME record for each name in the cert pointing to the alternate record location. In this case, _acme-challenge.example.com is pointing to acme.example.net .","title":"Example 5: Using a DNS Challenge Alias"},{"location":"Functions/New-PACertificate/#parameters","text":"","title":"Parameters"},{"location":"Functions/New-PACertificate/#-domain","text":"One or more domain names to include in this order/certificate. The first one in the list will be considered the \"MainDomain\" and be set as the subject of the finalized certificate. Type : String[] Parameter Sets : FromScratch Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Domain"},{"location":"Functions/New-PACertificate/#-csrpath","text":"The path to a pre-made certificate request file in PEM (Base64) format. This is useful for appliances that need to generate their own keys and cert requests. Type : String Parameter Sets : FromCSR Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-CSRPath"},{"location":"Functions/New-PACertificate/#-name","text":"The name of the ACME order. This can be useful to distinguish between two orders that have the same MainDomain. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/New-PACertificate/#-contact","text":"One or more email addresses to associate with this certificate. These addresses will be used by the ACME server to send certificate expiration notifications or other important account notices. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Contact"},{"location":"Functions/New-PACertificate/#-certkeylength","text":"The type and size of private key to use for the certificate. For RSA keys, specify a number between 2048-4096 (divisible by 128). For ECC keys, specify either 'ec-256' or 'ec-384'. Defaults to '2048'. Type : String Parameter Sets : FromScratch Aliases : Required : False Position : Named Default value : 2048 Accept pipeline input : False Accept wildcard characters : False","title":"-CertKeyLength"},{"location":"Functions/New-PACertificate/#-alwaysnewkey","text":"If specified, the order will be configured to always generate a new private key during each renewal. Otherwise, the old key is re-used if it exists. Type : SwitchParameter Parameter Sets : FromScratch Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-AlwaysNewKey"},{"location":"Functions/New-PACertificate/#-accepttos","text":"This switch is required when creating a new account as part of a certificate request. It implies you have read and accepted the Terms of Service for the ACME server you are connected to. The first time you connect to an ACME server, a link to the Terms of Service should have been displayed. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-AcceptTOS"},{"location":"Functions/New-PACertificate/#-accountkeylength","text":"The type and size of private key to use for the account associated with this certificate. For RSA keys, specify a number between 2048-4096 (divisible by 128). For ECC keys, specify either 'ec-256' or 'ec-384'. Defaults to 'ec-256'. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : Ec-256 Accept pipeline input : False Accept wildcard characters : False","title":"-AccountKeyLength"},{"location":"Functions/New-PACertificate/#-directoryurl","text":"Either the URL to an ACME server's \"directory\" endpoint or one of the supported short names. Currently supported short names include LE_PROD (LetsEncrypt Production), LE_STAGE (LetsEncrypt Staging), BUYPASS_PROD (BuyPass.com Production), BUYPASS_TEST (BuyPass.com Testing), and ZEROSSL_PROD (Zerossl.com Production). Type : String Parameter Sets : (All) Aliases : location Required : False Position : Named Default value : LE_PROD Accept pipeline input : False Accept wildcard characters : False","title":"-DirectoryUrl"},{"location":"Functions/New-PACertificate/#-plugin","text":"One or more validation plugin names to use for this order's challenges. If no plugin is specified, the DNS \"Manual\" plugin will be used. If the same plugin is used for all domains in the order, you can just specify it once. Otherwise, you should specify as many plugin names as there are domains in the order and in the same sequence as the order. Type : String[] Parameter Sets : (All) Aliases : DnsPlugin Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Plugin"},{"location":"Functions/New-PACertificate/#-pluginargs","text":"A hashtable containing the plugin arguments to use with the specified Plugin list. So if a plugin has a -MyText string and -MyNumber integer parameter, you could specify them as @{MyText='text';MyNumber=1234} . Type : Hashtable Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-PluginArgs"},{"location":"Functions/New-PACertificate/#-dnsalias","text":"One or more FQDNs that DNS challenges should be published to instead of the certificate domain's zone. This is used in advanced setups where a CNAME in the certificate domain's zone has been pre-created to point to the alias's FQDN which makes the ACME server check the alias domain when validation challenge TXT records. If the same alias is used for all domains in the order, you can just specify it once. Otherwise, you should specify as many alias FQDNs as there are domains in the order and in the same sequence as the order. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-DnsAlias"},{"location":"Functions/New-PACertificate/#-ocspmuststaple","text":"If specified, the certificate generated for this order will have the OCSP Must-Staple flag set. Type : SwitchParameter Parameter Sets : FromScratch Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-OCSPMustStaple"},{"location":"Functions/New-PACertificate/#-subject","text":"Sets the x509 \"Subject\" field in the certificate request that gets sent to the ACME server. By default, it is set to 'CN=FQDN' where 'FQDN' is the first name in the Domain parameter. For public certificate authorities issuing DV certificates, anything other than a DNS name from the list of domains will either be rejected or stripped from the finalized certificate. Type : String Parameter Sets : FromScratch Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Subject"},{"location":"Functions/New-PACertificate/#-friendlyname","text":"Set a friendly name for the certificate. This will populate the \"Friendly Name\" field in the Windows certificate store when the PFX is imported. Defaults to the first item in the Domain parameter. Type : String Parameter Sets : FromScratch Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-FriendlyName"},{"location":"Functions/New-PACertificate/#-pfxpass","text":"Set the export password for generated PFX files. Defaults to 'poshacme'. When the PfxPassSecure parameter is specified, this parameter is ignored. Type : String Parameter Sets : FromScratch Aliases : Required : False Position : Named Default value : Poshacme Accept pipeline input : False Accept wildcard characters : False","title":"-PfxPass"},{"location":"Functions/New-PACertificate/#-pfxpasssecure","text":"Set the export password for generated PFX files using a SecureString value. When this parameter is specified, the PfxPass parameter is ignored. Type : SecureString Parameter Sets : FromScratch Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-PfxPassSecure"},{"location":"Functions/New-PACertificate/#-install","text":"If specified, the certificate generated for this order will be imported to the local computer's Personal certificate store. Using this switch requires running the command from an elevated PowerShell session. Type : SwitchParameter Parameter Sets : FromScratch Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Install"},{"location":"Functions/New-PACertificate/#-useserialvalidation","text":"If specified, the names in the order will be validated individually rather than all at once. This can significantly increase the time it takes to process validations and should only be used for plugins that require it. The plugin's usage guide should indicate whether it is required. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-UseSerialValidation"},{"location":"Functions/New-PACertificate/#-force","text":"If specified, a new certificate order will always be created regardless of the status of a previous order for the same primary domain. Otherwise, the previous order still in progress will be used instead. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Force"},{"location":"Functions/New-PACertificate/#-dnssleep","text":"Number of seconds to wait for DNS changes to propagate before asking the ACME server to validate DNS challenges. Default is 120. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 120 Accept pipeline input : False Accept wildcard characters : False","title":"-DnsSleep"},{"location":"Functions/New-PACertificate/#-validationtimeout","text":"Number of seconds to wait for the ACME server to validate the challenges after asking it to do so. Default is 60. If the timeout is exceeded, an error will be thrown. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 60 Accept pipeline input : False Accept wildcard characters : False","title":"-ValidationTimeout"},{"location":"Functions/New-PACertificate/#-preferredchain","text":"If the CA offers multiple certificate chains, prefer the chain with an issuer matching this Subject Common Name. If no match, the default offered chain will be used. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-PreferredChain"},{"location":"Functions/New-PACertificate/#-lifetimedays","text":"How long in days the certificate should be valid for. NOTE: Many CAs do not support this feature and have fixed lifetime values. Some may ignore the request. Others may throw an error if specified. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-LifetimeDays"},{"location":"Functions/New-PACertificate/#-usemodernpfxencryption","text":"If specified, PFX files generated from this order will use AES256 with SHA256 for the private key encryption instead of the default which is RC2-40-CBC. This can affect compatibility with some crypto libraries and tools. Most notably, OpenSSL 3.x requires the newer options to avoid using \"legacy\" mode. But it breaks compatibility with OpenSSL 1.0.x. Type : SwitchParameter Parameter Sets : FromScratch Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-UseModernPfxEncryption"},{"location":"Functions/New-PACertificate/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/New-PACertificate/#outputs","text":"","title":"Outputs"},{"location":"Functions/New-PACertificate/#poshacmepacertificate","text":"A certificate object.","title":"PoshACME.PACertificate"},{"location":"Functions/New-PACertificate/#related-links","text":"Submit-Renewal Get-PAPlugin","title":"Related Links"},{"location":"Functions/New-PAOrder/","text":"New-PAOrder \u00b6 Synopsis \u00b6 Create a new order on the current ACME account. Syntax \u00b6 FromScratch (Default) \u00b6 New-PAOrder [ -Domain ] < String []> [[ -KeyLength ] < String >] [ -Name < String >] [ -Plugin < String []>] [ -PluginArgs < Hashtable >] [ -LifetimeDays < Int32 >] [ -DnsAlias < String []>] [ -OCSPMustStaple ] [ -AlwaysNewKey ] [ -Subject < String >] [ -FriendlyName < String >] [ -PfxPass < String >] [ -PfxPassSecure < SecureString >] [ -UseModernPfxEncryption ] [ -Install ] [ -UseSerialValidation ] [ -DnsSleep < Int32 >] [ -ValidationTimeout < Int32 >] [ -PreferredChain < String >] [ -Force ] [ -WhatIf ] [ -Confirm ] [< CommonParameters >] ImportKey \u00b6 New-PAOrder [ -Domain ] < String []> -KeyFile < String > [ -Name < String >] [ -Plugin < String []>] [ -PluginArgs < Hashtable >] [ -LifetimeDays < Int32 >] [ -DnsAlias < String []>] [ -OCSPMustStaple ] [ -AlwaysNewKey ] [ -Subject < String >] [ -FriendlyName < String >] [ -PfxPass < String >] [ -PfxPassSecure < SecureString >] [ -UseModernPfxEncryption ] [ -Install ] [ -UseSerialValidation ] [ -DnsSleep < Int32 >] [ -ValidationTimeout < Int32 >] [ -PreferredChain < String >] [ -Force ] [ -WhatIf ] [ -Confirm ] [< CommonParameters >] FromCSR \u00b6 New-PAOrder [ -CSRPath ] < String > [ -Name < String >] [ -Plugin < String []>] [ -PluginArgs < Hashtable >] [ -LifetimeDays < Int32 >] [ -DnsAlias < String []>] [ -UseSerialValidation ] [ -DnsSleep < Int32 >] [ -ValidationTimeout < Int32 >] [ -PreferredChain < String >] [ -Force ] [ -WhatIf ] [ -Confirm ] [< CommonParameters >] Description \u00b6 Creating an ACME order is the first step of the certificate request process. To create a SAN certificate with multiple names, include them all in an array for the -Domain parameter. The first name in the list will be considered the \"MainDomain\" and will also be in the certificate subject field. Different CAs have different policies regarding the number of SANs a certificate may have. Be aware that new orders that share the same MainDomain as a previous order will overwrite the previous order unless the Name paraemter is specified and there are no other order matches for that name. Examples \u00b6 Example 1: Single Domain Order \u00b6 New-PAOrder example . com Create a new order for the specified domain using the default key length. Example 2: Multi-Domain with Plugin \u00b6 $pArgs = @{ FDToken = ( Read-Host 'FakeDNS API Token' -AsSecureString ) } $domains = 'example.com' , 'www.example.com' , 'blog.example.com' New-PAOrder -Domain $domains -Plugin FakeDNS -PluginArgs $pArgs Create a new SAN order for the specified domains and specify plugin details. Example 3: ECDSA Private Key \u00b6 New-PAOrder example . com -KeyLength 'ec-256' Create a new order for the specified domain using an ECDSA P-256 private key. Example 4: Pre-generated Private Key \u00b6 New-PAOrder example . com -KeyFile .\\ mykey . key Create a new order using an externally generated private key. Example 5: External Cert Request \u00b6 New-PAOrder -CSRPath .\\ myreq . csr Create a new order using an externally generated certificate request. Parameters \u00b6 -Domain \u00b6 One or more domain names to include in this order/certificate. The first one in the list will be considered the \"MainDomain\" and be set as the subject of the finalized certificate. Type : String[] Parameter Sets : FromScratch, ImportKey Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -CSRPath \u00b6 The path to a pre-made certificate request file in PEM (Base64) format. This is useful for appliances that need to generate their own keys and cert requests. Type : String Parameter Sets : FromCSR Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -KeyLength \u00b6 The type and size of private key to use. For RSA keys, specify a number between 2048-4096 (divisible by 128). For ECC keys, specify either 'ec-256' or 'ec-384'. Defaults to '2048'. Type : String Parameter Sets : FromScratch Aliases : Required : False Position : 2 Default value : 2048 Accept pipeline input : False Accept wildcard characters : False -KeyFile \u00b6 The path to an existing EC or RSA private key file. This will attempt to create the order using the specified key as the certificate's private key. Type : String Parameter Sets : ImportKey Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Name \u00b6 The name of the ACME order. This can be useful to distinguish between two orders that have the same MainDomain. If not specified, defaults to the first domain in the order. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Plugin \u00b6 One or more validation plugin names to use for this order's challenges. If no plugin is specified, the DNS \"Manual\" plugin will be used. If the same plugin is used for all domains in the order, you can just specify it once. Otherwise, you should specify as many plugin names as there are domains in the order and in the same sequence as the order. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -PluginArgs \u00b6 A hashtable containing the plugin arguments to use with the specified Plugin list. So if a plugin has a -MyText string and -MyNumber integer parameter, you could specify them as @{MyText='text';MyNumber=1234} . Type : Hashtable Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -DnsAlias \u00b6 One or more FQDNs that DNS challenges should be published to instead of the certificate domain's zone. This is used in advanced setups where a CNAME in the certificate domain's zone has been pre-created to point to the alias's FQDN which makes the ACME server check the alias domain when validation challenge TXT records. If the same alias is used for all domains in the order, you can just specify it once. Otherwise, you should specify as many alias FQDNs as there are domains in the order and in the same sequence as the order. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -OCSPMustStaple \u00b6 If specified, the certificate generated for this order will have the OCSP Must-Staple flag set. Type : SwitchParameter Parameter Sets : FromScratch, ImportKey Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -AlwaysNewKey \u00b6 If specified, the order will be configured to always generate a new private key during each renewal. Otherwise, the old key is re-used if it exists. Type : SwitchParameter Parameter Sets : FromScratch, ImportKey Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Subject \u00b6 Sets the x509 \"Subject\" field in the certificate request that gets sent to the ACME server. By default, it is set to 'CN=FQDN' where 'FQDN' is the first name in the Domain parameter. For public certificate authorities issuing DV certificates, anything other than a DNS name from the list of domains will either be rejected or stripped from the finalized certificate. Type : String Parameter Sets : FromScratch, ImportKey Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -FriendlyName \u00b6 Set a friendly name for the certificate. This will populate the \"Friendly Name\" field in the Windows certificate store when the PFX is imported. Defaults to the first item in the Domain parameter. Type : String Parameter Sets : FromScratch, ImportKey Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -PfxPass \u00b6 Set the export password for generated PFX files. Defaults to 'poshacme'. When the PfxPassSecure parameter is specified, this parameter is ignored. Type : String Parameter Sets : FromScratch, ImportKey Aliases : Required : False Position : Named Default value : Poshacme Accept pipeline input : False Accept wildcard characters : False -PfxPassSecure \u00b6 Set the export password for generated PFX files using a SecureString value. When this parameter is specified, the PfxPass parameter is ignored. Type : SecureString Parameter Sets : FromScratch, ImportKey Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Install \u00b6 If specified, the certificate generated for this order will be imported to the local computer's Personal certificate store. Type : SwitchParameter Parameter Sets : FromScratch, ImportKey Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -UseSerialValidation \u00b6 If specified, the names in the order will be validated individually rather than all at once. This can significantly increase the time it takes to process validations and should only be used for plugins that require it. The plugin's usage guide should indicate whether it is required. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -DnsSleep \u00b6 Number of seconds to wait for DNS changes to propagate before asking the ACME server to validate DNS challenges. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 120 Accept pipeline input : False Accept wildcard characters : False -ValidationTimeout \u00b6 Number of seconds to wait for the ACME server to validate the challenges after asking it to do so. If the timeout is exceeded, an error will be thrown. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 60 Accept pipeline input : False Accept wildcard characters : False -PreferredChain \u00b6 If the CA offers multiple certificate chains, prefer the chain with an issuer matching this Subject Common Name. If no match, the default offered chain will be used. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Force \u00b6 If specified, confirmation prompts that may have been generated will be skipped. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -WhatIf \u00b6 Shows what would happen if the cmdlet runs. The cmdlet is not run. Type : SwitchParameter Parameter Sets : (All) Aliases : wi Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Confirm \u00b6 Prompts you for confirmation before running the cmdlet. Type : SwitchParameter Parameter Sets : (All) Aliases : cf Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -LifetimeDays \u00b6 How long in days the certificate should be valid for. NOTE: Many CAs do not support this feature and have fixed lifetime values. Some may ignore the request. Others may throw an error if specified. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -UseModernPfxEncryption \u00b6 If specified, PFX files generated from this order will use AES256 with SHA256 for the private key encryption instead of the default which is RC2-40-CBC. This can affect compatibility with some crypto libraries and tools. Most notably, OpenSSL 3.x requires the newer options to avoid using \"legacy\" mode. But it breaks compatibility with OpenSSL 1.0.x. Type : SwitchParameter Parameter Sets : FromScratch, ImportKey Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . Outputs \u00b6 PoshACME.PAOrder \u00b6 An order object. Related Links \u00b6 Get-PAOrder Set-PAOrder","title":"New-PAOrder"},{"location":"Functions/New-PAOrder/#new-paorder","text":"","title":"New-PAOrder"},{"location":"Functions/New-PAOrder/#synopsis","text":"Create a new order on the current ACME account.","title":"Synopsis"},{"location":"Functions/New-PAOrder/#syntax","text":"","title":"Syntax"},{"location":"Functions/New-PAOrder/#fromscratch-default","text":"New-PAOrder [ -Domain ] < String []> [[ -KeyLength ] < String >] [ -Name < String >] [ -Plugin < String []>] [ -PluginArgs < Hashtable >] [ -LifetimeDays < Int32 >] [ -DnsAlias < String []>] [ -OCSPMustStaple ] [ -AlwaysNewKey ] [ -Subject < String >] [ -FriendlyName < String >] [ -PfxPass < String >] [ -PfxPassSecure < SecureString >] [ -UseModernPfxEncryption ] [ -Install ] [ -UseSerialValidation ] [ -DnsSleep < Int32 >] [ -ValidationTimeout < Int32 >] [ -PreferredChain < String >] [ -Force ] [ -WhatIf ] [ -Confirm ] [< CommonParameters >]","title":"FromScratch (Default)"},{"location":"Functions/New-PAOrder/#importkey","text":"New-PAOrder [ -Domain ] < String []> -KeyFile < String > [ -Name < String >] [ -Plugin < String []>] [ -PluginArgs < Hashtable >] [ -LifetimeDays < Int32 >] [ -DnsAlias < String []>] [ -OCSPMustStaple ] [ -AlwaysNewKey ] [ -Subject < String >] [ -FriendlyName < String >] [ -PfxPass < String >] [ -PfxPassSecure < SecureString >] [ -UseModernPfxEncryption ] [ -Install ] [ -UseSerialValidation ] [ -DnsSleep < Int32 >] [ -ValidationTimeout < Int32 >] [ -PreferredChain < String >] [ -Force ] [ -WhatIf ] [ -Confirm ] [< CommonParameters >]","title":"ImportKey"},{"location":"Functions/New-PAOrder/#fromcsr","text":"New-PAOrder [ -CSRPath ] < String > [ -Name < String >] [ -Plugin < String []>] [ -PluginArgs < Hashtable >] [ -LifetimeDays < Int32 >] [ -DnsAlias < String []>] [ -UseSerialValidation ] [ -DnsSleep < Int32 >] [ -ValidationTimeout < Int32 >] [ -PreferredChain < String >] [ -Force ] [ -WhatIf ] [ -Confirm ] [< CommonParameters >]","title":"FromCSR"},{"location":"Functions/New-PAOrder/#description","text":"Creating an ACME order is the first step of the certificate request process. To create a SAN certificate with multiple names, include them all in an array for the -Domain parameter. The first name in the list will be considered the \"MainDomain\" and will also be in the certificate subject field. Different CAs have different policies regarding the number of SANs a certificate may have. Be aware that new orders that share the same MainDomain as a previous order will overwrite the previous order unless the Name paraemter is specified and there are no other order matches for that name.","title":"Description"},{"location":"Functions/New-PAOrder/#examples","text":"","title":"Examples"},{"location":"Functions/New-PAOrder/#example-1-single-domain-order","text":"New-PAOrder example . com Create a new order for the specified domain using the default key length.","title":"Example 1: Single Domain Order"},{"location":"Functions/New-PAOrder/#example-2-multi-domain-with-plugin","text":"$pArgs = @{ FDToken = ( Read-Host 'FakeDNS API Token' -AsSecureString ) } $domains = 'example.com' , 'www.example.com' , 'blog.example.com' New-PAOrder -Domain $domains -Plugin FakeDNS -PluginArgs $pArgs Create a new SAN order for the specified domains and specify plugin details.","title":"Example 2: Multi-Domain with Plugin"},{"location":"Functions/New-PAOrder/#example-3-ecdsa-private-key","text":"New-PAOrder example . com -KeyLength 'ec-256' Create a new order for the specified domain using an ECDSA P-256 private key.","title":"Example 3: ECDSA Private Key"},{"location":"Functions/New-PAOrder/#example-4-pre-generated-private-key","text":"New-PAOrder example . com -KeyFile .\\ mykey . key Create a new order using an externally generated private key.","title":"Example 4: Pre-generated Private Key"},{"location":"Functions/New-PAOrder/#example-5-external-cert-request","text":"New-PAOrder -CSRPath .\\ myreq . csr Create a new order using an externally generated certificate request.","title":"Example 5: External Cert Request"},{"location":"Functions/New-PAOrder/#parameters","text":"","title":"Parameters"},{"location":"Functions/New-PAOrder/#-domain","text":"One or more domain names to include in this order/certificate. The first one in the list will be considered the \"MainDomain\" and be set as the subject of the finalized certificate. Type : String[] Parameter Sets : FromScratch, ImportKey Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Domain"},{"location":"Functions/New-PAOrder/#-csrpath","text":"The path to a pre-made certificate request file in PEM (Base64) format. This is useful for appliances that need to generate their own keys and cert requests. Type : String Parameter Sets : FromCSR Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-CSRPath"},{"location":"Functions/New-PAOrder/#-keylength","text":"The type and size of private key to use. For RSA keys, specify a number between 2048-4096 (divisible by 128). For ECC keys, specify either 'ec-256' or 'ec-384'. Defaults to '2048'. Type : String Parameter Sets : FromScratch Aliases : Required : False Position : 2 Default value : 2048 Accept pipeline input : False Accept wildcard characters : False","title":"-KeyLength"},{"location":"Functions/New-PAOrder/#-keyfile","text":"The path to an existing EC or RSA private key file. This will attempt to create the order using the specified key as the certificate's private key. Type : String Parameter Sets : ImportKey Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-KeyFile"},{"location":"Functions/New-PAOrder/#-name","text":"The name of the ACME order. This can be useful to distinguish between two orders that have the same MainDomain. If not specified, defaults to the first domain in the order. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Name"},{"location":"Functions/New-PAOrder/#-plugin","text":"One or more validation plugin names to use for this order's challenges. If no plugin is specified, the DNS \"Manual\" plugin will be used. If the same plugin is used for all domains in the order, you can just specify it once. Otherwise, you should specify as many plugin names as there are domains in the order and in the same sequence as the order. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Plugin"},{"location":"Functions/New-PAOrder/#-pluginargs","text":"A hashtable containing the plugin arguments to use with the specified Plugin list. So if a plugin has a -MyText string and -MyNumber integer parameter, you could specify them as @{MyText='text';MyNumber=1234} . Type : Hashtable Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-PluginArgs"},{"location":"Functions/New-PAOrder/#-dnsalias","text":"One or more FQDNs that DNS challenges should be published to instead of the certificate domain's zone. This is used in advanced setups where a CNAME in the certificate domain's zone has been pre-created to point to the alias's FQDN which makes the ACME server check the alias domain when validation challenge TXT records. If the same alias is used for all domains in the order, you can just specify it once. Otherwise, you should specify as many alias FQDNs as there are domains in the order and in the same sequence as the order. Type : String[] Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-DnsAlias"},{"location":"Functions/New-PAOrder/#-ocspmuststaple","text":"If specified, the certificate generated for this order will have the OCSP Must-Staple flag set. Type : SwitchParameter Parameter Sets : FromScratch, ImportKey Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-OCSPMustStaple"},{"location":"Functions/New-PAOrder/#-alwaysnewkey","text":"If specified, the order will be configured to always generate a new private key during each renewal. Otherwise, the old key is re-used if it exists. Type : SwitchParameter Parameter Sets : FromScratch, ImportKey Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-AlwaysNewKey"},{"location":"Functions/New-PAOrder/#-subject","text":"Sets the x509 \"Subject\" field in the certificate request that gets sent to the ACME server. By default, it is set to 'CN=FQDN' where 'FQDN' is the first name in the Domain parameter. For public certificate authorities issuing DV certificates, anything other than a DNS name from the list of domains will either be rejected or stripped from the finalized certificate. Type : String Parameter Sets : FromScratch, ImportKey Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Subject"},{"location":"Functions/New-PAOrder/#-friendlyname","text":"Set a friendly name for the certificate. This will populate the \"Friendly Name\" field in the Windows certificate store when the PFX is imported. Defaults to the first item in the Domain parameter. Type : String Parameter Sets : FromScratch, ImportKey Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-FriendlyName"},{"location":"Functions/New-PAOrder/#-pfxpass","text":"Set the export password for generated PFX files. Defaults to 'poshacme'. When the PfxPassSecure parameter is specified, this parameter is ignored. Type : String Parameter Sets : FromScratch, ImportKey Aliases : Required : False Position : Named Default value : Poshacme Accept pipeline input : False Accept wildcard characters : False","title":"-PfxPass"},{"location":"Functions/New-PAOrder/#-pfxpasssecure","text":"Set the export password for generated PFX files using a SecureString value. When this parameter is specified, the PfxPass parameter is ignored. Type : SecureString Parameter Sets : FromScratch, ImportKey Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-PfxPassSecure"},{"location":"Functions/New-PAOrder/#-install","text":"If specified, the certificate generated for this order will be imported to the local computer's Personal certificate store. Type : SwitchParameter Parameter Sets : FromScratch, ImportKey Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Install"},{"location":"Functions/New-PAOrder/#-useserialvalidation","text":"If specified, the names in the order will be validated individually rather than all at once. This can significantly increase the time it takes to process validations and should only be used for plugins that require it. The plugin's usage guide should indicate whether it is required. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-UseSerialValidation"},{"location":"Functions/New-PAOrder/#-dnssleep","text":"Number of seconds to wait for DNS changes to propagate before asking the ACME server to validate DNS challenges. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 120 Accept pipeline input : False Accept wildcard characters : False","title":"-DnsSleep"},{"location":"Functions/New-PAOrder/#-validationtimeout","text":"Number of seconds to wait for the ACME server to validate the challenges after asking it to do so. If the timeout is exceeded, an error will be thrown. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : 60 Accept pipeline input : False Accept wildcard characters : False","title":"-ValidationTimeout"},{"location":"Functions/New-PAOrder/#-preferredchain","text":"If the CA offers multiple certificate chains, prefer the chain with an issuer matching this Subject Common Name. If no match, the default offered chain will be used. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-PreferredChain"},{"location":"Functions/New-PAOrder/#-force","text":"If specified, confirmation prompts that may have been generated will be skipped. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Force"},{"location":"Functions/New-PAOrder/#-whatif","text":"Shows what would happen if the cmdlet runs. The cmdlet is not run. Type : SwitchParameter Parameter Sets : (All) Aliases : wi Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-WhatIf"},{"location":"Functions/New-PAOrder/#-confirm","text":"Prompts you for confirmation before running the cmdlet. Type : SwitchParameter Parameter Sets : (All) Aliases : cf Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Confirm"},{"location":"Functions/New-PAOrder/#-lifetimedays","text":"How long in days the certificate should be valid for. NOTE: Many CAs do not support this feature and have fixed lifetime values. Some may ignore the request. Others may throw an error if specified. Type : Int32 Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-LifetimeDays"},{"location":"Functions/New-PAOrder/#-usemodernpfxencryption","text":"If specified, PFX files generated from this order will use AES256 with SHA256 for the private key encryption instead of the default which is RC2-40-CBC. This can affect compatibility with some crypto libraries and tools. Most notably, OpenSSL 3.x requires the newer options to avoid using \"legacy\" mode. But it breaks compatibility with OpenSSL 1.0.x. Type : SwitchParameter Parameter Sets : FromScratch, ImportKey Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-UseModernPfxEncryption"},{"location":"Functions/New-PAOrder/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/New-PAOrder/#outputs","text":"","title":"Outputs"},{"location":"Functions/New-PAOrder/#poshacmepaorder","text":"An order object.","title":"PoshACME.PAOrder"},{"location":"Functions/New-PAOrder/#related-links","text":"Get-PAOrder Set-PAOrder","title":"Related Links"},{"location":"Functions/Publish-Challenge/","text":"Publish-Challenge \u00b6 Synopsis \u00b6 Publish a challenge using the specified plugin. Syntax \u00b6 Publish-Challenge [ -Domain ] < String > [ -Account ] < Object > [ -Token ] < String > [ -Plugin ] < String > [[ -PluginArgs ] < Hashtable >] [ -DnsAlias < String >] [< CommonParameters >] Description \u00b6 Based on the type of validation plugin specified, this function will publish either a DNS TXT record or an HTTP challenge file for the given domain and token value that satisfies the dns-01 or http-01 challenge specification. Depending on the plugin, calling Save-Challenge may be required to commit changes made by Publish-Challenge . If multiple challenges are being published, make all Publish-Challenge calls first. Then, Save-Challenge once to commit them all. Examples \u00b6 Example 1: Publish a Challenge \u00b6 $splat = @{ Domain = 'example.com' Account = ( Get-PAAccount ) Token = 'fake-token' Plugin = 'FakeDNS' PluginArgs = @{ FDToken = ( Read-Host 'FakeDNS API Token' -AsSecureString ) } } Publish-Challenge @splat # if plugin requires saving Save-Challenge -Plugin $splat . Plugin -PluginArgs $splat . PluginArgs Publish a single DNS challenge. Example 2: DNS Order Challenges \u00b6 $splat = @{ Account = ( Get-PAAccount ) Plugin = 'FakeDNS' PluginArgs = @{ FDToken = ( Read-Host 'FakeDNS API Token' -AsSecureString ) } } Get-PAOrder | Get-PAAuthorization | ForEach -Object { Publish-Challenge -Domain $_ . DNSId -Token $_ . DNS01Token @splat } # if plugin requires saving Save-Challenge -Plugin $splat . Plugin -PluginArgs $splat . PluginArgs Publish DNS challenges for all authorizations in the current order. Example 3: HTTP Order Challenges \u00b6 $splat = @{ Account = ( Get-PAAccount ) Plugin = 'WebSelfHost' PluginArgs = @{} } Get-PAOrder | Get-PAAuthorization | ForEach -Object { Publish-Challenge -Domain $_ . DNSId -Token $_ . HTTP01Token @splat } # if plugin requires saving Save-Challenge -Plugin $splat . Plugin -PluginArgs $splat . PluginArgs Publish HTTP challenges for all authorizations in the current order. Parameters \u00b6 -Domain \u00b6 The domain name that the challenge will be published for. Wildcard domains should have the \"*.\" removed and can only be used with DNS based validation plugins. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Account \u00b6 The account object associated with the order that requires the challenge. Type : Object Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Token \u00b6 The token value from the appropriate challenge in an authorization object that matches the plugin type. Type : String Parameter Sets : (All) Aliases : Required : True Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False -Plugin \u00b6 The name of the validation plugin to use. Use Get-PAPlugin to display a list of available plugins. Type : String Parameter Sets : (All) Aliases : Required : True Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False -PluginArgs \u00b6 A hashtable containing the plugin arguments to use with the specified plugin. So if a plugin has a -MyText string and -MyNumber integer parameter, you could specify them as @{MyText='text';MyNumber=1234} . Type : Hashtable Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : None Accept pipeline input : False Accept wildcard characters : False -DnsAlias \u00b6 When using DNS Alias support with DNS validation plugins, the alias domain that the TXT record will be written to. This should be the complete FQDN including the _acme-challenge. prefix if necessary. This field is ignored for non-DNS validation plugins. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . Related Links \u00b6 Unpublish-Challenge Save-Challenge Get-PAPlugin","title":"Publish-Challenge"},{"location":"Functions/Publish-Challenge/#publish-challenge","text":"","title":"Publish-Challenge"},{"location":"Functions/Publish-Challenge/#synopsis","text":"Publish a challenge using the specified plugin.","title":"Synopsis"},{"location":"Functions/Publish-Challenge/#syntax","text":"Publish-Challenge [ -Domain ] < String > [ -Account ] < Object > [ -Token ] < String > [ -Plugin ] < String > [[ -PluginArgs ] < Hashtable >] [ -DnsAlias < String >] [< CommonParameters >]","title":"Syntax"},{"location":"Functions/Publish-Challenge/#description","text":"Based on the type of validation plugin specified, this function will publish either a DNS TXT record or an HTTP challenge file for the given domain and token value that satisfies the dns-01 or http-01 challenge specification. Depending on the plugin, calling Save-Challenge may be required to commit changes made by Publish-Challenge . If multiple challenges are being published, make all Publish-Challenge calls first. Then, Save-Challenge once to commit them all.","title":"Description"},{"location":"Functions/Publish-Challenge/#examples","text":"","title":"Examples"},{"location":"Functions/Publish-Challenge/#example-1-publish-a-challenge","text":"$splat = @{ Domain = 'example.com' Account = ( Get-PAAccount ) Token = 'fake-token' Plugin = 'FakeDNS' PluginArgs = @{ FDToken = ( Read-Host 'FakeDNS API Token' -AsSecureString ) } } Publish-Challenge @splat # if plugin requires saving Save-Challenge -Plugin $splat . Plugin -PluginArgs $splat . PluginArgs Publish a single DNS challenge.","title":"Example 1: Publish a Challenge"},{"location":"Functions/Publish-Challenge/#example-2-dns-order-challenges","text":"$splat = @{ Account = ( Get-PAAccount ) Plugin = 'FakeDNS' PluginArgs = @{ FDToken = ( Read-Host 'FakeDNS API Token' -AsSecureString ) } } Get-PAOrder | Get-PAAuthorization | ForEach -Object { Publish-Challenge -Domain $_ . DNSId -Token $_ . DNS01Token @splat } # if plugin requires saving Save-Challenge -Plugin $splat . Plugin -PluginArgs $splat . PluginArgs Publish DNS challenges for all authorizations in the current order.","title":"Example 2: DNS Order Challenges"},{"location":"Functions/Publish-Challenge/#example-3-http-order-challenges","text":"$splat = @{ Account = ( Get-PAAccount ) Plugin = 'WebSelfHost' PluginArgs = @{} } Get-PAOrder | Get-PAAuthorization | ForEach -Object { Publish-Challenge -Domain $_ . DNSId -Token $_ . HTTP01Token @splat } # if plugin requires saving Save-Challenge -Plugin $splat . Plugin -PluginArgs $splat . PluginArgs Publish HTTP challenges for all authorizations in the current order.","title":"Example 3: HTTP Order Challenges"},{"location":"Functions/Publish-Challenge/#parameters","text":"","title":"Parameters"},{"location":"Functions/Publish-Challenge/#-domain","text":"The domain name that the challenge will be published for. Wildcard domains should have the \"*.\" removed and can only be used with DNS based validation plugins. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Domain"},{"location":"Functions/Publish-Challenge/#-account","text":"The account object associated with the order that requires the challenge. Type : Object Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Account"},{"location":"Functions/Publish-Challenge/#-token","text":"The token value from the appropriate challenge in an authorization object that matches the plugin type. Type : String Parameter Sets : (All) Aliases : Required : True Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Token"},{"location":"Functions/Publish-Challenge/#-plugin","text":"The name of the validation plugin to use. Use Get-PAPlugin to display a list of available plugins. Type : String Parameter Sets : (All) Aliases : Required : True Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Plugin"},{"location":"Functions/Publish-Challenge/#-pluginargs","text":"A hashtable containing the plugin arguments to use with the specified plugin. So if a plugin has a -MyText string and -MyNumber integer parameter, you could specify them as @{MyText='text';MyNumber=1234} . Type : Hashtable Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-PluginArgs"},{"location":"Functions/Publish-Challenge/#-dnsalias","text":"When using DNS Alias support with DNS validation plugins, the alias domain that the TXT record will be written to. This should be the complete FQDN including the _acme-challenge. prefix if necessary. This field is ignored for non-DNS validation plugins. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-DnsAlias"},{"location":"Functions/Publish-Challenge/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Publish-Challenge/#related-links","text":"Unpublish-Challenge Save-Challenge Get-PAPlugin","title":"Related Links"},{"location":"Functions/Remove-PAAccount/","text":"Remove-PAAccount \u00b6 Synopsis \u00b6 Remove an ACME account and all associated orders and certificates from the local profile. Syntax \u00b6 Remove-PAAccount [ -ID ] < String > [ -Deactivate ] [ -Force ] [ -WhatIf ] [ -Confirm ] [< CommonParameters >] Description \u00b6 This function removes the ACME account from the local profile which also removes any associated orders and certificates. It will not remove or cleanup copies of certificates that have been exported or installed elsewhere. It will not deactivate the account on the ACME server unless -Deactivate is specified. But you won't be able to re-use the account on another system without an export of the account's key such as the one generated with Export-PAAccountKey . Examples \u00b6 Example 1: Remove Account \u00b6 Remove-PAAccount 12345 Remove the specified account without deactivation. Example 2: Deactivate and Remove \u00b6 Get-PAAccount | Remove-PAAccount -Deactivate -Force Remove the current account after deactivating it and skip confirmation prompts. Parameters \u00b6 -ID \u00b6 The account id value as returned by the ACME server. Type : String Parameter Sets : (All) Aliases : Name Required : True Position : 1 Default value : None Accept pipeline input : True (ByPropertyName, ByValue) Accept wildcard characters : False -Deactivate \u00b6 If specified, a request will be sent to the associated ACME server to deactivate the account. Clients may wish to do this if the account key is compromised or decommissioned. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Force \u00b6 If specified, interactive confirmation prompts will be skipped. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -WhatIf \u00b6 Shows what would happen if the cmdlet runs. The cmdlet is not run. Type : SwitchParameter Parameter Sets : (All) Aliases : wi Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Confirm \u00b6 Prompts you for confirmation before running the cmdlet. Type : SwitchParameter Parameter Sets : (All) Aliases : cf Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . Related Links \u00b6 Get-PAAccount New-PAAccount","title":"Remove-PAAccount"},{"location":"Functions/Remove-PAAccount/#remove-paaccount","text":"","title":"Remove-PAAccount"},{"location":"Functions/Remove-PAAccount/#synopsis","text":"Remove an ACME account and all associated orders and certificates from the local profile.","title":"Synopsis"},{"location":"Functions/Remove-PAAccount/#syntax","text":"Remove-PAAccount [ -ID ] < String > [ -Deactivate ] [ -Force ] [ -WhatIf ] [ -Confirm ] [< CommonParameters >]","title":"Syntax"},{"location":"Functions/Remove-PAAccount/#description","text":"This function removes the ACME account from the local profile which also removes any associated orders and certificates. It will not remove or cleanup copies of certificates that have been exported or installed elsewhere. It will not deactivate the account on the ACME server unless -Deactivate is specified. But you won't be able to re-use the account on another system without an export of the account's key such as the one generated with Export-PAAccountKey .","title":"Description"},{"location":"Functions/Remove-PAAccount/#examples","text":"","title":"Examples"},{"location":"Functions/Remove-PAAccount/#example-1-remove-account","text":"Remove-PAAccount 12345 Remove the specified account without deactivation.","title":"Example 1: Remove Account"},{"location":"Functions/Remove-PAAccount/#example-2-deactivate-and-remove","text":"Get-PAAccount | Remove-PAAccount -Deactivate -Force Remove the current account after deactivating it and skip confirmation prompts.","title":"Example 2: Deactivate and Remove"},{"location":"Functions/Remove-PAAccount/#parameters","text":"","title":"Parameters"},{"location":"Functions/Remove-PAAccount/#-id","text":"The account id value as returned by the ACME server. Type : String Parameter Sets : (All) Aliases : Name Required : True Position : 1 Default value : None Accept pipeline input : True (ByPropertyName, ByValue) Accept wildcard characters : False","title":"-ID"},{"location":"Functions/Remove-PAAccount/#-deactivate","text":"If specified, a request will be sent to the associated ACME server to deactivate the account. Clients may wish to do this if the account key is compromised or decommissioned. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Deactivate"},{"location":"Functions/Remove-PAAccount/#-force","text":"If specified, interactive confirmation prompts will be skipped. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Force"},{"location":"Functions/Remove-PAAccount/#-whatif","text":"Shows what would happen if the cmdlet runs. The cmdlet is not run. Type : SwitchParameter Parameter Sets : (All) Aliases : wi Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-WhatIf"},{"location":"Functions/Remove-PAAccount/#-confirm","text":"Prompts you for confirmation before running the cmdlet. Type : SwitchParameter Parameter Sets : (All) Aliases : cf Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Confirm"},{"location":"Functions/Remove-PAAccount/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Remove-PAAccount/#related-links","text":"Get-PAAccount New-PAAccount","title":"Related Links"},{"location":"Functions/Remove-PAOrder/","text":"Remove-PAOrder \u00b6 Synopsis \u00b6 Remove an ACME order from the local profile. Syntax \u00b6 Remove-PAOrder [[ -MainDomain ] < String >] [[ -Name ] < String >] [ -RevokeCert ] [ -Force ] [ -WhatIf ] [ -Confirm ] [< CommonParameters >] Description \u00b6 This function removes the order from the local profile which also removes any associated certificate/key. It will not remove or cleanup copies of the certificate that have been exported or installed elsewhere. It will not revoke the certificate unless -RevokeCert is specified. The ACME server may retain a reference to the order until it decides to delete it. Note Revoking a certificate is discouraged unless the private key is known to have been compromised. Revoking certs that simply aren't being used anymore is a waste of CA resources. Examples \u00b6 Example 1: Remove Order \u00b6 Remove-PAOrder example . com Remove the specified order without revoking the certificate. Example 2: Revoke and Remove All \u00b6 Get-PAOrder -List | Remove-PAOrder -RevokeCert -Force Remove all orders associated with the current account, revoke all certificates, and skip confirmation prompts. Parameters \u00b6 -MainDomain \u00b6 The primary domain for the order. For a SAN order, this was the first domain in the list when creating the order. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : True (ByPropertyName, ByValue) Accept wildcard characters : False -Name \u00b6 The name of the ACME order. This can be useful to distinguish between two orders that have the same MainDomain. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : True (ByPropertyName) Accept wildcard characters : False -RevokeCert \u00b6 If specified and there is a currently valid certificate associated with the order, the certificate will be revoked before deleting the order. This is not required, but generally a good practice if the certificate is no longer being used. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Force \u00b6 If specified, interactive confirmation prompts will be skipped. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -WhatIf \u00b6 Shows what would happen if the cmdlet runs. The cmdlet is not run. Type : SwitchParameter Parameter Sets : (All) Aliases : wi Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Confirm \u00b6 Prompts you for confirmation before running the cmdlet. Type : SwitchParameter Parameter Sets : (All) Aliases : cf Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . Related Links \u00b6 New-PAOrder Revoke-PACertificate","title":"Remove-PAOrder"},{"location":"Functions/Remove-PAOrder/#remove-paorder","text":"","title":"Remove-PAOrder"},{"location":"Functions/Remove-PAOrder/#synopsis","text":"Remove an ACME order from the local profile.","title":"Synopsis"},{"location":"Functions/Remove-PAOrder/#syntax","text":"Remove-PAOrder [[ -MainDomain ] < String >] [[ -Name ] < String >] [ -RevokeCert ] [ -Force ] [ -WhatIf ] [ -Confirm ] [< CommonParameters >]","title":"Syntax"},{"location":"Functions/Remove-PAOrder/#description","text":"This function removes the order from the local profile which also removes any associated certificate/key. It will not remove or cleanup copies of the certificate that have been exported or installed elsewhere. It will not revoke the certificate unless -RevokeCert is specified. The ACME server may retain a reference to the order until it decides to delete it. Note Revoking a certificate is discouraged unless the private key is known to have been compromised. Revoking certs that simply aren't being used anymore is a waste of CA resources.","title":"Description"},{"location":"Functions/Remove-PAOrder/#examples","text":"","title":"Examples"},{"location":"Functions/Remove-PAOrder/#example-1-remove-order","text":"Remove-PAOrder example . com Remove the specified order without revoking the certificate.","title":"Example 1: Remove Order"},{"location":"Functions/Remove-PAOrder/#example-2-revoke-and-remove-all","text":"Get-PAOrder -List | Remove-PAOrder -RevokeCert -Force Remove all orders associated with the current account, revoke all certificates, and skip confirmation prompts.","title":"Example 2: Revoke and Remove All"},{"location":"Functions/Remove-PAOrder/#parameters","text":"","title":"Parameters"},{"location":"Functions/Remove-PAOrder/#-maindomain","text":"The primary domain for the order. For a SAN order, this was the first domain in the list when creating the order. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : True (ByPropertyName, ByValue) Accept wildcard characters : False","title":"-MainDomain"},{"location":"Functions/Remove-PAOrder/#-name","text":"The name of the ACME order. This can be useful to distinguish between two orders that have the same MainDomain. Type : String Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : True (ByPropertyName) Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Remove-PAOrder/#-revokecert","text":"If specified and there is a currently valid certificate associated with the order, the certificate will be revoked before deleting the order. This is not required, but generally a good practice if the certificate is no longer being used. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-RevokeCert"},{"location":"Functions/Remove-PAOrder/#-force","text":"If specified, interactive confirmation prompts will be skipped. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Force"},{"location":"Functions/Remove-PAOrder/#-whatif","text":"Shows what would happen if the cmdlet runs. The cmdlet is not run. Type : SwitchParameter Parameter Sets : (All) Aliases : wi Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-WhatIf"},{"location":"Functions/Remove-PAOrder/#-confirm","text":"Prompts you for confirmation before running the cmdlet. Type : SwitchParameter Parameter Sets : (All) Aliases : cf Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Confirm"},{"location":"Functions/Remove-PAOrder/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Remove-PAOrder/#related-links","text":"New-PAOrder Revoke-PACertificate","title":"Related Links"},{"location":"Functions/Remove-PAServer/","text":"Remove-PAServer \u00b6 Synopsis \u00b6 Remove an ACME server and all associated accounts, orders, and certificates from the local profile. Syntax \u00b6 Remove-PAServer [[ -DirectoryUrl ] < String >] [ -Name < String >] [ -DeactivateAccounts ] [ -Force ] [ -WhatIf ] [ -Confirm ] [< CommonParameters >] Description \u00b6 This function removes the ACME server from the local profile which also removes any associated accounts, orders and certificates. It will not remove or cleanup copies of certificates that have been exported or installed elsewhere. It will not revoke any certificates. It will not deactivate the accounts on the ACME server unless the -DeactivateAccounts switch is specified. Examples \u00b6 Example 1: Remove Server \u00b6 Remove-PAServer LE_STAGE Remove the specified server without deactivating accounts. Example 2: Remove and Deactivate Accounts \u00b6 Get-PAServer | Remove-PAServer -DeactivateAccounts -Force Remove the current server and deactivates accounts without confirmation. Parameters \u00b6 -DirectoryUrl \u00b6 Either the URL to an ACME server's \"directory\" endpoint or one of the supported short names. Currently supported short names include LE_PROD (LetsEncrypt Production), LE_STAGE (LetsEncrypt Staging), BUYPASS_PROD (BuyPass.com Production), BUYPASS_TEST (BuyPass.com Testing), and ZEROSSL_PROD (Zerossl.com Production). Type : String Parameter Sets : (All) Aliases : location Required : False Position : 1 Default value : None Accept pipeline input : True (ByPropertyName, ByValue) Accept wildcard characters : False -Name \u00b6 The name of the ACME server. The parameter is ignored if DirectoryUrl is specified. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : True (ByPropertyName) Accept wildcard characters : False -DeactivateAccounts \u00b6 If specified, an attempt will be made to deactivate the accounts in this profile before deletion. Clients may wish to do this if the account key is compromised or being decommissioned. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Force \u00b6 If specified, interactive confirmation prompts will be skipped. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -WhatIf \u00b6 Shows what would happen if the cmdlet runs. The cmdlet is not run. Type : SwitchParameter Parameter Sets : (All) Aliases : wi Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Confirm \u00b6 Prompts you for confirmation before running the cmdlet. Type : SwitchParameter Parameter Sets : (All) Aliases : cf Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . Related Links \u00b6 Get-PAServer Set-PAServer","title":"Remove-PAServer"},{"location":"Functions/Remove-PAServer/#remove-paserver","text":"","title":"Remove-PAServer"},{"location":"Functions/Remove-PAServer/#synopsis","text":"Remove an ACME server and all associated accounts, orders, and certificates from the local profile.","title":"Synopsis"},{"location":"Functions/Remove-PAServer/#syntax","text":"Remove-PAServer [[ -DirectoryUrl ] < String >] [ -Name < String >] [ -DeactivateAccounts ] [ -Force ] [ -WhatIf ] [ -Confirm ] [< CommonParameters >]","title":"Syntax"},{"location":"Functions/Remove-PAServer/#description","text":"This function removes the ACME server from the local profile which also removes any associated accounts, orders and certificates. It will not remove or cleanup copies of certificates that have been exported or installed elsewhere. It will not revoke any certificates. It will not deactivate the accounts on the ACME server unless the -DeactivateAccounts switch is specified.","title":"Description"},{"location":"Functions/Remove-PAServer/#examples","text":"","title":"Examples"},{"location":"Functions/Remove-PAServer/#example-1-remove-server","text":"Remove-PAServer LE_STAGE Remove the specified server without deactivating accounts.","title":"Example 1: Remove Server"},{"location":"Functions/Remove-PAServer/#example-2-remove-and-deactivate-accounts","text":"Get-PAServer | Remove-PAServer -DeactivateAccounts -Force Remove the current server and deactivates accounts without confirmation.","title":"Example 2: Remove and Deactivate Accounts"},{"location":"Functions/Remove-PAServer/#parameters","text":"","title":"Parameters"},{"location":"Functions/Remove-PAServer/#-directoryurl","text":"Either the URL to an ACME server's \"directory\" endpoint or one of the supported short names. Currently supported short names include LE_PROD (LetsEncrypt Production), LE_STAGE (LetsEncrypt Staging), BUYPASS_PROD (BuyPass.com Production), BUYPASS_TEST (BuyPass.com Testing), and ZEROSSL_PROD (Zerossl.com Production). Type : String Parameter Sets : (All) Aliases : location Required : False Position : 1 Default value : None Accept pipeline input : True (ByPropertyName, ByValue) Accept wildcard characters : False","title":"-DirectoryUrl"},{"location":"Functions/Remove-PAServer/#-name","text":"The name of the ACME server. The parameter is ignored if DirectoryUrl is specified. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : True (ByPropertyName) Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Remove-PAServer/#-deactivateaccounts","text":"If specified, an attempt will be made to deactivate the accounts in this profile before deletion. Clients may wish to do this if the account key is compromised or being decommissioned. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-DeactivateAccounts"},{"location":"Functions/Remove-PAServer/#-force","text":"If specified, interactive confirmation prompts will be skipped. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Force"},{"location":"Functions/Remove-PAServer/#-whatif","text":"Shows what would happen if the cmdlet runs. The cmdlet is not run. Type : SwitchParameter Parameter Sets : (All) Aliases : wi Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-WhatIf"},{"location":"Functions/Remove-PAServer/#-confirm","text":"Prompts you for confirmation before running the cmdlet. Type : SwitchParameter Parameter Sets : (All) Aliases : cf Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Confirm"},{"location":"Functions/Remove-PAServer/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Remove-PAServer/#related-links","text":"Get-PAServer Set-PAServer","title":"Related Links"},{"location":"Functions/Revoke-PAAuthorization/","text":"Revoke-PAAuthorization \u00b6 Synopsis \u00b6 Revoke the authorization associated with an ACME identifier. Syntax \u00b6 Revoke-PAAuthorization [ -AuthURLs ] < String []> [[ -Account ] < Object >] [ -Force ] [ -WhatIf ] [ -Confirm ] [< CommonParameters >] Description \u00b6 Many ACME server implementations cache succesful authorizations for a certain amount of time to avoid requiring an account to re-authorize identifiers for additional orders submitted during the cache window. This can make testing authorization challenges in a client more cumbersome by having to create new orders with uncached identifiers. This function allows you to revoke those cached authorizations so that subsequent orders will go through the full challenge validation process. Examples \u00b6 Example 1: Revoke an Authorization \u00b6 Revoke-PAAuthorization https :// acme . example . com / authz / 1234567 Revoke the authorization for the specified URL using the current account. Example 2: Revoke Order Authorizations \u00b6 Get-PAOrder | Revoke-PAAuthorization -Force Revoke all authorizations for the current order on the current account without confirmation prompts. Example 3: Revoke All Order Authorizations \u00b6 Get-PAOrder -List | Revoke-PAAuthorizations Revoke all authorizations for all orders on the current account. Parameters \u00b6 -AuthURLs \u00b6 One or more authorization URLs. You also pipe in one or more PoshACME.PAOrder objects. Type : String[] Parameter Sets : (All) Aliases : authorizations Required : True Position : 1 Default value : None Accept pipeline input : True (ByPropertyName, ByValue) Accept wildcard characters : False -Account \u00b6 An existing ACME account object such as the output from Get-PAAccount. If no account is specified, the current account will be used. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Force \u00b6 If specified, no confirmation prompts will be presented. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -WhatIf \u00b6 Shows what would happen if the cmdlet runs. The cmdlet is not run. Type : SwitchParameter Parameter Sets : (All) Aliases : wi Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Confirm \u00b6 Prompts you for confirmation before running the cmdlet. Type : SwitchParameter Parameter Sets : (All) Aliases : cf Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . Inputs \u00b6 System.String \u00b6 The URI of the authorization object. Related Links \u00b6 Get-PAAuthorization Get-PAOrder","title":"Revoke-PAAuthorization"},{"location":"Functions/Revoke-PAAuthorization/#revoke-paauthorization","text":"","title":"Revoke-PAAuthorization"},{"location":"Functions/Revoke-PAAuthorization/#synopsis","text":"Revoke the authorization associated with an ACME identifier.","title":"Synopsis"},{"location":"Functions/Revoke-PAAuthorization/#syntax","text":"Revoke-PAAuthorization [ -AuthURLs ] < String []> [[ -Account ] < Object >] [ -Force ] [ -WhatIf ] [ -Confirm ] [< CommonParameters >]","title":"Syntax"},{"location":"Functions/Revoke-PAAuthorization/#description","text":"Many ACME server implementations cache succesful authorizations for a certain amount of time to avoid requiring an account to re-authorize identifiers for additional orders submitted during the cache window. This can make testing authorization challenges in a client more cumbersome by having to create new orders with uncached identifiers. This function allows you to revoke those cached authorizations so that subsequent orders will go through the full challenge validation process.","title":"Description"},{"location":"Functions/Revoke-PAAuthorization/#examples","text":"","title":"Examples"},{"location":"Functions/Revoke-PAAuthorization/#example-1-revoke-an-authorization","text":"Revoke-PAAuthorization https :// acme . example . com / authz / 1234567 Revoke the authorization for the specified URL using the current account.","title":"Example 1: Revoke an Authorization"},{"location":"Functions/Revoke-PAAuthorization/#example-2-revoke-order-authorizations","text":"Get-PAOrder | Revoke-PAAuthorization -Force Revoke all authorizations for the current order on the current account without confirmation prompts.","title":"Example 2: Revoke Order Authorizations"},{"location":"Functions/Revoke-PAAuthorization/#example-3-revoke-all-order-authorizations","text":"Get-PAOrder -List | Revoke-PAAuthorizations Revoke all authorizations for all orders on the current account.","title":"Example 3: Revoke All Order Authorizations"},{"location":"Functions/Revoke-PAAuthorization/#parameters","text":"","title":"Parameters"},{"location":"Functions/Revoke-PAAuthorization/#-authurls","text":"One or more authorization URLs. You also pipe in one or more PoshACME.PAOrder objects. Type : String[] Parameter Sets : (All) Aliases : authorizations Required : True Position : 1 Default value : None Accept pipeline input : True (ByPropertyName, ByValue) Accept wildcard characters : False","title":"-AuthURLs"},{"location":"Functions/Revoke-PAAuthorization/#-account","text":"An existing ACME account object such as the output from Get-PAAccount. If no account is specified, the current account will be used. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Account"},{"location":"Functions/Revoke-PAAuthorization/#-force","text":"If specified, no confirmation prompts will be presented. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Force"},{"location":"Functions/Revoke-PAAuthorization/#-whatif","text":"Shows what would happen if the cmdlet runs. The cmdlet is not run. Type : SwitchParameter Parameter Sets : (All) Aliases : wi Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-WhatIf"},{"location":"Functions/Revoke-PAAuthorization/#-confirm","text":"Prompts you for confirmation before running the cmdlet. Type : SwitchParameter Parameter Sets : (All) Aliases : cf Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Confirm"},{"location":"Functions/Revoke-PAAuthorization/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Revoke-PAAuthorization/#inputs","text":"","title":"Inputs"},{"location":"Functions/Revoke-PAAuthorization/#systemstring","text":"The URI of the authorization object.","title":"System.String"},{"location":"Functions/Revoke-PAAuthorization/#related-links","text":"Get-PAAuthorization Get-PAOrder","title":"Related Links"},{"location":"Functions/Revoke-PACertificate/","text":"Revoke-PACertificate \u00b6 Synopsis \u00b6 Revoke an ACME certificate Syntax \u00b6 MainDomain (Default) \u00b6 Revoke-PACertificate [[ -MainDomain ] < String >] [ -Name < String >] [ -Reason < RevocationReasons >] [ -Force ] [ -WhatIf ] [ -Confirm ] [< CommonParameters >] CertFile \u00b6 Revoke-PACertificate -CertFile < String > [ -KeyFile < String >] [ -Reason < RevocationReasons >] [ -Force ] [ -WhatIf ] [ -Confirm ] [< CommonParameters >] Description \u00b6 Any certificate created with the current ACME account can be revoked. If you need to revoke a certificate not created with the current account, you either need to specify both CertFile and KeyFile . If you don't have the private key, you will need to go through the authorization process on this account for all names in the certificate and just specify CertFile . Note Revoking a certificate is discouraged unless the private key is known to have been compromised. Revoking certs that simply aren't being used anymore is a waste of CA resources. Examples \u00b6 Example 1: Revoke Order Cert \u00b6 Get-PAOrder | Revoke-PACertificate -Force Revokes the certificate associated with the current order and skips the confirmation prompt. Example 2: Revoke with Reason \u00b6 Get-PACertificate | Revoke-PACertificate -Reason keyCompromise Revokes the current certificate with the specified reason. Example 3: Revoke External Cert \u00b6 Revoke-PACertificate -CertFile mycert . crt -KeyFile mycert . key Revokes the specified cert using the specified private key. Parameters \u00b6 -MainDomain \u00b6 The primary domain associated with the certificate to be revoked. Type : String Parameter Sets : MainDomain Aliases : Required : False Position : 1 Default value : None Accept pipeline input : True (ByPropertyName, ByValue) Accept wildcard characters : False -Name \u00b6 The name of the ACME order. This can be useful to distinguish between two orders that have the same MainDomain. Type : String Parameter Sets : MainDomain Aliases : Required : False Position : Named Default value : None Accept pipeline input : True (ByPropertyName) Accept wildcard characters : False -CertFile \u00b6 A PEM-encoded certificate file to be revoked. Type : String Parameter Sets : CertFile Aliases : Required : True Position : Named Default value : None Accept pipeline input : True (ByPropertyName) Accept wildcard characters : False -KeyFile \u00b6 The PEM-encoded private key associated with CertFile. If not specified, the current ACME account will be used to sign the request. Type : String Parameter Sets : CertFile Aliases : Required : False Position : Named Default value : None Accept pipeline input : True (ByPropertyName) Accept wildcard characters : False -Reason \u00b6 The reason for cert revocation. This must be one of the reasons defined in RFC 5280 including keyCompromise, cACompromise, affiliationChanged, superseded, cessationOfOperation, certificateHold, removeFromCRL, privilegeWithdrawn, and aACompromise. NOTE: Some reason codes are not supported by some ACME CAs. Type : RevocationReasons Parameter Sets : (All) Aliases : Accepted values : keyCompromise, cACompromise, affiliationChanged, superseded, cessationOfOperation, certificateHold, removeFromCRL, privilegeWithdrawn, aACompromise Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Force \u00b6 If specified, the revocation confirmation prompt will be skipped. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -WhatIf \u00b6 Shows what would happen if the cmdlet runs. The cmdlet is not run. Type : SwitchParameter Parameter Sets : (All) Aliases : wi Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Confirm \u00b6 Prompts you for confirmation before running the cmdlet. Type : SwitchParameter Parameter Sets : (All) Aliases : cf Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . Related Links \u00b6 New-PACertificate","title":"Revoke-PACertificate"},{"location":"Functions/Revoke-PACertificate/#revoke-pacertificate","text":"","title":"Revoke-PACertificate"},{"location":"Functions/Revoke-PACertificate/#synopsis","text":"Revoke an ACME certificate","title":"Synopsis"},{"location":"Functions/Revoke-PACertificate/#syntax","text":"","title":"Syntax"},{"location":"Functions/Revoke-PACertificate/#maindomain-default","text":"Revoke-PACertificate [[ -MainDomain ] < String >] [ -Name < String >] [ -Reason < RevocationReasons >] [ -Force ] [ -WhatIf ] [ -Confirm ] [< CommonParameters >]","title":"MainDomain (Default)"},{"location":"Functions/Revoke-PACertificate/#certfile","text":"Revoke-PACertificate -CertFile < String > [ -KeyFile < String >] [ -Reason < RevocationReasons >] [ -Force ] [ -WhatIf ] [ -Confirm ] [< CommonParameters >]","title":"CertFile"},{"location":"Functions/Revoke-PACertificate/#description","text":"Any certificate created with the current ACME account can be revoked. If you need to revoke a certificate not created with the current account, you either need to specify both CertFile and KeyFile . If you don't have the private key, you will need to go through the authorization process on this account for all names in the certificate and just specify CertFile . Note Revoking a certificate is discouraged unless the private key is known to have been compromised. Revoking certs that simply aren't being used anymore is a waste of CA resources.","title":"Description"},{"location":"Functions/Revoke-PACertificate/#examples","text":"","title":"Examples"},{"location":"Functions/Revoke-PACertificate/#example-1-revoke-order-cert","text":"Get-PAOrder | Revoke-PACertificate -Force Revokes the certificate associated with the current order and skips the confirmation prompt.","title":"Example 1: Revoke Order Cert"},{"location":"Functions/Revoke-PACertificate/#example-2-revoke-with-reason","text":"Get-PACertificate | Revoke-PACertificate -Reason keyCompromise Revokes the current certificate with the specified reason.","title":"Example 2: Revoke with Reason"},{"location":"Functions/Revoke-PACertificate/#example-3-revoke-external-cert","text":"Revoke-PACertificate -CertFile mycert . crt -KeyFile mycert . key Revokes the specified cert using the specified private key.","title":"Example 3: Revoke External Cert"},{"location":"Functions/Revoke-PACertificate/#parameters","text":"","title":"Parameters"},{"location":"Functions/Revoke-PACertificate/#-maindomain","text":"The primary domain associated with the certificate to be revoked. Type : String Parameter Sets : MainDomain Aliases : Required : False Position : 1 Default value : None Accept pipeline input : True (ByPropertyName, ByValue) Accept wildcard characters : False","title":"-MainDomain"},{"location":"Functions/Revoke-PACertificate/#-name","text":"The name of the ACME order. This can be useful to distinguish between two orders that have the same MainDomain. Type : String Parameter Sets : MainDomain Aliases : Required : False Position : Named Default value : None Accept pipeline input : True (ByPropertyName) Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Revoke-PACertificate/#-certfile","text":"A PEM-encoded certificate file to be revoked. Type : String Parameter Sets : CertFile Aliases : Required : True Position : Named Default value : None Accept pipeline input : True (ByPropertyName) Accept wildcard characters : False","title":"-CertFile"},{"location":"Functions/Revoke-PACertificate/#-keyfile","text":"The PEM-encoded private key associated with CertFile. If not specified, the current ACME account will be used to sign the request. Type : String Parameter Sets : CertFile Aliases : Required : False Position : Named Default value : None Accept pipeline input : True (ByPropertyName) Accept wildcard characters : False","title":"-KeyFile"},{"location":"Functions/Revoke-PACertificate/#-reason","text":"The reason for cert revocation. This must be one of the reasons defined in RFC 5280 including keyCompromise, cACompromise, affiliationChanged, superseded, cessationOfOperation, certificateHold, removeFromCRL, privilegeWithdrawn, and aACompromise. NOTE: Some reason codes are not supported by some ACME CAs. Type : RevocationReasons Parameter Sets : (All) Aliases : Accepted values : keyCompromise, cACompromise, affiliationChanged, superseded, cessationOfOperation, certificateHold, removeFromCRL, privilegeWithdrawn, aACompromise Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Reason"},{"location":"Functions/Revoke-PACertificate/#-force","text":"If specified, the revocation confirmation prompt will be skipped. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Force"},{"location":"Functions/Revoke-PACertificate/#-whatif","text":"Shows what would happen if the cmdlet runs. The cmdlet is not run. Type : SwitchParameter Parameter Sets : (All) Aliases : wi Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-WhatIf"},{"location":"Functions/Revoke-PACertificate/#-confirm","text":"Prompts you for confirmation before running the cmdlet. Type : SwitchParameter Parameter Sets : (All) Aliases : cf Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Confirm"},{"location":"Functions/Revoke-PACertificate/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Revoke-PACertificate/#related-links","text":"New-PACertificate","title":"Related Links"},{"location":"Functions/Save-Challenge/","text":"Save-Challenge \u00b6 Synopsis \u00b6 Commit changes made by Publish-Challenge or Unpublish-Challenge. Syntax \u00b6 Save-Challenge [ -Plugin ] < String > [[ -PluginArgs ] < Hashtable >] [< CommonParameters >] Description \u00b6 Some validation plugins require a finalization step after the Publish or Unpublish functionality to commit and make the changes live. This function should be called once after running all of the Publish-Challenge or Unpublish-Challenge commands. For plugins that don't require a commit step, this function may still be run without causing an error, but has no effect. Examples \u00b6 Example 1: Commit Changes \u00b6 $pArgs = @{ FDToken = ( Read-Host 'FakeDNS API Token' -AsSecureString ) } Save-Challenge -Plugin FakeDNS -PluginArgs $pArgs Commit changes that the specified plugin has made. Parameters \u00b6 -Plugin \u00b6 The name of the validation plugin to use. Use Get-PAPlugin to display a list of available plugins. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -PluginArgs \u00b6 A hashtable containing the plugin arguments to use with the specified plugin. So if a plugin has a -MyText string and -MyNumber integer parameter, you could specify them as @{MyText='text';MyNumber=1234} . Type : Hashtable Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . Related Links \u00b6 Publish-Challenge Unpublish-Challenge Get-PAPlugin","title":"Save-Challenge"},{"location":"Functions/Save-Challenge/#save-challenge","text":"","title":"Save-Challenge"},{"location":"Functions/Save-Challenge/#synopsis","text":"Commit changes made by Publish-Challenge or Unpublish-Challenge.","title":"Synopsis"},{"location":"Functions/Save-Challenge/#syntax","text":"Save-Challenge [ -Plugin ] < String > [[ -PluginArgs ] < Hashtable >] [< CommonParameters >]","title":"Syntax"},{"location":"Functions/Save-Challenge/#description","text":"Some validation plugins require a finalization step after the Publish or Unpublish functionality to commit and make the changes live. This function should be called once after running all of the Publish-Challenge or Unpublish-Challenge commands. For plugins that don't require a commit step, this function may still be run without causing an error, but has no effect.","title":"Description"},{"location":"Functions/Save-Challenge/#examples","text":"","title":"Examples"},{"location":"Functions/Save-Challenge/#example-1-commit-changes","text":"$pArgs = @{ FDToken = ( Read-Host 'FakeDNS API Token' -AsSecureString ) } Save-Challenge -Plugin FakeDNS -PluginArgs $pArgs Commit changes that the specified plugin has made.","title":"Example 1: Commit Changes"},{"location":"Functions/Save-Challenge/#parameters","text":"","title":"Parameters"},{"location":"Functions/Save-Challenge/#-plugin","text":"The name of the validation plugin to use. Use Get-PAPlugin to display a list of available plugins. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Plugin"},{"location":"Functions/Save-Challenge/#-pluginargs","text":"A hashtable containing the plugin arguments to use with the specified plugin. So if a plugin has a -MyText string and -MyNumber integer parameter, you could specify them as @{MyText='text';MyNumber=1234} . Type : Hashtable Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-PluginArgs"},{"location":"Functions/Save-Challenge/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Save-Challenge/#related-links","text":"Publish-Challenge Unpublish-Challenge Get-PAPlugin","title":"Related Links"},{"location":"Functions/Send-ChallengeAck/","text":"Send-ChallengeAck \u00b6 Synopsis \u00b6 Notify the ACME server to try validating a challenge. Syntax \u00b6 Send-ChallengeAck [ -ChallengeUrl ] < String > [[ -Account ] < Object >] [< CommonParameters >] Description \u00b6 Use this after publishing the required resource for one of the challenges from an authorization object. It lets the ACME server know that it should proceed validating that challenge. For ACME servers that allow retrying challenges, this can also be used to trigger a retry. Examples \u00b6 Example 1: Validate Challenge \u00b6 Send-ChallengeAck https :// acme . example . com / chal / 1234567 Validate a specific challenge URL. Example 2: Validate Pending HTTP Challenges \u00b6 $auths = Get-PAOrder | Get-PAAuthorization $httpUrls = ( $auths | ?{ $_ . status -eq 'pending' }). HTTP01Url $httpUrls | Send-ChallengeAck Tell the ACME server to validate all pending HTTP challenges in the current order. Parameters \u00b6 -ChallengeUrl \u00b6 The URL of the challenge to be validated. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False -Account \u00b6 The ACME account associated with the challenge. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . Inputs \u00b6 System.String \u00b6 The URI of an ACME challenge object. Related Links \u00b6 Get-PAAuthorization Submit-ChallengeValidation","title":"Send-ChallengeAck"},{"location":"Functions/Send-ChallengeAck/#send-challengeack","text":"","title":"Send-ChallengeAck"},{"location":"Functions/Send-ChallengeAck/#synopsis","text":"Notify the ACME server to try validating a challenge.","title":"Synopsis"},{"location":"Functions/Send-ChallengeAck/#syntax","text":"Send-ChallengeAck [ -ChallengeUrl ] < String > [[ -Account ] < Object >] [< CommonParameters >]","title":"Syntax"},{"location":"Functions/Send-ChallengeAck/#description","text":"Use this after publishing the required resource for one of the challenges from an authorization object. It lets the ACME server know that it should proceed validating that challenge. For ACME servers that allow retrying challenges, this can also be used to trigger a retry.","title":"Description"},{"location":"Functions/Send-ChallengeAck/#examples","text":"","title":"Examples"},{"location":"Functions/Send-ChallengeAck/#example-1-validate-challenge","text":"Send-ChallengeAck https :// acme . example . com / chal / 1234567 Validate a specific challenge URL.","title":"Example 1: Validate Challenge"},{"location":"Functions/Send-ChallengeAck/#example-2-validate-pending-http-challenges","text":"$auths = Get-PAOrder | Get-PAAuthorization $httpUrls = ( $auths | ?{ $_ . status -eq 'pending' }). HTTP01Url $httpUrls | Send-ChallengeAck Tell the ACME server to validate all pending HTTP challenges in the current order.","title":"Example 2: Validate Pending HTTP Challenges"},{"location":"Functions/Send-ChallengeAck/#parameters","text":"","title":"Parameters"},{"location":"Functions/Send-ChallengeAck/#-challengeurl","text":"The URL of the challenge to be validated. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-ChallengeUrl"},{"location":"Functions/Send-ChallengeAck/#-account","text":"The ACME account associated with the challenge. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Account"},{"location":"Functions/Send-ChallengeAck/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Send-ChallengeAck/#inputs","text":"","title":"Inputs"},{"location":"Functions/Send-ChallengeAck/#systemstring","text":"The URI of an ACME challenge object.","title":"System.String"},{"location":"Functions/Send-ChallengeAck/#related-links","text":"Get-PAAuthorization Submit-ChallengeValidation","title":"Related Links"},{"location":"Functions/Set-PAAccount/","text":"Set-PAAccount \u00b6 Synopsis \u00b6 Set the current ACME account and/or update account details. Syntax \u00b6 Edit (Default) \u00b6 Set-PAAccount [[ -ID ] < String >] [[ -Contact ] < String []>] [ -NewName < String >] [ -UseAltPluginEncryption ] [ -ResetAltPluginEncryption ] [ -Deactivate ] [ -Force ] [ -NoSwitch ] [ -WhatIf ] [ -Confirm ] [< CommonParameters >] RolloverImportKey \u00b6 Set-PAAccount [[ -ID ] < String >] [ -KeyRollover ] -KeyFile < String > [ -NoSwitch ] [ -WhatIf ] [ -Confirm ] [< CommonParameters >] Rollover \u00b6 Set-PAAccount [[ -ID ] < String >] [ -KeyRollover ] [ -KeyLength < String >] [ -NoSwitch ] [ -WhatIf ] [ -Confirm ] [< CommonParameters >] Description \u00b6 This function allows you to switch between ACME accounts on a server. It also allows you to update the contact information associated with an account, deactivate the account, or replace the account key with a new one. Note Some ACME CAs do not support all types of account modifications. Examples \u00b6 Example 1: Switch Accounts \u00b6 Set-PAAccount -ID 1234567 Switch to the specified account. Example 2: Update Contact Email \u00b6 Set-PAAccount -Contact 'user1@example.com' , 'user2@example.com' Set new contacts for the current account. Example 3: Update All Account Contacts \u00b6 Get-PAAccount -List | Set-PAAccount -Contact 'user1@example.com' -NoSwitch Set a new contact for all known accounts without switching from the current. Example 4: Deactivate Account \u00b6 Set-PAAccount -Deactivate Deactivate the current account. Example 5: New Account Key \u00b6 Set-PAAccount -KeyRollover -KeyLength ec - 384 Replace the current account key with a new ECC key using P-384 curve. Example 6: New External Account Key \u00b6 Set-PAAccount -KeyRollover -KeyFile .\\ mykey . key Replace the current account key with a pre-generated private key. Example 7: Alternative Plugin Encryption \u00b6 # enable Set-PAAccount -UseAltPluginEncryption # disable Set-PAAccount -UseAltPluginEncryption : $false Enable or Disable the alternative AES plugin encryption option for orders on this account. Parameters \u00b6 -ID \u00b6 The account id value as returned by the ACME server. If not specified, the function will attempt to use the currently active account. Type : String Parameter Sets : (All) Aliases : Name Required : False Position : 1 Default value : None Accept pipeline input : True (ByPropertyName, ByValue) Accept wildcard characters : False -Contact \u00b6 One or more email addresses to associate with this account. These addresses will be used by the ACME server to send certificate expiration notifications or other important account notices. Type : String[] Parameter Sets : Edit Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -NewName \u00b6 The new name (id) of this ACME account. Type : String Parameter Sets : Edit Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -UseAltPluginEncryption \u00b6 If specified, the account will be configured to use a randomly generated AES key to encrypt sensitive plugin parameters on disk instead of using the OS's native encryption methods. This can be useful if the config is being shared across systems or platforms. You can revert to OS native encryption using -UseAltPluginEncryption:$false . Type : SwitchParameter Parameter Sets : Edit Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -ResetAltPluginEncryption \u00b6 If specified, the existing AES key will be replaced with a new one and existing plugin parameters on disk will be re-encrypted with the new key. If there is no existing key, this parameter is ignored. Type : SwitchParameter Parameter Sets : Edit Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Deactivate \u00b6 If specified, a request will be sent to the associated ACME server to deactivate the account. Clients may wish to do this if the account key is compromised or decommissioned. Type : SwitchParameter Parameter Sets : Edit Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Force \u00b6 If specified, confirmation prompts for account deactivation will be skipped. Type : SwitchParameter Parameter Sets : Edit Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -KeyRollover \u00b6 If specified, generate a new account key and replace the current one with it. Clients may choose to do this to recover from a key compromise or proactively mitigate the impact of an unnoticed key compromise. Type : SwitchParameter Parameter Sets : RolloverImportKey, Rollover Aliases : Required : True Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -KeyLength \u00b6 The type and size of private key to use. For RSA keys, specify a number between 2048-4096 (divisible by 128). For ECC keys, specify either 'ec-256' or 'ec-384'. Defaults to 'ec-256'. Type : String Parameter Sets : Rollover Aliases : AccountKeyLength Required : False Position : Named Default value : Ec-256 Accept pipeline input : False Accept wildcard characters : False -KeyFile \u00b6 The path to an existing EC or RSA private key file. This will attempt to use the specified key as the new ACME account key. Type : String Parameter Sets : RolloverImportKey Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -NoSwitch \u00b6 If specified, the currently active account will not change. Useful primarily for bulk updating contact information across accounts. This switch is ignored if no ID is specified. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -WhatIf \u00b6 Shows what would happen if the cmdlet runs. The cmdlet is not run. Type : SwitchParameter Parameter Sets : (All) Aliases : wi Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Confirm \u00b6 Prompts you for confirmation before running the cmdlet. Type : SwitchParameter Parameter Sets : (All) Aliases : cf Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . Related Links \u00b6 Get-PAAccount New-PAAccount","title":"Set-PAAccount"},{"location":"Functions/Set-PAAccount/#set-paaccount","text":"","title":"Set-PAAccount"},{"location":"Functions/Set-PAAccount/#synopsis","text":"Set the current ACME account and/or update account details.","title":"Synopsis"},{"location":"Functions/Set-PAAccount/#syntax","text":"","title":"Syntax"},{"location":"Functions/Set-PAAccount/#edit-default","text":"Set-PAAccount [[ -ID ] < String >] [[ -Contact ] < String []>] [ -NewName < String >] [ -UseAltPluginEncryption ] [ -ResetAltPluginEncryption ] [ -Deactivate ] [ -Force ] [ -NoSwitch ] [ -WhatIf ] [ -Confirm ] [< CommonParameters >]","title":"Edit (Default)"},{"location":"Functions/Set-PAAccount/#rolloverimportkey","text":"Set-PAAccount [[ -ID ] < String >] [ -KeyRollover ] -KeyFile < String > [ -NoSwitch ] [ -WhatIf ] [ -Confirm ] [< CommonParameters >]","title":"RolloverImportKey"},{"location":"Functions/Set-PAAccount/#rollover","text":"Set-PAAccount [[ -ID ] < String >] [ -KeyRollover ] [ -KeyLength < String >] [ -NoSwitch ] [ -WhatIf ] [ -Confirm ] [< CommonParameters >]","title":"Rollover"},{"location":"Functions/Set-PAAccount/#description","text":"This function allows you to switch between ACME accounts on a server. It also allows you to update the contact information associated with an account, deactivate the account, or replace the account key with a new one. Note Some ACME CAs do not support all types of account modifications.","title":"Description"},{"location":"Functions/Set-PAAccount/#examples","text":"","title":"Examples"},{"location":"Functions/Set-PAAccount/#example-1-switch-accounts","text":"Set-PAAccount -ID 1234567 Switch to the specified account.","title":"Example 1: Switch Accounts"},{"location":"Functions/Set-PAAccount/#example-2-update-contact-email","text":"Set-PAAccount -Contact 'user1@example.com' , 'user2@example.com' Set new contacts for the current account.","title":"Example 2: Update Contact Email"},{"location":"Functions/Set-PAAccount/#example-3-update-all-account-contacts","text":"Get-PAAccount -List | Set-PAAccount -Contact 'user1@example.com' -NoSwitch Set a new contact for all known accounts without switching from the current.","title":"Example 3: Update All Account Contacts"},{"location":"Functions/Set-PAAccount/#example-4-deactivate-account","text":"Set-PAAccount -Deactivate Deactivate the current account.","title":"Example 4: Deactivate Account"},{"location":"Functions/Set-PAAccount/#example-5-new-account-key","text":"Set-PAAccount -KeyRollover -KeyLength ec - 384 Replace the current account key with a new ECC key using P-384 curve.","title":"Example 5: New Account Key"},{"location":"Functions/Set-PAAccount/#example-6-new-external-account-key","text":"Set-PAAccount -KeyRollover -KeyFile .\\ mykey . key Replace the current account key with a pre-generated private key.","title":"Example 6: New External Account Key"},{"location":"Functions/Set-PAAccount/#example-7-alternative-plugin-encryption","text":"# enable Set-PAAccount -UseAltPluginEncryption # disable Set-PAAccount -UseAltPluginEncryption : $false Enable or Disable the alternative AES plugin encryption option for orders on this account.","title":"Example 7: Alternative Plugin Encryption"},{"location":"Functions/Set-PAAccount/#parameters","text":"","title":"Parameters"},{"location":"Functions/Set-PAAccount/#-id","text":"The account id value as returned by the ACME server. If not specified, the function will attempt to use the currently active account. Type : String Parameter Sets : (All) Aliases : Name Required : False Position : 1 Default value : None Accept pipeline input : True (ByPropertyName, ByValue) Accept wildcard characters : False","title":"-ID"},{"location":"Functions/Set-PAAccount/#-contact","text":"One or more email addresses to associate with this account. These addresses will be used by the ACME server to send certificate expiration notifications or other important account notices. Type : String[] Parameter Sets : Edit Aliases : Required : False Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Contact"},{"location":"Functions/Set-PAAccount/#-newname","text":"The new name (id) of this ACME account. Type : String Parameter Sets : Edit Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-NewName"},{"location":"Functions/Set-PAAccount/#-usealtpluginencryption","text":"If specified, the account will be configured to use a randomly generated AES key to encrypt sensitive plugin parameters on disk instead of using the OS's native encryption methods. This can be useful if the config is being shared across systems or platforms. You can revert to OS native encryption using -UseAltPluginEncryption:$false . Type : SwitchParameter Parameter Sets : Edit Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-UseAltPluginEncryption"},{"location":"Functions/Set-PAAccount/#-resetaltpluginencryption","text":"If specified, the existing AES key will be replaced with a new one and existing plugin parameters on disk will be re-encrypted with the new key. If there is no existing key, this parameter is ignored. Type : SwitchParameter Parameter Sets : Edit Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-ResetAltPluginEncryption"},{"location":"Functions/Set-PAAccount/#-deactivate","text":"If specified, a request will be sent to the associated ACME server to deactivate the account. Clients may wish to do this if the account key is compromised or decommissioned. Type : SwitchParameter Parameter Sets : Edit Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Deactivate"},{"location":"Functions/Set-PAAccount/#-force","text":"If specified, confirmation prompts for account deactivation will be skipped. Type : SwitchParameter Parameter Sets : Edit Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Force"},{"location":"Functions/Set-PAAccount/#-keyrollover","text":"If specified, generate a new account key and replace the current one with it. Clients may choose to do this to recover from a key compromise or proactively mitigate the impact of an unnoticed key compromise. Type : SwitchParameter Parameter Sets : RolloverImportKey, Rollover Aliases : Required : True Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-KeyRollover"},{"location":"Functions/Set-PAAccount/#-keylength","text":"The type and size of private key to use. For RSA keys, specify a number between 2048-4096 (divisible by 128). For ECC keys, specify either 'ec-256' or 'ec-384'. Defaults to 'ec-256'. Type : String Parameter Sets : Rollover Aliases : AccountKeyLength Required : False Position : Named Default value : Ec-256 Accept pipeline input : False Accept wildcard characters : False","title":"-KeyLength"},{"location":"Functions/Set-PAAccount/#-keyfile","text":"The path to an existing EC or RSA private key file. This will attempt to use the specified key as the new ACME account key. Type : String Parameter Sets : RolloverImportKey Aliases : Required : True Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-KeyFile"},{"location":"Functions/Set-PAAccount/#-noswitch","text":"If specified, the currently active account will not change. Useful primarily for bulk updating contact information across accounts. This switch is ignored if no ID is specified. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-NoSwitch"},{"location":"Functions/Set-PAAccount/#-whatif","text":"Shows what would happen if the cmdlet runs. The cmdlet is not run. Type : SwitchParameter Parameter Sets : (All) Aliases : wi Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-WhatIf"},{"location":"Functions/Set-PAAccount/#-confirm","text":"Prompts you for confirmation before running the cmdlet. Type : SwitchParameter Parameter Sets : (All) Aliases : cf Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Confirm"},{"location":"Functions/Set-PAAccount/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Set-PAAccount/#related-links","text":"Get-PAAccount New-PAAccount","title":"Related Links"},{"location":"Functions/Set-PAOrder/","text":"Set-PAOrder \u00b6 Synopsis \u00b6 Switch to or modify an order. Syntax \u00b6 Edit (Default) \u00b6 Set-PAOrder [[ -MainDomain ] < String >] [ -Name < String >] [ -NoSwitch ] [ -Plugin < String []>] [ -PluginArgs < Hashtable >] [ -LifetimeDays < Int32 >] [ -DnsAlias < String []>] [ -NewName < String >] [ -Subject < String >] [ -FriendlyName < String >] [ -PfxPass < String >] [ -PfxPassSecure < SecureString >] [ -UseModernPfxEncryption ] [ -Install ] [ -OCSPMustStaple ] [ -DnsSleep < Int32 >] [ -ValidationTimeout < Int32 >] [ -PreferredChain < String >] [ -AlwaysNewKey ] [ -UseSerialValidation ] [ -WhatIf ] [ -Confirm ] [< CommonParameters >] Revoke \u00b6 Set-PAOrder [[ -MainDomain ] < String >] [ -Name < String >] [ -RevokeCert ] [ -Force ] [ -NoSwitch ] [ -WhatIf ] [ -Confirm ] [< CommonParameters >] Description \u00b6 Switch to a specific ACME order and edit its properties or revoke its certificate. Orders with revoked certificates are not deleted and can be re-requested using Submit-Renewal or New-PACertificate. Examples \u00b6 Example 1: Switch Order \u00b6 Set-PAOrder example . com Switch to the specified domain's order. Example 2: Revoke Certificate \u00b6 Set-PAOrder -RevokeCert Revoke the current order's certificate. Example 3: Update Plugin Args \u00b6 $pArgs = @{ FDToken = ( Read-Host 'FakeDNS API Token' -AsSecureString ) } Set-PAOrder example . com -Plugin FakeDNS -PluginArgs $pArgs Reset the plugin and its arguments for the specified order. Parameters \u00b6 -MainDomain \u00b6 The primary domain for the order. For a SAN order, this was the first domain in the list when creating the order. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : True (ByPropertyName, ByValue) Accept wildcard characters : False -Name \u00b6 The name of the ACME order. This can be useful to distinguish between two orders that have the same MainDomain. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : True (ByPropertyName) Accept wildcard characters : False -RevokeCert \u00b6 If specified, a request will be sent to the associated ACME server to revoke the certificate on this order. Clients may wish to do this if the certificate is decommissioned or the private key has been compromised. A warning will be displayed if the order is not currently valid or the existing certificate file can't be found. Type : SwitchParameter Parameter Sets : Revoke Aliases : Required : True Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Force \u00b6 If specified, confirmation prompts for certificate revocation will be skipped. Type : SwitchParameter Parameter Sets : Revoke Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -NoSwitch \u00b6 If specified, the currently selected order will not change. Useful primarily for bulk certificate revocation. This switch is ignored if no MainDomain is specified. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Plugin \u00b6 One or more validation plugin names to use for this order's challenges. If no plugin is specified, the DNS \"Manual\" plugin will be used. If the same plugin is used for all domains in the order, you can just specify it once. Otherwise, you should specify as many plugin names as there are domains in the order and in the same sequence as the order. Type : String[] Parameter Sets : Edit Aliases : DnsPlugin Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -PluginArgs \u00b6 A hashtable containing the plugin arguments to use with the specified Plugin list. So if a plugin has a -MyText string and -MyNumber integer parameter, you could specify them as @{MyText='text';MyNumber=1234} . Type : Hashtable Parameter Sets : Edit Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -DnsAlias \u00b6 One or more FQDNs that DNS challenges should be published to instead of the certificate domain's zone. This is used in advanced setups where a CNAME in the certificate domain's zone has been pre-created to point to the alias's FQDN which makes the ACME server check the alias domain when validation challenge TXT records. If the same alias is used for all domains in the order, you can just specify it once. Otherwise, you should specify as many alias FQDNs as there are domains in the order and in the same sequence as the order. Type : String[] Parameter Sets : Edit Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -NewName \u00b6 The new name for this ACME order. Type : String Parameter Sets : Edit Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Subject \u00b6 Sets the x509 \"Subject\" field in the certificate request that gets sent to the ACME server. By default, it is set to 'CN=FQDN' where 'FQDN' is the first name in the Domain parameter. For public certificate authorities issuing DV certificates, anything other than a DNS name from the list of domains will either be rejected or stripped from the finalized certificate. Type : String Parameter Sets : Edit Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -FriendlyName \u00b6 The friendly name for the certificate and subsequent renewals. This will populate the \"Friendly Name\" field in the Windows certificate store when the PFX is imported. Must not be an empty string. Type : String Parameter Sets : Edit Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -PfxPass \u00b6 The PFX password for the certificate and subsequent renewals. When the PfxPassSecure parameter is specified, this parameter is ignored. Type : String Parameter Sets : Edit Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -PfxPassSecure \u00b6 The PFX password for the certificate and subsequent renewals using a SecureString value. When this parameter is specified, the PfxPass parameter is ignored. Type : SecureString Parameter Sets : Edit Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Install \u00b6 Enables the Install switch for the order. Use -Install:$false to disable the switch on the order. This affects whether the module will automatically import the certificate to the Windows certificate store on subsequent renewals. It will not import the current certificate if it exists. Use Install-PACertificate for that purpose. Type : SwitchParameter Parameter Sets : Edit Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -OCSPMustStaple \u00b6 If specified, the certificate generated for this order will have the OCSP Must-Staple flag set. Type : SwitchParameter Parameter Sets : Edit Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -DnsSleep \u00b6 Number of seconds to wait for DNS changes to propagate before asking the ACME server to validate DNS challenges. Type : Int32 Parameter Sets : Edit Aliases : Required : False Position : Named Default value : 0 Accept pipeline input : False Accept wildcard characters : False -ValidationTimeout \u00b6 Number of seconds to wait for the ACME server to validate the challenges after asking it to do so. If the timeout is exceeded, an error will be thrown. Type : Int32 Parameter Sets : Edit Aliases : Required : False Position : Named Default value : 0 Accept pipeline input : False Accept wildcard characters : False -PreferredChain \u00b6 If the CA offers multiple certificate chains, prefer the chain with an issuer matching this Subject Common Name. If no match, the default offered chain will be used. Type : String Parameter Sets : Edit Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -AlwaysNewKey \u00b6 If specified, the order will be configured to always generate a new private key during each renewal. Otherwise, the old key is re-used if it exists. Type : SwitchParameter Parameter Sets : Edit Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -UseSerialValidation \u00b6 If specified, the names in the order will be validated individually rather than all at once. This can significantly increase the time it takes to process validations and should only be used for plugins that require it. The plugin's usage guide should indicate whether it is required. Type : SwitchParameter Parameter Sets : Edit Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -WhatIf \u00b6 Shows what would happen if the cmdlet runs. The cmdlet is not run. Type : SwitchParameter Parameter Sets : (All) Aliases : wi Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -Confirm \u00b6 Prompts you for confirmation before running the cmdlet. Type : SwitchParameter Parameter Sets : (All) Aliases : cf Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -LifetimeDays \u00b6 How long in days the certificate should be valid for. This will only affect future renewals of this order. NOTE: Many CAs do not support this feature and have fixed lifetime values. Some may ignore the request. Use a value of 0 to revert to the CAs default lifetime. Type : Int32 Parameter Sets : Edit Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -UseModernPfxEncryption \u00b6 If specified, PFX files generated from this order will use AES256 with SHA256 for the private key encryption instead of the default which is RC2-40-CBC. This can affect compatibility with some crypto libraries and tools. Most notably, OpenSSL 3.x requires the newer options to avoid using \"legacy\" mode. But it breaks compatibility with OpenSSL 1.0.x. Type : SwitchParameter Parameter Sets : Edit Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . Related Links \u00b6 Get-PAOrder New-PAOrder","title":"Set-PAOrder"},{"location":"Functions/Set-PAOrder/#set-paorder","text":"","title":"Set-PAOrder"},{"location":"Functions/Set-PAOrder/#synopsis","text":"Switch to or modify an order.","title":"Synopsis"},{"location":"Functions/Set-PAOrder/#syntax","text":"","title":"Syntax"},{"location":"Functions/Set-PAOrder/#edit-default","text":"Set-PAOrder [[ -MainDomain ] < String >] [ -Name < String >] [ -NoSwitch ] [ -Plugin < String []>] [ -PluginArgs < Hashtable >] [ -LifetimeDays < Int32 >] [ -DnsAlias < String []>] [ -NewName < String >] [ -Subject < String >] [ -FriendlyName < String >] [ -PfxPass < String >] [ -PfxPassSecure < SecureString >] [ -UseModernPfxEncryption ] [ -Install ] [ -OCSPMustStaple ] [ -DnsSleep < Int32 >] [ -ValidationTimeout < Int32 >] [ -PreferredChain < String >] [ -AlwaysNewKey ] [ -UseSerialValidation ] [ -WhatIf ] [ -Confirm ] [< CommonParameters >]","title":"Edit (Default)"},{"location":"Functions/Set-PAOrder/#revoke","text":"Set-PAOrder [[ -MainDomain ] < String >] [ -Name < String >] [ -RevokeCert ] [ -Force ] [ -NoSwitch ] [ -WhatIf ] [ -Confirm ] [< CommonParameters >]","title":"Revoke"},{"location":"Functions/Set-PAOrder/#description","text":"Switch to a specific ACME order and edit its properties or revoke its certificate. Orders with revoked certificates are not deleted and can be re-requested using Submit-Renewal or New-PACertificate.","title":"Description"},{"location":"Functions/Set-PAOrder/#examples","text":"","title":"Examples"},{"location":"Functions/Set-PAOrder/#example-1-switch-order","text":"Set-PAOrder example . com Switch to the specified domain's order.","title":"Example 1: Switch Order"},{"location":"Functions/Set-PAOrder/#example-2-revoke-certificate","text":"Set-PAOrder -RevokeCert Revoke the current order's certificate.","title":"Example 2: Revoke Certificate"},{"location":"Functions/Set-PAOrder/#example-3-update-plugin-args","text":"$pArgs = @{ FDToken = ( Read-Host 'FakeDNS API Token' -AsSecureString ) } Set-PAOrder example . com -Plugin FakeDNS -PluginArgs $pArgs Reset the plugin and its arguments for the specified order.","title":"Example 3: Update Plugin Args"},{"location":"Functions/Set-PAOrder/#parameters","text":"","title":"Parameters"},{"location":"Functions/Set-PAOrder/#-maindomain","text":"The primary domain for the order. For a SAN order, this was the first domain in the list when creating the order. Type : String Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : True (ByPropertyName, ByValue) Accept wildcard characters : False","title":"-MainDomain"},{"location":"Functions/Set-PAOrder/#-name","text":"The name of the ACME order. This can be useful to distinguish between two orders that have the same MainDomain. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : True (ByPropertyName) Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Set-PAOrder/#-revokecert","text":"If specified, a request will be sent to the associated ACME server to revoke the certificate on this order. Clients may wish to do this if the certificate is decommissioned or the private key has been compromised. A warning will be displayed if the order is not currently valid or the existing certificate file can't be found. Type : SwitchParameter Parameter Sets : Revoke Aliases : Required : True Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-RevokeCert"},{"location":"Functions/Set-PAOrder/#-force","text":"If specified, confirmation prompts for certificate revocation will be skipped. Type : SwitchParameter Parameter Sets : Revoke Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Force"},{"location":"Functions/Set-PAOrder/#-noswitch","text":"If specified, the currently selected order will not change. Useful primarily for bulk certificate revocation. This switch is ignored if no MainDomain is specified. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-NoSwitch"},{"location":"Functions/Set-PAOrder/#-plugin","text":"One or more validation plugin names to use for this order's challenges. If no plugin is specified, the DNS \"Manual\" plugin will be used. If the same plugin is used for all domains in the order, you can just specify it once. Otherwise, you should specify as many plugin names as there are domains in the order and in the same sequence as the order. Type : String[] Parameter Sets : Edit Aliases : DnsPlugin Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Plugin"},{"location":"Functions/Set-PAOrder/#-pluginargs","text":"A hashtable containing the plugin arguments to use with the specified Plugin list. So if a plugin has a -MyText string and -MyNumber integer parameter, you could specify them as @{MyText='text';MyNumber=1234} . Type : Hashtable Parameter Sets : Edit Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-PluginArgs"},{"location":"Functions/Set-PAOrder/#-dnsalias","text":"One or more FQDNs that DNS challenges should be published to instead of the certificate domain's zone. This is used in advanced setups where a CNAME in the certificate domain's zone has been pre-created to point to the alias's FQDN which makes the ACME server check the alias domain when validation challenge TXT records. If the same alias is used for all domains in the order, you can just specify it once. Otherwise, you should specify as many alias FQDNs as there are domains in the order and in the same sequence as the order. Type : String[] Parameter Sets : Edit Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-DnsAlias"},{"location":"Functions/Set-PAOrder/#-newname","text":"The new name for this ACME order. Type : String Parameter Sets : Edit Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-NewName"},{"location":"Functions/Set-PAOrder/#-subject","text":"Sets the x509 \"Subject\" field in the certificate request that gets sent to the ACME server. By default, it is set to 'CN=FQDN' where 'FQDN' is the first name in the Domain parameter. For public certificate authorities issuing DV certificates, anything other than a DNS name from the list of domains will either be rejected or stripped from the finalized certificate. Type : String Parameter Sets : Edit Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Subject"},{"location":"Functions/Set-PAOrder/#-friendlyname","text":"The friendly name for the certificate and subsequent renewals. This will populate the \"Friendly Name\" field in the Windows certificate store when the PFX is imported. Must not be an empty string. Type : String Parameter Sets : Edit Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-FriendlyName"},{"location":"Functions/Set-PAOrder/#-pfxpass","text":"The PFX password for the certificate and subsequent renewals. When the PfxPassSecure parameter is specified, this parameter is ignored. Type : String Parameter Sets : Edit Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-PfxPass"},{"location":"Functions/Set-PAOrder/#-pfxpasssecure","text":"The PFX password for the certificate and subsequent renewals using a SecureString value. When this parameter is specified, the PfxPass parameter is ignored. Type : SecureString Parameter Sets : Edit Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-PfxPassSecure"},{"location":"Functions/Set-PAOrder/#-install","text":"Enables the Install switch for the order. Use -Install:$false to disable the switch on the order. This affects whether the module will automatically import the certificate to the Windows certificate store on subsequent renewals. It will not import the current certificate if it exists. Use Install-PACertificate for that purpose. Type : SwitchParameter Parameter Sets : Edit Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Install"},{"location":"Functions/Set-PAOrder/#-ocspmuststaple","text":"If specified, the certificate generated for this order will have the OCSP Must-Staple flag set. Type : SwitchParameter Parameter Sets : Edit Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-OCSPMustStaple"},{"location":"Functions/Set-PAOrder/#-dnssleep","text":"Number of seconds to wait for DNS changes to propagate before asking the ACME server to validate DNS challenges. Type : Int32 Parameter Sets : Edit Aliases : Required : False Position : Named Default value : 0 Accept pipeline input : False Accept wildcard characters : False","title":"-DnsSleep"},{"location":"Functions/Set-PAOrder/#-validationtimeout","text":"Number of seconds to wait for the ACME server to validate the challenges after asking it to do so. If the timeout is exceeded, an error will be thrown. Type : Int32 Parameter Sets : Edit Aliases : Required : False Position : Named Default value : 0 Accept pipeline input : False Accept wildcard characters : False","title":"-ValidationTimeout"},{"location":"Functions/Set-PAOrder/#-preferredchain","text":"If the CA offers multiple certificate chains, prefer the chain with an issuer matching this Subject Common Name. If no match, the default offered chain will be used. Type : String Parameter Sets : Edit Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-PreferredChain"},{"location":"Functions/Set-PAOrder/#-alwaysnewkey","text":"If specified, the order will be configured to always generate a new private key during each renewal. Otherwise, the old key is re-used if it exists. Type : SwitchParameter Parameter Sets : Edit Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-AlwaysNewKey"},{"location":"Functions/Set-PAOrder/#-useserialvalidation","text":"If specified, the names in the order will be validated individually rather than all at once. This can significantly increase the time it takes to process validations and should only be used for plugins that require it. The plugin's usage guide should indicate whether it is required. Type : SwitchParameter Parameter Sets : Edit Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-UseSerialValidation"},{"location":"Functions/Set-PAOrder/#-whatif","text":"Shows what would happen if the cmdlet runs. The cmdlet is not run. Type : SwitchParameter Parameter Sets : (All) Aliases : wi Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-WhatIf"},{"location":"Functions/Set-PAOrder/#-confirm","text":"Prompts you for confirmation before running the cmdlet. Type : SwitchParameter Parameter Sets : (All) Aliases : cf Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Confirm"},{"location":"Functions/Set-PAOrder/#-lifetimedays","text":"How long in days the certificate should be valid for. This will only affect future renewals of this order. NOTE: Many CAs do not support this feature and have fixed lifetime values. Some may ignore the request. Use a value of 0 to revert to the CAs default lifetime. Type : Int32 Parameter Sets : Edit Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-LifetimeDays"},{"location":"Functions/Set-PAOrder/#-usemodernpfxencryption","text":"If specified, PFX files generated from this order will use AES256 with SHA256 for the private key encryption instead of the default which is RC2-40-CBC. This can affect compatibility with some crypto libraries and tools. Most notably, OpenSSL 3.x requires the newer options to avoid using \"legacy\" mode. But it breaks compatibility with OpenSSL 1.0.x. Type : SwitchParameter Parameter Sets : Edit Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-UseModernPfxEncryption"},{"location":"Functions/Set-PAOrder/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Set-PAOrder/#related-links","text":"Get-PAOrder New-PAOrder","title":"Related Links"},{"location":"Functions/Set-PAServer/","text":"Set-PAServer \u00b6 Synopsis \u00b6 Set the current ACME server and/or its configuration. Syntax \u00b6 Set-PAServer [[ -DirectoryUrl ] < String >] [ -Name < String >] [ -NewName < String >] [ -SkipCertificateCheck ] [ -DisableTelemetry ] [ -UseAltAccountRefresh ] [ -NoRefresh ] [ -NoSwitch ] [< CommonParameters >] Description \u00b6 Use this function to set the current ACME server or change a server's configuration settings. Examples \u00b6 Example 1: Server Short Name \u00b6 Set-PAServer LE_PROD Switch to the LetsEncrypt production server using the short name. Example 2: Server URL \u00b6 Set-PAServer -DirectoryUrl https :// myacme . example . com / directory Switch to the specified ACME server using the directory URL. Example 3: Disable Telemetry \u00b6 Set-PAServer -DisableTelemetry Disable Posh-ACME telemetry collection for activity on the current ACME server. Example 4: Enable Telemetry \u00b6 Set-PAServer -DisableTelemetry : $false Enable Posh-ACME telemetry collection for activity on the current ACME server. Parameters \u00b6 -DirectoryUrl \u00b6 Either the URL to an ACME server's \"directory\" endpoint or one of the supported short names. Currently supported short names include LE_PROD (LetsEncrypt Production), LE_STAGE (LetsEncrypt Staging), BUYPASS_PROD (BuyPass.com Production), BUYPASS_TEST (BuyPass.com Testing), and ZEROSSL_PROD (Zerossl.com Production). Type : String Parameter Sets : (All) Aliases : location Required : False Position : 1 Default value : None Accept pipeline input : True (ByPropertyName, ByValue) Accept wildcard characters : False -Name \u00b6 The name of the ACME server. The parameter is ignored if DirectoryUrl is specified. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : True (ByPropertyName) Accept wildcard characters : False -NewName \u00b6 The new name of this ACME server. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False -SkipCertificateCheck \u00b6 If specified, disable certificate validation while using this server. This should not be necessary except in development environments where you are connecting to a self-hosted ACME server. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : True (ByPropertyName) Accept wildcard characters : False -DisableTelemetry \u00b6 If specified, telemetry data will not be sent to the Posh-ACME team for actions associated with this server. The telemetry data that gets sent by default includes Posh-ACME version, PowerShell version, and generic OS platform (Windows/Linux/MacOS). Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : True (ByPropertyName) Accept wildcard characters : False -NoRefresh \u00b6 If specified, the ACME server will not be re-queried for updated endpoints or a fresh nonce. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -NoSwitch \u00b6 If specified, the currently active ACME server will not be changed to the server being modified. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -UseAltAccountRefresh \u00b6 Some ACME CAs do not properly support the standard method to refresh account data. If specified, the module will use an alternate method to refresh account data that seems to work with these CAs. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . Related Links \u00b6 Get-PAServer","title":"Set-PAServer"},{"location":"Functions/Set-PAServer/#set-paserver","text":"","title":"Set-PAServer"},{"location":"Functions/Set-PAServer/#synopsis","text":"Set the current ACME server and/or its configuration.","title":"Synopsis"},{"location":"Functions/Set-PAServer/#syntax","text":"Set-PAServer [[ -DirectoryUrl ] < String >] [ -Name < String >] [ -NewName < String >] [ -SkipCertificateCheck ] [ -DisableTelemetry ] [ -UseAltAccountRefresh ] [ -NoRefresh ] [ -NoSwitch ] [< CommonParameters >]","title":"Syntax"},{"location":"Functions/Set-PAServer/#description","text":"Use this function to set the current ACME server or change a server's configuration settings.","title":"Description"},{"location":"Functions/Set-PAServer/#examples","text":"","title":"Examples"},{"location":"Functions/Set-PAServer/#example-1-server-short-name","text":"Set-PAServer LE_PROD Switch to the LetsEncrypt production server using the short name.","title":"Example 1: Server Short Name"},{"location":"Functions/Set-PAServer/#example-2-server-url","text":"Set-PAServer -DirectoryUrl https :// myacme . example . com / directory Switch to the specified ACME server using the directory URL.","title":"Example 2: Server URL"},{"location":"Functions/Set-PAServer/#example-3-disable-telemetry","text":"Set-PAServer -DisableTelemetry Disable Posh-ACME telemetry collection for activity on the current ACME server.","title":"Example 3: Disable Telemetry"},{"location":"Functions/Set-PAServer/#example-4-enable-telemetry","text":"Set-PAServer -DisableTelemetry : $false Enable Posh-ACME telemetry collection for activity on the current ACME server.","title":"Example 4: Enable Telemetry"},{"location":"Functions/Set-PAServer/#parameters","text":"","title":"Parameters"},{"location":"Functions/Set-PAServer/#-directoryurl","text":"Either the URL to an ACME server's \"directory\" endpoint or one of the supported short names. Currently supported short names include LE_PROD (LetsEncrypt Production), LE_STAGE (LetsEncrypt Staging), BUYPASS_PROD (BuyPass.com Production), BUYPASS_TEST (BuyPass.com Testing), and ZEROSSL_PROD (Zerossl.com Production). Type : String Parameter Sets : (All) Aliases : location Required : False Position : 1 Default value : None Accept pipeline input : True (ByPropertyName, ByValue) Accept wildcard characters : False","title":"-DirectoryUrl"},{"location":"Functions/Set-PAServer/#-name","text":"The name of the ACME server. The parameter is ignored if DirectoryUrl is specified. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : True (ByPropertyName) Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Set-PAServer/#-newname","text":"The new name of this ACME server. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-NewName"},{"location":"Functions/Set-PAServer/#-skipcertificatecheck","text":"If specified, disable certificate validation while using this server. This should not be necessary except in development environments where you are connecting to a self-hosted ACME server. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : True (ByPropertyName) Accept wildcard characters : False","title":"-SkipCertificateCheck"},{"location":"Functions/Set-PAServer/#-disabletelemetry","text":"If specified, telemetry data will not be sent to the Posh-ACME team for actions associated with this server. The telemetry data that gets sent by default includes Posh-ACME version, PowerShell version, and generic OS platform (Windows/Linux/MacOS). Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : True (ByPropertyName) Accept wildcard characters : False","title":"-DisableTelemetry"},{"location":"Functions/Set-PAServer/#-norefresh","text":"If specified, the ACME server will not be re-queried for updated endpoints or a fresh nonce. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-NoRefresh"},{"location":"Functions/Set-PAServer/#-noswitch","text":"If specified, the currently active ACME server will not be changed to the server being modified. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-NoSwitch"},{"location":"Functions/Set-PAServer/#-usealtaccountrefresh","text":"Some ACME CAs do not properly support the standard method to refresh account data. If specified, the module will use an alternate method to refresh account data that seems to work with these CAs. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-UseAltAccountRefresh"},{"location":"Functions/Set-PAServer/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Set-PAServer/#related-links","text":"Get-PAServer","title":"Related Links"},{"location":"Functions/Submit-ChallengeValidation/","text":"Submit-ChallengeValidation \u00b6 Synopsis \u00b6 Respond to authorization challenges for an ACME order and wait for the ACME server to validate them. Syntax \u00b6 Submit-ChallengeValidation [[ -Order ] < Object >] [< CommonParameters >] Description \u00b6 This function encapsulates the authorization validation cycle for challenges in a given order. It takes care of publishing the challenge records according to the order's plugin configuration, notifying the ACME server to validate the records, and cleaning up the challenge records whether the validation succeeded or not. If everything is successful, the order object will have transitioned from the pending state to the ready state which indicates it is ready for finalization using Submit-OrderFinalize . Examples \u00b6 Example 1: Current Order \u00b6 Submit-ChallengeValidation Begin challenge validation on the current order. Example 2: Specific Order \u00b6 Get-PAOrder -Name myorder | Submit-ChallengeValidation Begin challenge validation on the specified order. Parameters \u00b6 -Order \u00b6 The ACME order to perform the validations against. The order object must be associated with the currently active ACME account. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . Inputs \u00b6 PoshACME.PAOrder \u00b6 An order object. Related Links \u00b6 New-PAOrder Submit-OrderFinalize","title":"Submit-ChallengeValidation"},{"location":"Functions/Submit-ChallengeValidation/#submit-challengevalidation","text":"","title":"Submit-ChallengeValidation"},{"location":"Functions/Submit-ChallengeValidation/#synopsis","text":"Respond to authorization challenges for an ACME order and wait for the ACME server to validate them.","title":"Synopsis"},{"location":"Functions/Submit-ChallengeValidation/#syntax","text":"Submit-ChallengeValidation [[ -Order ] < Object >] [< CommonParameters >]","title":"Syntax"},{"location":"Functions/Submit-ChallengeValidation/#description","text":"This function encapsulates the authorization validation cycle for challenges in a given order. It takes care of publishing the challenge records according to the order's plugin configuration, notifying the ACME server to validate the records, and cleaning up the challenge records whether the validation succeeded or not. If everything is successful, the order object will have transitioned from the pending state to the ready state which indicates it is ready for finalization using Submit-OrderFinalize .","title":"Description"},{"location":"Functions/Submit-ChallengeValidation/#examples","text":"","title":"Examples"},{"location":"Functions/Submit-ChallengeValidation/#example-1-current-order","text":"Submit-ChallengeValidation Begin challenge validation on the current order.","title":"Example 1: Current Order"},{"location":"Functions/Submit-ChallengeValidation/#example-2-specific-order","text":"Get-PAOrder -Name myorder | Submit-ChallengeValidation Begin challenge validation on the specified order.","title":"Example 2: Specific Order"},{"location":"Functions/Submit-ChallengeValidation/#parameters","text":"","title":"Parameters"},{"location":"Functions/Submit-ChallengeValidation/#-order","text":"The ACME order to perform the validations against. The order object must be associated with the currently active ACME account. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Order"},{"location":"Functions/Submit-ChallengeValidation/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Submit-ChallengeValidation/#inputs","text":"","title":"Inputs"},{"location":"Functions/Submit-ChallengeValidation/#poshacmepaorder","text":"An order object.","title":"PoshACME.PAOrder"},{"location":"Functions/Submit-ChallengeValidation/#related-links","text":"New-PAOrder Submit-OrderFinalize","title":"Related Links"},{"location":"Functions/Submit-OrderFinalize/","text":"Submit-OrderFinalize \u00b6 Synopsis \u00b6 Finalize a certificate order Syntax \u00b6 Submit-OrderFinalize [[ -Order ] < Object >] [< CommonParameters >] Description \u00b6 An ACME order that has reached the ready state is ready to be finalized which involves sending the certificate request to the ACME server so it can sign the certificate and transition the order into the valid state. Examples \u00b6 Example 1: Current Order \u00b6 Submit-OrderFinalize Finalize the current order. Example 2: Specific Order \u00b6 Get-PAOrder example . com | Submit-OrderFinalize Finalize the specified order. Parameters \u00b6 -Order \u00b6 The ACME order to finalize. The order object must be associated with the currently active ACME account. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . Inputs \u00b6 PoshACME.PAOrder \u00b6 An order object. Related Links \u00b6 Get-PAOrder Submit-ChallengeValidation","title":"Submit-OrderFinalize"},{"location":"Functions/Submit-OrderFinalize/#submit-orderfinalize","text":"","title":"Submit-OrderFinalize"},{"location":"Functions/Submit-OrderFinalize/#synopsis","text":"Finalize a certificate order","title":"Synopsis"},{"location":"Functions/Submit-OrderFinalize/#syntax","text":"Submit-OrderFinalize [[ -Order ] < Object >] [< CommonParameters >]","title":"Syntax"},{"location":"Functions/Submit-OrderFinalize/#description","text":"An ACME order that has reached the ready state is ready to be finalized which involves sending the certificate request to the ACME server so it can sign the certificate and transition the order into the valid state.","title":"Description"},{"location":"Functions/Submit-OrderFinalize/#examples","text":"","title":"Examples"},{"location":"Functions/Submit-OrderFinalize/#example-1-current-order","text":"Submit-OrderFinalize Finalize the current order.","title":"Example 1: Current Order"},{"location":"Functions/Submit-OrderFinalize/#example-2-specific-order","text":"Get-PAOrder example . com | Submit-OrderFinalize Finalize the specified order.","title":"Example 2: Specific Order"},{"location":"Functions/Submit-OrderFinalize/#parameters","text":"","title":"Parameters"},{"location":"Functions/Submit-OrderFinalize/#-order","text":"The ACME order to finalize. The order object must be associated with the currently active ACME account. Type : Object Parameter Sets : (All) Aliases : Required : False Position : 1 Default value : None Accept pipeline input : True (ByValue) Accept wildcard characters : False","title":"-Order"},{"location":"Functions/Submit-OrderFinalize/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Submit-OrderFinalize/#inputs","text":"","title":"Inputs"},{"location":"Functions/Submit-OrderFinalize/#poshacmepaorder","text":"An order object.","title":"PoshACME.PAOrder"},{"location":"Functions/Submit-OrderFinalize/#related-links","text":"Get-PAOrder Submit-ChallengeValidation","title":"Related Links"},{"location":"Functions/Submit-Renewal/","text":"Submit-Renewal \u00b6 Synopsis \u00b6 Renew one or more certificates. Syntax \u00b6 Specific \u00b6 Submit-Renewal [[ -MainDomain ] < String >] [[ -Name ] < String >] [ -Force ] [ -NoSkipManualDns ] [ -PluginArgs < Hashtable >] [< CommonParameters >] AllOrders \u00b6 Submit-Renewal [ -AllOrders ] [ -Force ] [ -NoSkipManualDns ] [ -PluginArgs < Hashtable >] [< CommonParameters >] AllAccounts \u00b6 Submit-Renewal [ -AllAccounts ] [ -Force ] [ -NoSkipManualDns ] [ -PluginArgs < Hashtable >] [< CommonParameters >] Description \u00b6 Technically, a renewal is just a normal new certificate order using the same parameters as a previous order. This function allows you to easily request a new certificate for any existing order This function allows you to renew one more more previously complete orders as long as the renewal window has been reached and plugin configuration exists to automate the challenge validation. It will also pick up and attempt to continue pending or previously failed orders. You can choose to renew a specific order, set of orders, all orders for the current account, or all orders for all accounts. A PACertificate object is returned for every successfully renewed order. Examples \u00b6 Example 1: Renew Current \u00b6 Submit-Renewal Renew the current order on the current account. Example 2: Force Specific Order \u00b6 Submit-Renewal example . com -Force Renew the specified order on the current account even if it hasn't reached its suggested renewal window. Example 3: All Orders \u00b6 Submit-Renewal -AllOrders Renew all valid orders on the current account that have reached their suggested renewal window. Example 4: All Orders on All Accounts \u00b6 Submit-Renewal -AllAccounts Renew all valid orders on all valid accounts that have reached their suggested renewal window. Example 5: Update PluginArgs \u00b6 $pArgs = @{ ( Read-Host 'FakeDNS API Token' -AsSecureString ) } Submit-Renewal -PluginArgs $pArgs Renew the current order using updated plugin args that will also be saved for subsequent renewals. Parameters \u00b6 -MainDomain \u00b6 The primary domain associated with an order. This is the domain that goes in the certificate's subject. Type : String Parameter Sets : Specific Aliases : Required : False Position : 1 Default value : None Accept pipeline input : True (ByPropertyName, ByValue) Accept wildcard characters : False -Name \u00b6 The name of the ACME order. This can be useful to distinguish between two orders that have the same MainDomain. Type : String Parameter Sets : Specific Aliases : Required : False Position : 2 Default value : None Accept pipeline input : True (ByPropertyName) Accept wildcard characters : False -AllOrders \u00b6 If specified, renew all valid orders on the current account. Orders that have not reached the renewal window will be skipped unless -Force is used. Type : SwitchParameter Parameter Sets : AllOrders Aliases : Required : True Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -AllAccounts \u00b6 If specified, renew all valid orders on all valid accounts in this profile. Orders that have not reached the renewal window will be skipped unless -Force is used. Type : SwitchParameter Parameter Sets : AllAccounts Aliases : Required : True Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -Force \u00b6 If specified, an order that hasn't reached its renewal window will not throw an error and will not be skipped when using either of the -All parameters. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -NoSkipManualDns \u00b6 If specified, orders that utilize the Manual DNS plugin will not be skipped and user interaction may be required to complete the process. Otherwise, orders that utilize the Manual DNS plugin will be skipped. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False -PluginArgs \u00b6 A hashtable containing an updated set of plugin arguments to use with the renewal. So if a plugin has a MyText string and MyNumber integer parameter, you could specify them as @{MyText='text';MyNumber=1234} . Type : Hashtable Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . Outputs \u00b6 PoshACME.PACertificate \u00b6 A certificate object. Notes \u00b6 Certificate objects are only returned for orders that were actually renewed successfully. Any orders that have not reached the suggested renewal window are skipped unless -Force is specified. Related Links \u00b6 New-PACertificate Get-PAOrder","title":"Submit-Renewal"},{"location":"Functions/Submit-Renewal/#submit-renewal","text":"","title":"Submit-Renewal"},{"location":"Functions/Submit-Renewal/#synopsis","text":"Renew one or more certificates.","title":"Synopsis"},{"location":"Functions/Submit-Renewal/#syntax","text":"","title":"Syntax"},{"location":"Functions/Submit-Renewal/#specific","text":"Submit-Renewal [[ -MainDomain ] < String >] [[ -Name ] < String >] [ -Force ] [ -NoSkipManualDns ] [ -PluginArgs < Hashtable >] [< CommonParameters >]","title":"Specific"},{"location":"Functions/Submit-Renewal/#allorders","text":"Submit-Renewal [ -AllOrders ] [ -Force ] [ -NoSkipManualDns ] [ -PluginArgs < Hashtable >] [< CommonParameters >]","title":"AllOrders"},{"location":"Functions/Submit-Renewal/#allaccounts","text":"Submit-Renewal [ -AllAccounts ] [ -Force ] [ -NoSkipManualDns ] [ -PluginArgs < Hashtable >] [< CommonParameters >]","title":"AllAccounts"},{"location":"Functions/Submit-Renewal/#description","text":"Technically, a renewal is just a normal new certificate order using the same parameters as a previous order. This function allows you to easily request a new certificate for any existing order This function allows you to renew one more more previously complete orders as long as the renewal window has been reached and plugin configuration exists to automate the challenge validation. It will also pick up and attempt to continue pending or previously failed orders. You can choose to renew a specific order, set of orders, all orders for the current account, or all orders for all accounts. A PACertificate object is returned for every successfully renewed order.","title":"Description"},{"location":"Functions/Submit-Renewal/#examples","text":"","title":"Examples"},{"location":"Functions/Submit-Renewal/#example-1-renew-current","text":"Submit-Renewal Renew the current order on the current account.","title":"Example 1: Renew Current"},{"location":"Functions/Submit-Renewal/#example-2-force-specific-order","text":"Submit-Renewal example . com -Force Renew the specified order on the current account even if it hasn't reached its suggested renewal window.","title":"Example 2: Force Specific Order"},{"location":"Functions/Submit-Renewal/#example-3-all-orders","text":"Submit-Renewal -AllOrders Renew all valid orders on the current account that have reached their suggested renewal window.","title":"Example 3: All Orders"},{"location":"Functions/Submit-Renewal/#example-4-all-orders-on-all-accounts","text":"Submit-Renewal -AllAccounts Renew all valid orders on all valid accounts that have reached their suggested renewal window.","title":"Example 4: All Orders on All Accounts"},{"location":"Functions/Submit-Renewal/#example-5-update-pluginargs","text":"$pArgs = @{ ( Read-Host 'FakeDNS API Token' -AsSecureString ) } Submit-Renewal -PluginArgs $pArgs Renew the current order using updated plugin args that will also be saved for subsequent renewals.","title":"Example 5: Update PluginArgs"},{"location":"Functions/Submit-Renewal/#parameters","text":"","title":"Parameters"},{"location":"Functions/Submit-Renewal/#-maindomain","text":"The primary domain associated with an order. This is the domain that goes in the certificate's subject. Type : String Parameter Sets : Specific Aliases : Required : False Position : 1 Default value : None Accept pipeline input : True (ByPropertyName, ByValue) Accept wildcard characters : False","title":"-MainDomain"},{"location":"Functions/Submit-Renewal/#-name","text":"The name of the ACME order. This can be useful to distinguish between two orders that have the same MainDomain. Type : String Parameter Sets : Specific Aliases : Required : False Position : 2 Default value : None Accept pipeline input : True (ByPropertyName) Accept wildcard characters : False","title":"-Name"},{"location":"Functions/Submit-Renewal/#-allorders","text":"If specified, renew all valid orders on the current account. Orders that have not reached the renewal window will be skipped unless -Force is used. Type : SwitchParameter Parameter Sets : AllOrders Aliases : Required : True Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-AllOrders"},{"location":"Functions/Submit-Renewal/#-allaccounts","text":"If specified, renew all valid orders on all valid accounts in this profile. Orders that have not reached the renewal window will be skipped unless -Force is used. Type : SwitchParameter Parameter Sets : AllAccounts Aliases : Required : True Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-AllAccounts"},{"location":"Functions/Submit-Renewal/#-force","text":"If specified, an order that hasn't reached its renewal window will not throw an error and will not be skipped when using either of the -All parameters. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-Force"},{"location":"Functions/Submit-Renewal/#-noskipmanualdns","text":"If specified, orders that utilize the Manual DNS plugin will not be skipped and user interaction may be required to complete the process. Otherwise, orders that utilize the Manual DNS plugin will be skipped. Type : SwitchParameter Parameter Sets : (All) Aliases : Required : False Position : Named Default value : False Accept pipeline input : False Accept wildcard characters : False","title":"-NoSkipManualDns"},{"location":"Functions/Submit-Renewal/#-pluginargs","text":"A hashtable containing an updated set of plugin arguments to use with the renewal. So if a plugin has a MyText string and MyNumber integer parameter, you could specify them as @{MyText='text';MyNumber=1234} . Type : Hashtable Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-PluginArgs"},{"location":"Functions/Submit-Renewal/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Submit-Renewal/#outputs","text":"","title":"Outputs"},{"location":"Functions/Submit-Renewal/#poshacmepacertificate","text":"A certificate object.","title":"PoshACME.PACertificate"},{"location":"Functions/Submit-Renewal/#notes","text":"Certificate objects are only returned for orders that were actually renewed successfully. Any orders that have not reached the suggested renewal window are skipped unless -Force is specified.","title":"Notes"},{"location":"Functions/Submit-Renewal/#related-links","text":"New-PACertificate Get-PAOrder","title":"Related Links"},{"location":"Functions/Unpublish-Challenge/","text":"Unpublish-Challenge \u00b6 Synopsis \u00b6 Unpublish a challenge using the specified plugin. Syntax \u00b6 Unpublish-Challenge [ -Domain ] < String > [ -Account ] < Object > [ -Token ] < String > [ -Plugin ] < String > [[ -PluginArgs ] < Hashtable >] [ -DnsAlias < String >] [< CommonParameters >] Description \u00b6 Based on the type of validation plugin specified, this function will unpublish either a DNS TXT record or an HTTP challenge file for the given domain and token value that satisfies the dns-01 or http-01 challenge specification. Depending on the plugin, calling Save-Challenge may be required to commit changes made by Unpublish-Challenge . If multiple challenges are being unpublished, make all Unpublish-Challenge calls first. Then, Save-Challenge once to commit them all. Examples \u00b6 Example 1: Unpublish a Challenge \u00b6 $splat = @{ Domain = 'example.com' Account = ( Get-PAAccount ) Token = 'fake-token' Plugin = 'FakeDNS' PluginArgs = @{ FDToken = ( Read-Host 'FakeDNS API Token' -AsSecureString ) } } Unpublish-Challenge @splat # if plugin requires saving Save-Challenge -Plugin $splat . Plugin -PluginArgs $splat . PluginArgs Unpublish a single DNS challenge. Example 2: DNS Order Challenges \u00b6 $splat = @{ Account = ( Get-PAAccount ) Plugin = 'FakeDNS' PluginArgs = @{ FDToken = ( Read-Host 'FakeDNS API Token' -AsSecureString ) } } Get-PAOrder | Get-PAAuthorization | ForEach -Object { Unpublish-Challenge -Domain $_ . DNSId -Token $_ . DNS01Token @splat } # if plugin requires saving Save-Challenge -Plugin $splat . Plugin -PluginArgs $splat . PluginArgs Unpublish DNS challenges for all authorizations in the current order. Example 3: HTTP Order Challenges \u00b6 $splat = @{ Account = ( Get-PAAccount ) Plugin = 'WebRoot' PluginArgs = @{ WRPath = 'C:\\inetpub\\wwwroot' } } Get-PAOrder | Get-PAAuthorization | ForEach -Object { Unpublish-Challenge -Domain $_ . DNSId -Token $_ . HTTP01Token @splat } # if plugin requires saving Save-Challenge -Plugin $splat . Plugin -PluginArgs $splat . PluginArgs Unpublish HTTP challenges for all authorizations in the current order. Parameters \u00b6 -Domain \u00b6 The domain name that the challenge will be unpublished for. Wildcard domains should have the \"*.\" removed and can only be used with DNS based validation plugins. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False -Account \u00b6 The account object associated with the order that required the challenge. Type : Object Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False -Token \u00b6 The token value from the appropriate challenge in an authorization object that matches the plugin type. Type : String Parameter Sets : (All) Aliases : Required : True Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False -Plugin \u00b6 The name of the validation plugin to use. Use Get-PAPlugin to display a list of available plugins. Type : String Parameter Sets : (All) Aliases : Required : True Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False -PluginArgs \u00b6 A hashtable containing the plugin arguments to use with the specified plugin. So if a plugin has a -MyText string and -MyNumber integer parameter, you could specify them as @{MyText='text';MyNumber=1234} . Type : Hashtable Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : None Accept pipeline input : False Accept wildcard characters : False -DnsAlias \u00b6 When using DNS Alias support with DNS validation plugins, the alias domain that the TXT record will be removed from. This should be the complete FQDN including the _acme-challenge. prefix if necessary. This field is ignored for non-DNS validation plugins. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False CommonParameters \u00b6 This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters . Related Links \u00b6 Publish-Challenge Save-Challenge Get-PAPlugin","title":"Unpublish-Challenge"},{"location":"Functions/Unpublish-Challenge/#unpublish-challenge","text":"","title":"Unpublish-Challenge"},{"location":"Functions/Unpublish-Challenge/#synopsis","text":"Unpublish a challenge using the specified plugin.","title":"Synopsis"},{"location":"Functions/Unpublish-Challenge/#syntax","text":"Unpublish-Challenge [ -Domain ] < String > [ -Account ] < Object > [ -Token ] < String > [ -Plugin ] < String > [[ -PluginArgs ] < Hashtable >] [ -DnsAlias < String >] [< CommonParameters >]","title":"Syntax"},{"location":"Functions/Unpublish-Challenge/#description","text":"Based on the type of validation plugin specified, this function will unpublish either a DNS TXT record or an HTTP challenge file for the given domain and token value that satisfies the dns-01 or http-01 challenge specification. Depending on the plugin, calling Save-Challenge may be required to commit changes made by Unpublish-Challenge . If multiple challenges are being unpublished, make all Unpublish-Challenge calls first. Then, Save-Challenge once to commit them all.","title":"Description"},{"location":"Functions/Unpublish-Challenge/#examples","text":"","title":"Examples"},{"location":"Functions/Unpublish-Challenge/#example-1-unpublish-a-challenge","text":"$splat = @{ Domain = 'example.com' Account = ( Get-PAAccount ) Token = 'fake-token' Plugin = 'FakeDNS' PluginArgs = @{ FDToken = ( Read-Host 'FakeDNS API Token' -AsSecureString ) } } Unpublish-Challenge @splat # if plugin requires saving Save-Challenge -Plugin $splat . Plugin -PluginArgs $splat . PluginArgs Unpublish a single DNS challenge.","title":"Example 1: Unpublish a Challenge"},{"location":"Functions/Unpublish-Challenge/#example-2-dns-order-challenges","text":"$splat = @{ Account = ( Get-PAAccount ) Plugin = 'FakeDNS' PluginArgs = @{ FDToken = ( Read-Host 'FakeDNS API Token' -AsSecureString ) } } Get-PAOrder | Get-PAAuthorization | ForEach -Object { Unpublish-Challenge -Domain $_ . DNSId -Token $_ . DNS01Token @splat } # if plugin requires saving Save-Challenge -Plugin $splat . Plugin -PluginArgs $splat . PluginArgs Unpublish DNS challenges for all authorizations in the current order.","title":"Example 2: DNS Order Challenges"},{"location":"Functions/Unpublish-Challenge/#example-3-http-order-challenges","text":"$splat = @{ Account = ( Get-PAAccount ) Plugin = 'WebRoot' PluginArgs = @{ WRPath = 'C:\\inetpub\\wwwroot' } } Get-PAOrder | Get-PAAuthorization | ForEach -Object { Unpublish-Challenge -Domain $_ . DNSId -Token $_ . HTTP01Token @splat } # if plugin requires saving Save-Challenge -Plugin $splat . Plugin -PluginArgs $splat . PluginArgs Unpublish HTTP challenges for all authorizations in the current order.","title":"Example 3: HTTP Order Challenges"},{"location":"Functions/Unpublish-Challenge/#parameters","text":"","title":"Parameters"},{"location":"Functions/Unpublish-Challenge/#-domain","text":"The domain name that the challenge will be unpublished for. Wildcard domains should have the \"*.\" removed and can only be used with DNS based validation plugins. Type : String Parameter Sets : (All) Aliases : Required : True Position : 1 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Domain"},{"location":"Functions/Unpublish-Challenge/#-account","text":"The account object associated with the order that required the challenge. Type : Object Parameter Sets : (All) Aliases : Required : True Position : 2 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Account"},{"location":"Functions/Unpublish-Challenge/#-token","text":"The token value from the appropriate challenge in an authorization object that matches the plugin type. Type : String Parameter Sets : (All) Aliases : Required : True Position : 3 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Token"},{"location":"Functions/Unpublish-Challenge/#-plugin","text":"The name of the validation plugin to use. Use Get-PAPlugin to display a list of available plugins. Type : String Parameter Sets : (All) Aliases : Required : True Position : 4 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-Plugin"},{"location":"Functions/Unpublish-Challenge/#-pluginargs","text":"A hashtable containing the plugin arguments to use with the specified plugin. So if a plugin has a -MyText string and -MyNumber integer parameter, you could specify them as @{MyText='text';MyNumber=1234} . Type : Hashtable Parameter Sets : (All) Aliases : Required : False Position : 5 Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-PluginArgs"},{"location":"Functions/Unpublish-Challenge/#-dnsalias","text":"When using DNS Alias support with DNS validation plugins, the alias domain that the TXT record will be removed from. This should be the complete FQDN including the _acme-challenge. prefix if necessary. This field is ignored for non-DNS validation plugins. Type : String Parameter Sets : (All) Aliases : Required : False Position : Named Default value : None Accept pipeline input : False Accept wildcard characters : False","title":"-DnsAlias"},{"location":"Functions/Unpublish-Challenge/#commonparameters","text":"This cmdlet supports the common parameters: -Debug, -ErrorAction, -ErrorVariable, -InformationAction, -InformationVariable, -OutVariable, -OutBuffer, -PipelineVariable, -Verbose, -WarningAction, and -WarningVariable. For more information, see about_CommonParameters .","title":"CommonParameters"},{"location":"Functions/Unpublish-Challenge/#related-links","text":"Publish-Challenge Save-Challenge Get-PAPlugin","title":"Related Links"},{"location":"Guides/","text":"Guides and Deep Dives \u00b6 This section contains a variety of guides that explain some lesser known or more complicated features of Posh-ACME. It may also contain info about the general ACME ecosystem.","title":"Guides and Deep Dives"},{"location":"Guides/#guides-and-deep-dives","text":"This section contains a variety of guides that explain some lesser known or more complicated features of Posh-ACME. It may also contain info about the general ACME ecosystem.","title":"Guides and Deep Dives"},{"location":"Guides/ACME-CA-Comparison/","text":"ACME CA Comparison \u00b6 As more public certificate authorities hop on the ACME bandwagon, it is important to understand the details and limitations of their implementations. This page will attempt to keep track of that data. ACME CA Info \u00b6 Let's Encrypt BuyPass ZeroSSL SSL.com Google Free SAN Limit 100 names 5 names 100+ names 1 name + www 100+ names Free Wildcards Free Lifetime 90 days 180 days 90 days 90 days 1*-90 days IDN Support Chain Info Chains Roots \"Go SSL\" RSA Iss1 / Iss2 / Root ECC Iss1 / Iss2 / Root RSA Iss / Root ECC Iss / Root Iss / Root Rate Limits Policy Policy ?? ?? Policy Notes Service Status Staging Environment Test Environment See Notes below See Warning below Staging Endpoint Quick Start Wildcard names (if supported) count towards Subject Alternative Name (SAN) limits. 1 name + www means one domain name plus its www name variant such as example.com and www.example.com Using Let's Encrypt's ECDSA-only chain currently requires your ACME account be added to an allow-list . Otherwise, your ECDSA cert will be signed by the RSA chain. ZeroSSL supports a custom REST API that some clients use instead of pure ACME. SSL.com Warning: If your SSL.com account has funds available, you will be charged for a paid 1-year certificate instead of a free 90-day certificate. There is no known way to request only a free certificate. Google certs have a 90 day lifetime by default but can be requested for shorter lifetimes down to 1 day if supported by your ACME client. The recommended minimum lifetime is 3 days. ACME Spec and Feature Support \u00b6 Some of the features in the ACME protocol are optional. Others are mandatory but not yet supported by some implementations. Here is the status of those various features in each CA. Note Multi-perspective validation is not part of the ACME protocol but is an important security feature for the integrity of domain validation. SXG Support is also not part of the ACME protocol but is a notable feature among free ACME CAs. Feature Let's Encrypt BuyPass ZeroSSL SSL.com Google (EAB) External Account Binding n/a n/a Required* Required Required* Multi-perspective Validation Account Key Rollover * Account Deactivation Account Orders ( Planned ) * IP Address Identifiers ( Planned ) * Pre-Authorization Authorization Deactivation Cert Revocation (Only using account key) Challenge Retrying (Client must request retry) (Client must request retry) Variable Cert Lifetime SXG Support * = Feature supported = Feature unsupported = Feature partially supported. = Support unknown or untested SSL.com throws \"Missing Authentication Token\" errors when making some calls against Account endpoints which is why those features are labeled Unsupported. SSL.com requires an email address in the ACME account contact field, but doesn't enforce it on creation time. Instead, it throws an \"badCSR\" error when you try to finalize an order from an account with an empty address. ZeroSSL's EAB credentials can only be used once to establish a new ACME account. Creating additional accounts requires generating new EAB credentials. ZeroSSL does support IP address based certificates, but not via the ACME protocol. Google's EAB credentials can only be used once to establish a new ACME account and expire after 7 days if not used. Creating additional accounts requires generating new EAB credentials. For Google SXG Certificates, you must use a different ACME directory endpoint. https://dv-sxg.acme-v02.api.pki.goog/directory","title":"ACME CA Comparison"},{"location":"Guides/ACME-CA-Comparison/#acme-ca-comparison","text":"As more public certificate authorities hop on the ACME bandwagon, it is important to understand the details and limitations of their implementations. This page will attempt to keep track of that data.","title":"ACME CA Comparison"},{"location":"Guides/ACME-CA-Comparison/#acme-ca-info","text":"Let's Encrypt BuyPass ZeroSSL SSL.com Google Free SAN Limit 100 names 5 names 100+ names 1 name + www 100+ names Free Wildcards Free Lifetime 90 days 180 days 90 days 90 days 1*-90 days IDN Support Chain Info Chains Roots \"Go SSL\" RSA Iss1 / Iss2 / Root ECC Iss1 / Iss2 / Root RSA Iss / Root ECC Iss / Root Iss / Root Rate Limits Policy Policy ?? ?? Policy Notes Service Status Staging Environment Test Environment See Notes below See Warning below Staging Endpoint Quick Start Wildcard names (if supported) count towards Subject Alternative Name (SAN) limits. 1 name + www means one domain name plus its www name variant such as example.com and www.example.com Using Let's Encrypt's ECDSA-only chain currently requires your ACME account be added to an allow-list . Otherwise, your ECDSA cert will be signed by the RSA chain. ZeroSSL supports a custom REST API that some clients use instead of pure ACME. SSL.com Warning: If your SSL.com account has funds available, you will be charged for a paid 1-year certificate instead of a free 90-day certificate. There is no known way to request only a free certificate. Google certs have a 90 day lifetime by default but can be requested for shorter lifetimes down to 1 day if supported by your ACME client. The recommended minimum lifetime is 3 days.","title":"ACME CA Info"},{"location":"Guides/ACME-CA-Comparison/#acme-spec-and-feature-support","text":"Some of the features in the ACME protocol are optional. Others are mandatory but not yet supported by some implementations. Here is the status of those various features in each CA. Note Multi-perspective validation is not part of the ACME protocol but is an important security feature for the integrity of domain validation. SXG Support is also not part of the ACME protocol but is a notable feature among free ACME CAs. Feature Let's Encrypt BuyPass ZeroSSL SSL.com Google (EAB) External Account Binding n/a n/a Required* Required Required* Multi-perspective Validation Account Key Rollover * Account Deactivation Account Orders ( Planned ) * IP Address Identifiers ( Planned ) * Pre-Authorization Authorization Deactivation Cert Revocation (Only using account key) Challenge Retrying (Client must request retry) (Client must request retry) Variable Cert Lifetime SXG Support * = Feature supported = Feature unsupported = Feature partially supported. = Support unknown or untested SSL.com throws \"Missing Authentication Token\" errors when making some calls against Account endpoints which is why those features are labeled Unsupported. SSL.com requires an email address in the ACME account contact field, but doesn't enforce it on creation time. Instead, it throws an \"badCSR\" error when you try to finalize an order from an account with an empty address. ZeroSSL's EAB credentials can only be used once to establish a new ACME account. Creating additional accounts requires generating new EAB credentials. ZeroSSL does support IP address based certificates, but not via the ACME protocol. Google's EAB credentials can only be used once to establish a new ACME account and expire after 7 days if not used. Creating additional accounts requires generating new EAB credentials. For Google SXG Certificates, you must use a different ACME directory endpoint. https://dv-sxg.acme-v02.api.pki.goog/directory","title":"ACME Spec and Feature Support"},{"location":"Guides/Custom-Challenge-Validation/","text":"Custom Challenge Validation \u00b6 Intro \u00b6 The beauty of the ACME protocol is that it's an open standard . And while Posh-ACME primarily targets users who want to avoid understanding all of the protocol complexity, it also exposes functions that allow you to do things a bit closer to the protocol level than just running New-PACertificate and Submit-Renewal . This can enable more advanced automation scenarios such as supporting challenge types that the module doesn't directly support yet or responding to authorization challenges in a way not directly supported by existing plugins. This guide will walk through the ACME certificate request process and demonstrate how to manage the validation of authorization challenges. At a high level, the ACME conversation looks more or less like this: Create an account Create a certificate order Prove control of the \"identifiers\" (DNS names or IP addresses) in the requested cert by answering challenges. Finalize the order by submitting an certificate request (CSR) Download the signed certificate and chain Warning IP Address identifiers ( RFC 8738 ) are supported by Posh-ACME. But they're not yet supported by any ACME-compatible public certificate authorities that I'm aware of. If you want to test them, you'll have to use Pebble . If you're curious about what's going on under the hood during this guide, add -Verbose to your commands or run $VerbosePreference = 'Continue' . If you really want to get deep, you can also turn on debug logging by running $DebugPreference = 'Continue' which will also display the raw JSON requests and responses. The defaults for both of those preferences are SilentlyContinue if you want to change them back later. Server Selection \u00b6 While testing code, you should not use the production Let's Encrypt server. The staging server is the easiest alternative, but still has some rate limits that you can run afoul of if your code goes crazy. There is also Pebble which is a tiny ACME server you can self-host and is built for testing code against. For simplicity, we'll select the Let's Encrypt staging server. Set-PAServer LE_STAGE Account Setup \u00b6 Requesting a certificate always starts with creating an account on the ACME server which is basically just a public/private key pair that is used to sign the protocol messages you send to the server along with some metadata like one or more email addresses to send expiration notifications to. If you've been previously using the module against the staging server, you likely already have an account. If so, you can either skip this section or create a second account which is also supported. New-PAAccount -AcceptTOS -Contact 'me@example.com' Warning If you're using Pebble as your ACME server, it doesn't save accounts or order details when you shut it down. So you'll have to re-create accounts and orders if you exit and restart it. Create an Order \u00b6 The only required parameter for a new order is the set of names you want included in the certificate. Optional parameters include things like -KeyLength to change the private key type/size, -Install which tells Posh-ACME to automatically store the signed cert in the Windows certificate store (requires local admin) , and -PfxPass which lets you set the decryption password for the certificate PFX file. If we were using plugins, this is also where you could set which plugin to use and the parameters associated with it. In this example, we'll create a typical wildcard cert that contains a root domain and the wildcard version of it. Keep in mind that wildcard names require using DNS challenge validation . So if you're testing HTTP challenge validation, either leave that one out or add a different non-wildcard name. $domains = 'example.com' , '*.example.com' New-PAOrder $domains Assuming you didn't use names that were previously validated on this account, you should get output that looks something like this where the status is pending . If the status is ready , create an order with different names that haven't been previously validated. Name MainDomain status KeyLength SANs CertExpires Plugin ---- ---------- ------ --------- ---- ----------- ------ example.com example.com pending 2048 {*.example.com} {Manual} Authorizations and Challenges \u00b6 The distinction between an order, authorization, and challenge can be confusing if you're not familiar with the ACME protocol. So let's clarify first. An order is a request for a certificate that contains one or more \"identifiers\" (a name like example.com ). Each identifier in an order has an authorization object associated with it that indicates whether the account that created the order is authorized to get a cert for that name. New authorizations start in a pending state awaiting the client to complete a challenge associated with that authorization. Each authorization can have multiple different challenges (DNS, HTTP, ALPN, etc) that indicate the different methods the ACME server will accept to prove ownership of the name. You only need to complete one of the offered challenges in order to satisfy an authorization. Note Different types of identifiers may only allow a subset of challenge types. For instance, wildcard DNS names can only be validated by a DNS challenge and IP addresses can only be validated by HTTP or ALPN challenges. Get-PAAuthorization can be used with the output of Get-PAOrder to retrieve the current set of authorizations (and their challenges) for an order. So lets put those details into a variable and display them. $auths = Get-PAOrder | Get-PAAuthorization $auths This should give an output that looks something like this. The first status column is the overall status of the authorization. The last two columns are the status of the dns-01 and http-01 challenges. Normally the challenge specific details are buried a bit deeper in a challenges property, but Posh-ACME tries to help by surfacing the commonly used challenge details on the root object. Notice also how the wildcard name has no HTTP01Status because it was not offered as a valid challenge type for that identifier. fqdn status Expires DNS01Status HTTP01Status ---- ------ ------- ----------- ------------ example.com pending 12/24/2020 7:14:33 PM pending pending *.example.com pending 12/24/2020 7:14:33 PM pending Let's take a look at the full details of one of the authorization objects by running $auths[0] | Format-List . You should get an output like this: identifier : @{type=dns; value=example.com} status : pending expires : 2020-12-25T16:52:23Z challenges : {@{type=dns-01; status=pending; url=https://acme-staging-v02.api.letsencrypt.org/acme/challenge/<AUTH_ID>/<DNS_CHAL_ID>; token=<DNS_TOKEN>}, @{type=http-01; status=pending; url=https://acme-staging-v02.api.letsencrypt.org/acme/challenge/<AUTH_ID>/<HTTP_CHAL_ID>; token=<HTTP_TOKEN>}, @{type=tls-alpn-01; status=pending; url=https://acme-staging-v02.api.letsencrypt.org/acme/challenge/<AUTH_ID>/<ALPN_CHAL_ID>; token=<ALPN_TOKEN>}} DNSId : example.com fqdn : example.com location : https://acme-staging-v02.api.letsencrypt.org/acme/authz/<AUTH_ID> DNS01Status : pending DNS01Url : https://acme-staging-v02.api.letsencrypt.org/acme/challenge/<AUTH_ID>/<DNS_CHAL_ID> DNS01Token : <DNS_TOKEN> HTTP01Status : pending HTTP01Url : https://acme-staging-v02.api.letsencrypt.org/acme/challenge/<AUTH_ID>/<HTTP_CHAL_ID> HTTP01Token : <HTTP_TOKEN> For this identifier, the ACME server has offered all three challenge types: http-01 , dns-01 , and tls-alpn-01 . In addition to the type, each challenge contains a status , url and token property. For HTTP and DNS challenges, these can also be read from the root authorization object using the HTTP01xxx and DNS01xxx properties. We'll go over how to use the tokens in the next couple sections about publishing challenges. Publishing an HTTP Challenge \u00b6 For an HTTP challenge, the ACME server must be able send an HTTP GET request to a particular URL on port 80 and receive a key authorization value which is based on the token value in the challenge and the public key thumbprint of your account key. You can build the URL using the following template: $url = 'http://{0}/.well-known/acme-challenge/{1}' -f $auths [ 0 ]. DNSId , $auths [ 0 ]. HTTP01Token Note Most ACME servers will follow HTTP 3xx redirect responses, but the initial request will always be non-TLS to port 80. So you must not block port 80 on your web server if you want to use HTTP challenges. The key authorization can be generated using Get-KeyAuthorization like this. $keyauth = Get-KeyAuthorization $auths [ 0 ]. HTTP01Token Now it's up to you to setup your web server so it responds with the key authorization value when the URL is queried from the Internet. If it's only queryable from your internal LAN, the challenge validation will fail. Note If you're using PowerShell functions to create the challenge files, make sure to specify ASCII/ANSI file encoding. Line endings shouldn't matter, but the encoding does in my testing. So if you're using Out-File , add -Encoding ascii . Publishing a DNS Challenge \u00b6 For a DNS challenge, the ACME server must be able send an TXT record query for a particular record name and receive a key authorization value in the response which is similar to the value it wants for an HTTP challenge. You can build the record name using the following template: $recName = '_acme-challenge.{0}' -f $auths [ 1 ]. DNSId The key authorization can be generated using Get-KeyAuthorization like this. Note the extra -ForDNS parameter compared to the HTTP challenge and the reference to DNS01Token instead of HTTP01Token . Each challenge type within an authorization has a unique token value. $keyauth = Get-KeyAuthorization $auths [ 1 ]. DNS01Token -ForDNS The astute reader may have realized that in our example, this means the name of the TXT record would be the same for both identifiers, example.com and *.example.com . They both translate to _acme-challenge.example.com . This tends to confuse people at first, but it's really no different than having multiple A records pointing to different IPs for a website. The ACME validation server is smart enough to check all of the returned results and find the one it cares about. Now it's up to you to publish the record on your DNS server that is queryable from the Internet. Depending on your DNS provider and its replication topology, it may take anywhere from seconds to minutes for the records you create to be queryable from the Internet. Make sure you either know how long it's supposed to take and wait that long before proceeding, or query your authoritative external nameservers directly until they return the expected results. Warning In DNS providers that use anycast even if you successfully query the nameserver for your record from your location, it may still fail from other locations in the world due to propagation delays. Some providers have an API you can query to know when it is fully propagated. Others don't and you just have to wait longer. Note ACME validation servers will also follow CNAME records to validate challenges. This can be useful if your primary DNS server has no API or the security posture of your organization doesn't allow an automated process such as an ACME client to have write access to the zone you need to create TXT records within. If you know this will be the case, you can create a permanent CNAME record for the _acme-challenge.<FQDN> name that points to another FQDN somewhere else. Then write your TXT record to that other target and as long as that zone is still Internet-facing, the validation will succeed. Publishing a TLS-ALPN Challenge \u00b6 At the time of this writing, I don't know enough about ALPN to authoritatively write a section on how to use it. But I know it's dependent on the web server software you're using. Here is Let's Encrypt's documentation on the subject. Notify the ACME Server \u00b6 Now that you've published all of your key validations for all of your challenges, you're ready to ask the ACME server to check them. The requires the url property from the challenge you published which for HTTP/DNS challenges can also be read from HTTP01Url or DNS01Url on the root authorization object. Use the Send-ChallengeAck function like this. # if all of your challenges were published using the same challenge type such as HTTP $auths . HTTP01Url | Send-ChallengeAck # if you published challenges of different types, make sure to use the specific URLs associated with them $auths [ 0 ]. HTTP01Url | Send-ChallengeAck $auths [ 1 ]. DNS01Url | Send-ChallengeAck The challenges are usually validated quickly. But there may be a delay if the ACME server is overloaded. You can poll the status of your authorizations by re-running Get-PAOrder | Get-PAAuthorization . Eventually, the status for each one will either be \"valid\" or \"invalid\". Good output should look something like this. Notice how the overall status for each challenge is valid while the individual challenge status is only valid for the specific challenge types we published. fqdn status Expires DNS01Status HTTP01Status ---- ------ ------- ----------- ------------ example.com valid 12/24/2020 7:14:33 PM valid *.example.com valid 12/24/2020 7:14:33 PM valid Note Some ACME CAs other than Let's Encrypt support the ability to re-validate authorizations that previously failed validation. In these cases, the status of those authorizations will remain pending instead of becoming invalid . Some CAs may periodically retry validation on their own. Others require you to run Send-ChallengeAck again to re-request validation. Finishing Up \u00b6 Now that you have all of your identifiers authorized, your order status should now be \"ready\" which you can check with Get-PAOrder -Refresh . It should look something like this. Name MainDomain status KeyLength SANs CertExpires Plugin ---- ---------- ------ --------- ---- ----------- ------ example.com example.com ready 2048 {*.example.com} {Manual} The next step is \"finalization\" in which you send a the actual x509 certificate request (CSR) to the ACME server. Run the following: Submit-OrderFinalize If you run Get-PAOrder -Refresh again, your order status should now be valid which means you're ready to download the final signed certificate. Run the following to let Posh-ACME take care of that and build the various combinations of PEM/PFX files. Complete-PAOrder This will also output the final certificate details that should look something like this. Subject NotAfter KeyLength Thumbprint AllSANs ------- -------- --------- ---------- ------- CN=example.com 3/15/2021 4:37:37 PM 2048 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX {example.com, *.example.com} It is also the same output you get from Get-PACertificate . Run Get-PACertificate | Format-List to get a full list of cert properties including the filesystem paths where the files are stored. Debugging Challenge Failures \u00b6 If for some reason one or more of your challenge validations failed, you can retrieve the error details from the ACME server like this. ( Get-PAOrder | Get-PAAuthorization ). challenges . error | Format-List Revoking Authorizations \u00b6 Let's Encrypt and other ACME CAs will generally cache authorizations associated with an account for a period of time. Let's Encrypt caches them for around 30 days which means that if you request another cert in that timeframe with an identifier/name that you've already authorized, the authorization objects won't need to be re-validated. Their status will be immediately valid. This can be annoying if you're trying to test your challenge validation automation. However, you can revoke your existing authorizations for a given order like this: # NOTE: Without -Force, there will be a confirmation prompt for each name being revoked. Get-PAorder | Revoke-PAAuthorization -Force This process does not revoke the certificate . It only revokes the authorizations so that you need to re-validate those names when you request a new certificate that contains them. Renewals \u00b6 The concept of a renewal doesn't actually exist in the ACME protocol. What most clients call a renewal is just a new order with the same parameters as last time. So the only thing extra you need to deal with is knowing when to renew. When you successfully complete a certificate order, Posh-ACME will attach a RenewAfter property to the order object which you can use to calculate whether it's time to renew or not. The property is an ISO 8601 date/time string which can be parsed and checked with DateTimeOffset like this. $renewAfter = [DateTimeOffset] :: Parse (( Get-PAOrder ). RenewAfter ) if ( [DateTimeOffset] :: Now -gt $renewAfter ) { # time to renew } Note The RenewAfter value is just a suggestion based on the lifetime of the certificate. Technically, you can renew whenever you want. But if you renew the same certificate too often, you might run into rate limits with your CA.","title":"(Advanced) Custom Challenge Validation"},{"location":"Guides/Custom-Challenge-Validation/#custom-challenge-validation","text":"","title":"Custom Challenge Validation"},{"location":"Guides/Custom-Challenge-Validation/#intro","text":"The beauty of the ACME protocol is that it's an open standard . And while Posh-ACME primarily targets users who want to avoid understanding all of the protocol complexity, it also exposes functions that allow you to do things a bit closer to the protocol level than just running New-PACertificate and Submit-Renewal . This can enable more advanced automation scenarios such as supporting challenge types that the module doesn't directly support yet or responding to authorization challenges in a way not directly supported by existing plugins. This guide will walk through the ACME certificate request process and demonstrate how to manage the validation of authorization challenges. At a high level, the ACME conversation looks more or less like this: Create an account Create a certificate order Prove control of the \"identifiers\" (DNS names or IP addresses) in the requested cert by answering challenges. Finalize the order by submitting an certificate request (CSR) Download the signed certificate and chain Warning IP Address identifiers ( RFC 8738 ) are supported by Posh-ACME. But they're not yet supported by any ACME-compatible public certificate authorities that I'm aware of. If you want to test them, you'll have to use Pebble . If you're curious about what's going on under the hood during this guide, add -Verbose to your commands or run $VerbosePreference = 'Continue' . If you really want to get deep, you can also turn on debug logging by running $DebugPreference = 'Continue' which will also display the raw JSON requests and responses. The defaults for both of those preferences are SilentlyContinue if you want to change them back later.","title":"Intro"},{"location":"Guides/Custom-Challenge-Validation/#server-selection","text":"While testing code, you should not use the production Let's Encrypt server. The staging server is the easiest alternative, but still has some rate limits that you can run afoul of if your code goes crazy. There is also Pebble which is a tiny ACME server you can self-host and is built for testing code against. For simplicity, we'll select the Let's Encrypt staging server. Set-PAServer LE_STAGE","title":"Server Selection"},{"location":"Guides/Custom-Challenge-Validation/#account-setup","text":"Requesting a certificate always starts with creating an account on the ACME server which is basically just a public/private key pair that is used to sign the protocol messages you send to the server along with some metadata like one or more email addresses to send expiration notifications to. If you've been previously using the module against the staging server, you likely already have an account. If so, you can either skip this section or create a second account which is also supported. New-PAAccount -AcceptTOS -Contact 'me@example.com' Warning If you're using Pebble as your ACME server, it doesn't save accounts or order details when you shut it down. So you'll have to re-create accounts and orders if you exit and restart it.","title":"Account Setup"},{"location":"Guides/Custom-Challenge-Validation/#create-an-order","text":"The only required parameter for a new order is the set of names you want included in the certificate. Optional parameters include things like -KeyLength to change the private key type/size, -Install which tells Posh-ACME to automatically store the signed cert in the Windows certificate store (requires local admin) , and -PfxPass which lets you set the decryption password for the certificate PFX file. If we were using plugins, this is also where you could set which plugin to use and the parameters associated with it. In this example, we'll create a typical wildcard cert that contains a root domain and the wildcard version of it. Keep in mind that wildcard names require using DNS challenge validation . So if you're testing HTTP challenge validation, either leave that one out or add a different non-wildcard name. $domains = 'example.com' , '*.example.com' New-PAOrder $domains Assuming you didn't use names that were previously validated on this account, you should get output that looks something like this where the status is pending . If the status is ready , create an order with different names that haven't been previously validated. Name MainDomain status KeyLength SANs CertExpires Plugin ---- ---------- ------ --------- ---- ----------- ------ example.com example.com pending 2048 {*.example.com} {Manual}","title":"Create an Order"},{"location":"Guides/Custom-Challenge-Validation/#authorizations-and-challenges","text":"The distinction between an order, authorization, and challenge can be confusing if you're not familiar with the ACME protocol. So let's clarify first. An order is a request for a certificate that contains one or more \"identifiers\" (a name like example.com ). Each identifier in an order has an authorization object associated with it that indicates whether the account that created the order is authorized to get a cert for that name. New authorizations start in a pending state awaiting the client to complete a challenge associated with that authorization. Each authorization can have multiple different challenges (DNS, HTTP, ALPN, etc) that indicate the different methods the ACME server will accept to prove ownership of the name. You only need to complete one of the offered challenges in order to satisfy an authorization. Note Different types of identifiers may only allow a subset of challenge types. For instance, wildcard DNS names can only be validated by a DNS challenge and IP addresses can only be validated by HTTP or ALPN challenges. Get-PAAuthorization can be used with the output of Get-PAOrder to retrieve the current set of authorizations (and their challenges) for an order. So lets put those details into a variable and display them. $auths = Get-PAOrder | Get-PAAuthorization $auths This should give an output that looks something like this. The first status column is the overall status of the authorization. The last two columns are the status of the dns-01 and http-01 challenges. Normally the challenge specific details are buried a bit deeper in a challenges property, but Posh-ACME tries to help by surfacing the commonly used challenge details on the root object. Notice also how the wildcard name has no HTTP01Status because it was not offered as a valid challenge type for that identifier. fqdn status Expires DNS01Status HTTP01Status ---- ------ ------- ----------- ------------ example.com pending 12/24/2020 7:14:33 PM pending pending *.example.com pending 12/24/2020 7:14:33 PM pending Let's take a look at the full details of one of the authorization objects by running $auths[0] | Format-List . You should get an output like this: identifier : @{type=dns; value=example.com} status : pending expires : 2020-12-25T16:52:23Z challenges : {@{type=dns-01; status=pending; url=https://acme-staging-v02.api.letsencrypt.org/acme/challenge/<AUTH_ID>/<DNS_CHAL_ID>; token=<DNS_TOKEN>}, @{type=http-01; status=pending; url=https://acme-staging-v02.api.letsencrypt.org/acme/challenge/<AUTH_ID>/<HTTP_CHAL_ID>; token=<HTTP_TOKEN>}, @{type=tls-alpn-01; status=pending; url=https://acme-staging-v02.api.letsencrypt.org/acme/challenge/<AUTH_ID>/<ALPN_CHAL_ID>; token=<ALPN_TOKEN>}} DNSId : example.com fqdn : example.com location : https://acme-staging-v02.api.letsencrypt.org/acme/authz/<AUTH_ID> DNS01Status : pending DNS01Url : https://acme-staging-v02.api.letsencrypt.org/acme/challenge/<AUTH_ID>/<DNS_CHAL_ID> DNS01Token : <DNS_TOKEN> HTTP01Status : pending HTTP01Url : https://acme-staging-v02.api.letsencrypt.org/acme/challenge/<AUTH_ID>/<HTTP_CHAL_ID> HTTP01Token : <HTTP_TOKEN> For this identifier, the ACME server has offered all three challenge types: http-01 , dns-01 , and tls-alpn-01 . In addition to the type, each challenge contains a status , url and token property. For HTTP and DNS challenges, these can also be read from the root authorization object using the HTTP01xxx and DNS01xxx properties. We'll go over how to use the tokens in the next couple sections about publishing challenges.","title":"Authorizations and Challenges"},{"location":"Guides/Custom-Challenge-Validation/#publishing-an-http-challenge","text":"For an HTTP challenge, the ACME server must be able send an HTTP GET request to a particular URL on port 80 and receive a key authorization value which is based on the token value in the challenge and the public key thumbprint of your account key. You can build the URL using the following template: $url = 'http://{0}/.well-known/acme-challenge/{1}' -f $auths [ 0 ]. DNSId , $auths [ 0 ]. HTTP01Token Note Most ACME servers will follow HTTP 3xx redirect responses, but the initial request will always be non-TLS to port 80. So you must not block port 80 on your web server if you want to use HTTP challenges. The key authorization can be generated using Get-KeyAuthorization like this. $keyauth = Get-KeyAuthorization $auths [ 0 ]. HTTP01Token Now it's up to you to setup your web server so it responds with the key authorization value when the URL is queried from the Internet. If it's only queryable from your internal LAN, the challenge validation will fail. Note If you're using PowerShell functions to create the challenge files, make sure to specify ASCII/ANSI file encoding. Line endings shouldn't matter, but the encoding does in my testing. So if you're using Out-File , add -Encoding ascii .","title":"Publishing an HTTP Challenge"},{"location":"Guides/Custom-Challenge-Validation/#publishing-a-dns-challenge","text":"For a DNS challenge, the ACME server must be able send an TXT record query for a particular record name and receive a key authorization value in the response which is similar to the value it wants for an HTTP challenge. You can build the record name using the following template: $recName = '_acme-challenge.{0}' -f $auths [ 1 ]. DNSId The key authorization can be generated using Get-KeyAuthorization like this. Note the extra -ForDNS parameter compared to the HTTP challenge and the reference to DNS01Token instead of HTTP01Token . Each challenge type within an authorization has a unique token value. $keyauth = Get-KeyAuthorization $auths [ 1 ]. DNS01Token -ForDNS The astute reader may have realized that in our example, this means the name of the TXT record would be the same for both identifiers, example.com and *.example.com . They both translate to _acme-challenge.example.com . This tends to confuse people at first, but it's really no different than having multiple A records pointing to different IPs for a website. The ACME validation server is smart enough to check all of the returned results and find the one it cares about. Now it's up to you to publish the record on your DNS server that is queryable from the Internet. Depending on your DNS provider and its replication topology, it may take anywhere from seconds to minutes for the records you create to be queryable from the Internet. Make sure you either know how long it's supposed to take and wait that long before proceeding, or query your authoritative external nameservers directly until they return the expected results. Warning In DNS providers that use anycast even if you successfully query the nameserver for your record from your location, it may still fail from other locations in the world due to propagation delays. Some providers have an API you can query to know when it is fully propagated. Others don't and you just have to wait longer. Note ACME validation servers will also follow CNAME records to validate challenges. This can be useful if your primary DNS server has no API or the security posture of your organization doesn't allow an automated process such as an ACME client to have write access to the zone you need to create TXT records within. If you know this will be the case, you can create a permanent CNAME record for the _acme-challenge.<FQDN> name that points to another FQDN somewhere else. Then write your TXT record to that other target and as long as that zone is still Internet-facing, the validation will succeed.","title":"Publishing a DNS Challenge"},{"location":"Guides/Custom-Challenge-Validation/#publishing-a-tls-alpn-challenge","text":"At the time of this writing, I don't know enough about ALPN to authoritatively write a section on how to use it. But I know it's dependent on the web server software you're using. Here is Let's Encrypt's documentation on the subject.","title":"Publishing a TLS-ALPN Challenge"},{"location":"Guides/Custom-Challenge-Validation/#notify-the-acme-server","text":"Now that you've published all of your key validations for all of your challenges, you're ready to ask the ACME server to check them. The requires the url property from the challenge you published which for HTTP/DNS challenges can also be read from HTTP01Url or DNS01Url on the root authorization object. Use the Send-ChallengeAck function like this. # if all of your challenges were published using the same challenge type such as HTTP $auths . HTTP01Url | Send-ChallengeAck # if you published challenges of different types, make sure to use the specific URLs associated with them $auths [ 0 ]. HTTP01Url | Send-ChallengeAck $auths [ 1 ]. DNS01Url | Send-ChallengeAck The challenges are usually validated quickly. But there may be a delay if the ACME server is overloaded. You can poll the status of your authorizations by re-running Get-PAOrder | Get-PAAuthorization . Eventually, the status for each one will either be \"valid\" or \"invalid\". Good output should look something like this. Notice how the overall status for each challenge is valid while the individual challenge status is only valid for the specific challenge types we published. fqdn status Expires DNS01Status HTTP01Status ---- ------ ------- ----------- ------------ example.com valid 12/24/2020 7:14:33 PM valid *.example.com valid 12/24/2020 7:14:33 PM valid Note Some ACME CAs other than Let's Encrypt support the ability to re-validate authorizations that previously failed validation. In these cases, the status of those authorizations will remain pending instead of becoming invalid . Some CAs may periodically retry validation on their own. Others require you to run Send-ChallengeAck again to re-request validation.","title":"Notify the ACME Server"},{"location":"Guides/Custom-Challenge-Validation/#finishing-up","text":"Now that you have all of your identifiers authorized, your order status should now be \"ready\" which you can check with Get-PAOrder -Refresh . It should look something like this. Name MainDomain status KeyLength SANs CertExpires Plugin ---- ---------- ------ --------- ---- ----------- ------ example.com example.com ready 2048 {*.example.com} {Manual} The next step is \"finalization\" in which you send a the actual x509 certificate request (CSR) to the ACME server. Run the following: Submit-OrderFinalize If you run Get-PAOrder -Refresh again, your order status should now be valid which means you're ready to download the final signed certificate. Run the following to let Posh-ACME take care of that and build the various combinations of PEM/PFX files. Complete-PAOrder This will also output the final certificate details that should look something like this. Subject NotAfter KeyLength Thumbprint AllSANs ------- -------- --------- ---------- ------- CN=example.com 3/15/2021 4:37:37 PM 2048 XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX {example.com, *.example.com} It is also the same output you get from Get-PACertificate . Run Get-PACertificate | Format-List to get a full list of cert properties including the filesystem paths where the files are stored.","title":"Finishing Up"},{"location":"Guides/Custom-Challenge-Validation/#debugging-challenge-failures","text":"If for some reason one or more of your challenge validations failed, you can retrieve the error details from the ACME server like this. ( Get-PAOrder | Get-PAAuthorization ). challenges . error | Format-List","title":"Debugging Challenge Failures"},{"location":"Guides/Custom-Challenge-Validation/#revoking-authorizations","text":"Let's Encrypt and other ACME CAs will generally cache authorizations associated with an account for a period of time. Let's Encrypt caches them for around 30 days which means that if you request another cert in that timeframe with an identifier/name that you've already authorized, the authorization objects won't need to be re-validated. Their status will be immediately valid. This can be annoying if you're trying to test your challenge validation automation. However, you can revoke your existing authorizations for a given order like this: # NOTE: Without -Force, there will be a confirmation prompt for each name being revoked. Get-PAorder | Revoke-PAAuthorization -Force This process does not revoke the certificate . It only revokes the authorizations so that you need to re-validate those names when you request a new certificate that contains them.","title":"Revoking Authorizations"},{"location":"Guides/Custom-Challenge-Validation/#renewals","text":"The concept of a renewal doesn't actually exist in the ACME protocol. What most clients call a renewal is just a new order with the same parameters as last time. So the only thing extra you need to deal with is knowing when to renew. When you successfully complete a certificate order, Posh-ACME will attach a RenewAfter property to the order object which you can use to calculate whether it's time to renew or not. The property is an ISO 8601 date/time string which can be parsed and checked with DateTimeOffset like this. $renewAfter = [DateTimeOffset] :: Parse (( Get-PAOrder ). RenewAfter ) if ( [DateTimeOffset] :: Now -gt $renewAfter ) { # time to renew } Note The RenewAfter value is just a suggestion based on the lifetime of the certificate. Technically, you can renew whenever you want. But if you renew the same certificate too often, you might run into rate limits with your CA.","title":"Renewals"},{"location":"Guides/Environment-Variable-Reference/","text":"Environment Variable Reference \u00b6 Posh-ACME supports a few environment variables that can change the module's behavior. Some must be defined prior to the initial import of the module into your PowerShell session. If the module is already loaded when you set them, you can force a reload using Import-Module Posh-ACME -Force . Here is a reference for what is currently supported. Name Minimum Posh-ACME Version Required at Module Load Description POSHACME_HOME 3.2.0 Change the default config location. ( Guide ) POSHACME_PLUGINS 4.7.0 Load custom plugins. ( Guide ) POSHACME_SHOW_PROGRESS 4.11.0 Show progress bar during DNS propagation delay timer. Must exist as any non-null or empty value. POSHACME_VAULT_NAME 4.11.0 SecretManagement Vault Name to store Posh-ACME secrets. ( Guide ) POSHACME_VAULT_PASS 4.11.0 (Optional) Password required to unlock the vault specified by POSHACME_VAULT_NAME. POSHACME_VAULT_SECRET_TEMPLATE 4.11.0 (Optional) Template used to name the Posh-ACME created secrets. Default is poshacme-{0}-sskey and {0} is replaced by a per-account vault GUID.","title":"Environment Variable Reference"},{"location":"Guides/Environment-Variable-Reference/#environment-variable-reference","text":"Posh-ACME supports a few environment variables that can change the module's behavior. Some must be defined prior to the initial import of the module into your PowerShell session. If the module is already loaded when you set them, you can force a reload using Import-Module Posh-ACME -Force . Here is a reference for what is currently supported. Name Minimum Posh-ACME Version Required at Module Load Description POSHACME_HOME 3.2.0 Change the default config location. ( Guide ) POSHACME_PLUGINS 4.7.0 Load custom plugins. ( Guide ) POSHACME_SHOW_PROGRESS 4.11.0 Show progress bar during DNS propagation delay timer. Must exist as any non-null or empty value. POSHACME_VAULT_NAME 4.11.0 SecretManagement Vault Name to store Posh-ACME secrets. ( Guide ) POSHACME_VAULT_PASS 4.11.0 (Optional) Password required to unlock the vault specified by POSHACME_VAULT_NAME. POSHACME_VAULT_SECRET_TEMPLATE 4.11.0 (Optional) Template used to name the Posh-ACME created secrets. Default is poshacme-{0}-sskey and {0} is replaced by a per-account vault GUID.","title":"Environment Variable Reference"},{"location":"Guides/External-Account-Binding/","text":"External Account Binding \u00b6 Some ACME certificate authorities such as ZeroSSL and ssl.com have an existing account management system separate from ACME accounts. In order to create a new ACME account with these providers you must register with some extra information in order to link the new ACME account with the external account. This is known as External Account Binding (EAB). Get EAB Credentials \u00b6 You will obviously need to have or sign up for an account with the CA first in order to bind your ACME account to it. These providers will usually have some sort of API management page to generate or view EAB credentials for ACME use. Searching \"ACME\" in their support site is a good way to find it. The credentials will include at least two values. The first is a \"Key\" or \"Key ID\" that could be any string value. The second is \"HMAC\" or \"HMAC Key\" that is a Base64 encoded value. Rarely, they may also provide an HMAC algorithm identifier such as HS256 or HMAC with SHA-256 . Note Some providers allow you to re-use EAB credentials to create multiple ACME accounts. Others require a new set of EAB credentials be generated for each ACME account. Creating the ACME Account \u00b6 EAB parameters are only supported on New-PAAccount , so you won't be able to use New-PACertificate until you create the account separately. Here's an example. $eabKID = 'xxxxxxxx' $eabHMAC = 'yyyyyyyy' New-PAAccount -ExtAcctKID $eabKID -ExtAcctHMACKey $eabHMAC -Contact 'me@example.com' -AcceptTOS If they provided an algorithm identifier other than HS256 , you would specify it using -ExtAcctAlgorithm . Posh-ACME supports HS256 , HS384 and HS512 . Once the account is created, you can proceed to create new orders and certificates as normal. You won't need the EAB credentials again unless you're creating a new account or possibly recovering an existing account on another system.","title":"External Account Binding"},{"location":"Guides/External-Account-Binding/#external-account-binding","text":"Some ACME certificate authorities such as ZeroSSL and ssl.com have an existing account management system separate from ACME accounts. In order to create a new ACME account with these providers you must register with some extra information in order to link the new ACME account with the external account. This is known as External Account Binding (EAB).","title":"External Account Binding"},{"location":"Guides/External-Account-Binding/#get-eab-credentials","text":"You will obviously need to have or sign up for an account with the CA first in order to bind your ACME account to it. These providers will usually have some sort of API management page to generate or view EAB credentials for ACME use. Searching \"ACME\" in their support site is a good way to find it. The credentials will include at least two values. The first is a \"Key\" or \"Key ID\" that could be any string value. The second is \"HMAC\" or \"HMAC Key\" that is a Base64 encoded value. Rarely, they may also provide an HMAC algorithm identifier such as HS256 or HMAC with SHA-256 . Note Some providers allow you to re-use EAB credentials to create multiple ACME accounts. Others require a new set of EAB credentials be generated for each ACME account.","title":"Get EAB Credentials"},{"location":"Guides/External-Account-Binding/#creating-the-acme-account","text":"EAB parameters are only supported on New-PAAccount , so you won't be able to use New-PACertificate until you create the account separately. Here's an example. $eabKID = 'xxxxxxxx' $eabHMAC = 'yyyyyyyy' New-PAAccount -ExtAcctKID $eabKID -ExtAcctHMACKey $eabHMAC -Contact 'me@example.com' -AcceptTOS If they provided an algorithm identifier other than HS256 , you would specify it using -ExtAcctAlgorithm . Posh-ACME supports HS256 , HS384 and HS512 . Once the account is created, you can proceed to create new orders and certificates as normal. You won't need the EAB credentials again unless you're creating a new account or possibly recovering an existing account on another system.","title":"Creating the ACME Account"},{"location":"Guides/External-Articles/","text":"External Articles \u00b6 Using Let's Encrypt for Active Directory Domain Controller Certificates Using Let\u2019s Encrypt certificates with Windows Admin Center Connect to a Windows server with RD Gateway using a Let's Encrypt certificate Certificates in the time of Let's Encrypt Let\u2019s Encrypt, IIS Central Cert Store and Powershell Generate LetsEncrypt signed certificates and upload to Azure Key Vault Automating certificate management with Azure and Let\u2019s Encrypt How to use Azure Automation to issue Let's Encrypt certificates Automate the Installation and Renewal of Let\u2019s Encrypt SSL Certificates in Azure Securing VMware Horizon UAGs with Let\u2019s Encrypt SSL certificates Automate Free SSL Certificate Replacement for vCenter 7 Automate SSL Certificates in Veeam Cloud Connect","title":"External Articles"},{"location":"Guides/External-Articles/#external-articles","text":"Using Let's Encrypt for Active Directory Domain Controller Certificates Using Let\u2019s Encrypt certificates with Windows Admin Center Connect to a Windows server with RD Gateway using a Let's Encrypt certificate Certificates in the time of Let's Encrypt Let\u2019s Encrypt, IIS Central Cert Store and Powershell Generate LetsEncrypt signed certificates and upload to Azure Key Vault Automating certificate management with Azure and Let\u2019s Encrypt How to use Azure Automation to issue Let's Encrypt certificates Automate the Installation and Renewal of Let\u2019s Encrypt SSL Certificates in Azure Securing VMware Horizon UAGs with Let\u2019s Encrypt SSL certificates Automate Free SSL Certificate Replacement for vCenter 7 Automate SSL Certificates in Veeam Cloud Connect","title":"External Articles"},{"location":"Guides/Find-Deprecated-PluginArgs/","text":"Find Deprecated PluginArgs \u00b6 Posh-ACME 4.8 has deprecated the old \"insecure\" plugin parameter sets that used to be necessary on non-Windows machines running early versions of PowerShell 6. This means that when Posh-ACME 5.0 is eventually released, certificate orders renewing with those parameter sets will stop working if they haven't been replaced by a \"secure\" parameter set. So it would be wise to update those parameters sooner rather than later. In most cases, migrating to a secure parameter set is just a matter of using a SecureString version of a token, key, or password instead of a standard String object. It might also mean using a PSCredential object instead of separate Username and Password parameters. The usage guide for each plugin will detail exactly what to use. If you have a lot of accounts or orders, particularly if they use different plugins, it may be a tedious process to find the orders that are using the deprecated parameters. Here's a function to help find those orders more easily. Warning The function assumes you've already installed Posh-ACME 4.8 or later which may also be required in order to migrate to the secure parameter sets that were added in 4.8. function Find-DeprecatedPluginArgs { [ CmdletBinding ()] param () # build a list of parameter names that we know are deprecated $badParams = @( 'AKClientSecretInsecure' 'AliSecretInsecure' 'AutoDNSPasswordInsecure' 'AZPfxPass' 'AZAppPasswordInsecure' 'BlueCatPassword' 'CFAuthKey' 'CFTokenInsecure' 'CDPasswordInsecure' 'DSTokenInsecure' 'DMESecretInsecure' 'DSTokenInsecure' 'DNSPodKeyTokenInsecure' 'DOToken' 'DomOffTokenInsecure' 'DomeneshopSecretInsecure' 'DreamhostApiKey' 'DuckTokenInsecure' 'DynuSecret' 'EDKey' 'FDPassword' 'GandiTokenInsecure' 'GDSecret' 'HetznerTokenInsecure' 'HEPassword' 'IBMKey' 'IBPassword' 'InfomaniakTokenInsecure' 'LITokenInsecure' 'LoopiaPassInsecure' 'LuaPassword' 'NCApiKeyInsecure' 'NameComToken' 'NameSiloKeyInsecure' 'NS1KeyInsecure' 'OVHAppSecretInsecure' 'OVHConsumerKeyInsecure' 'PDKeyInsecure' 'RSApiKeyInsecure' 'RegRuPwdInsecure' 'DDNSKeyValueInsecure' 'R53SecretKeyInsecure' 'SelectelAdminTokenInsecure' 'SdnsPassword' 'SimplyAPIKeyInsecure' 'YDAdminTokenInsecure' 'ZonomiApiKey' ) $results = foreach ( $server in ( Get-PAServer -List )) { Write-Verbose \" Server: $( $server . Name ) \" try { $server | Set-PAServer } catch { Write-Warning \"Failed to set server $( $server . Name ) \" continue } foreach ( $acct in ( Get-PAAccount -List )) { Write-Verbose \"Account: $( $acct . id ) \" try { $acct | Set-PAAccount } catch { Write-Warning \"Failed to set account $( $acct . id ) \" continue } foreach ( $order in ( Get-PAOrder -List )) { $paNames = ( $order | Get-PAPluginArgs ). Keys | ForEach -Object { $_ } if ( -not $paNames ) { continue } if ( $badMatches = Compare-Object $paNames $badParams -ExcludeDifferent -IncludeEqual ) { [pscustomobject] @{ ServerName = $server . Name AccountID = $acct . id OrderName = $order . Name Plugin = $order . Plugin DeprecatedParams = $badMatches . InputObject -join ',' } } } } } $results }","title":"Find Deprecated PluginArgs"},{"location":"Guides/Find-Deprecated-PluginArgs/#find-deprecated-pluginargs","text":"Posh-ACME 4.8 has deprecated the old \"insecure\" plugin parameter sets that used to be necessary on non-Windows machines running early versions of PowerShell 6. This means that when Posh-ACME 5.0 is eventually released, certificate orders renewing with those parameter sets will stop working if they haven't been replaced by a \"secure\" parameter set. So it would be wise to update those parameters sooner rather than later. In most cases, migrating to a secure parameter set is just a matter of using a SecureString version of a token, key, or password instead of a standard String object. It might also mean using a PSCredential object instead of separate Username and Password parameters. The usage guide for each plugin will detail exactly what to use. If you have a lot of accounts or orders, particularly if they use different plugins, it may be a tedious process to find the orders that are using the deprecated parameters. Here's a function to help find those orders more easily. Warning The function assumes you've already installed Posh-ACME 4.8 or later which may also be required in order to migrate to the secure parameter sets that were added in 4.8. function Find-DeprecatedPluginArgs { [ CmdletBinding ()] param () # build a list of parameter names that we know are deprecated $badParams = @( 'AKClientSecretInsecure' 'AliSecretInsecure' 'AutoDNSPasswordInsecure' 'AZPfxPass' 'AZAppPasswordInsecure' 'BlueCatPassword' 'CFAuthKey' 'CFTokenInsecure' 'CDPasswordInsecure' 'DSTokenInsecure' 'DMESecretInsecure' 'DSTokenInsecure' 'DNSPodKeyTokenInsecure' 'DOToken' 'DomOffTokenInsecure' 'DomeneshopSecretInsecure' 'DreamhostApiKey' 'DuckTokenInsecure' 'DynuSecret' 'EDKey' 'FDPassword' 'GandiTokenInsecure' 'GDSecret' 'HetznerTokenInsecure' 'HEPassword' 'IBMKey' 'IBPassword' 'InfomaniakTokenInsecure' 'LITokenInsecure' 'LoopiaPassInsecure' 'LuaPassword' 'NCApiKeyInsecure' 'NameComToken' 'NameSiloKeyInsecure' 'NS1KeyInsecure' 'OVHAppSecretInsecure' 'OVHConsumerKeyInsecure' 'PDKeyInsecure' 'RSApiKeyInsecure' 'RegRuPwdInsecure' 'DDNSKeyValueInsecure' 'R53SecretKeyInsecure' 'SelectelAdminTokenInsecure' 'SdnsPassword' 'SimplyAPIKeyInsecure' 'YDAdminTokenInsecure' 'ZonomiApiKey' ) $results = foreach ( $server in ( Get-PAServer -List )) { Write-Verbose \" Server: $( $server . Name ) \" try { $server | Set-PAServer } catch { Write-Warning \"Failed to set server $( $server . Name ) \" continue } foreach ( $acct in ( Get-PAAccount -List )) { Write-Verbose \"Account: $( $acct . id ) \" try { $acct | Set-PAAccount } catch { Write-Warning \"Failed to set account $( $acct . id ) \" continue } foreach ( $order in ( Get-PAOrder -List )) { $paNames = ( $order | Get-PAPluginArgs ). Keys | ForEach -Object { $_ } if ( -not $paNames ) { continue } if ( $badMatches = Compare-Object $paNames $badParams -ExcludeDifferent -IncludeEqual ) { [pscustomobject] @{ ServerName = $server . Name AccountID = $acct . id OrderName = $order . Name Plugin = $order . Plugin DeprecatedParams = $badMatches . InputObject -join ',' } } } } } $results }","title":"Find Deprecated PluginArgs"},{"location":"Guides/Troubleshooting-DNS-Validation/","text":"Troubleshooting DNS Validation \u00b6 Overview \u00b6 One of the more common problems using DNS challenge validation with ACME is when the server thinks your TXT records either don't exist or are invalid. There are a number of reasons why this might be the case and in this guide, we'll go over some of the possibilities. But first, let's review how to query TXT records. Querying TXT records \u00b6 nslookup is the primary tool most people use to do DNS queries from Windows because it's installed by default and available on every Windows OS since basically forever. PowerShell has Resolve-DnsName but only since Windows 8/2012. So we'll focus on nslookup for now. C:\\>nslookup -q=txt _acme-challenge.example.com. Don't forget the final . on the domain name. This is the basic command that will query your local DNS server. But it's usually wise to specifically query a public DNS resolver like Google (8.8.8.8) or CloudFlare (1.1.1.1) in case you're in a split-brain DNS environment. However, some businesses are starting to deploy firewalls that block outbound DNS requests like this. So make sure you are able to query a known good record before tearing your hair out troubleshooting the record you're having trouble with. Here's how to explicitly query an external resolver. C:\\>nslookup -q=txt _acme-challenge.example.com. 1.1.1.1 If the query was successful, the output might look something like this: Server: 1dot1dot1dot1.cloudflare-dns.com Address: 1.1.1.1 Non-authoritative answer: _acme-challenge.example.com text = \"asdfa7sdcv6qn4klav7127134\" Otherwise, it will be more like this: Server: 1dot1dot1dot1.cloudflare-dns.com Address: 1.1.1.1 *** 1dot1dot1dot1.cloudflare-dns.com can't find _acme-challenge.example.com: Non-existent domain DNS Propagation Delays \u00b6 In many environments, the DNS server you are adding records to is not the same server that the Internet is sending queries to. Depending on the server and the DNS architecture, there may be both database replication delays and DNS zone transfer delays to slave servers. By default, Posh-ACME sleeps for 2 minutes after writing TXT records for a certificate before it asks the ACME server to validate them. But 2 minutes might not be long enough for your particular environment. In that case, use the -DnsSleep parameter to modify the default sleep time. It takes a value in seconds. So if you needed 5 minutes, you'd use -DnsSleep 300 . And rather than just blindly increasing the delay when you're having a problem, it's a good idea to actually measure instead. Manually create a record Start a timer Query the record every few seconds until you see the change Make a note of the total time Add a 30 second buffer or so and use that value for -DnsSleep If you never see the change, it's possible you're having a different problem. Internal vs External DNS \u00b6 Particularly in business environments, it is common to have a split-brain DNS architecture which basically means there might be two different \"views\" of a particular zone, one internal and one external. The internal view might resolve example.com to an internal IP like 10.0.0.50 . But the external view for the same name might resolve to public IP like 203.0.113.50 . Make sure that you only add your DNS challenge TXT records to the External view because that's the one the ACME server will be able to see. CAA Record Issues \u00b6 CAA is a relatively new type of DNS record that allows site owners to specify which Certificate Authorities (CAs) are allowed to issue certificates containing their domain names. Let's Encrypt, being a well behaved CA, tries to validate CAA records before issuing a certificate for a domain. So if you have a CAA record that is not correctly set to to allow Let's Encrypt, your challenge validation would fail. But there are a number of reasons why it might fail even if you are not using CAA records in your zone. Check Let's Encrypt's CAA document for more information.","title":"Troubleshooting DNS Validation"},{"location":"Guides/Troubleshooting-DNS-Validation/#troubleshooting-dns-validation","text":"","title":"Troubleshooting DNS Validation"},{"location":"Guides/Troubleshooting-DNS-Validation/#overview","text":"One of the more common problems using DNS challenge validation with ACME is when the server thinks your TXT records either don't exist or are invalid. There are a number of reasons why this might be the case and in this guide, we'll go over some of the possibilities. But first, let's review how to query TXT records.","title":"Overview"},{"location":"Guides/Troubleshooting-DNS-Validation/#querying-txt-records","text":"nslookup is the primary tool most people use to do DNS queries from Windows because it's installed by default and available on every Windows OS since basically forever. PowerShell has Resolve-DnsName but only since Windows 8/2012. So we'll focus on nslookup for now. C:\\>nslookup -q=txt _acme-challenge.example.com. Don't forget the final . on the domain name. This is the basic command that will query your local DNS server. But it's usually wise to specifically query a public DNS resolver like Google (8.8.8.8) or CloudFlare (1.1.1.1) in case you're in a split-brain DNS environment. However, some businesses are starting to deploy firewalls that block outbound DNS requests like this. So make sure you are able to query a known good record before tearing your hair out troubleshooting the record you're having trouble with. Here's how to explicitly query an external resolver. C:\\>nslookup -q=txt _acme-challenge.example.com. 1.1.1.1 If the query was successful, the output might look something like this: Server: 1dot1dot1dot1.cloudflare-dns.com Address: 1.1.1.1 Non-authoritative answer: _acme-challenge.example.com text = \"asdfa7sdcv6qn4klav7127134\" Otherwise, it will be more like this: Server: 1dot1dot1dot1.cloudflare-dns.com Address: 1.1.1.1 *** 1dot1dot1dot1.cloudflare-dns.com can't find _acme-challenge.example.com: Non-existent domain","title":"Querying TXT records"},{"location":"Guides/Troubleshooting-DNS-Validation/#dns-propagation-delays","text":"In many environments, the DNS server you are adding records to is not the same server that the Internet is sending queries to. Depending on the server and the DNS architecture, there may be both database replication delays and DNS zone transfer delays to slave servers. By default, Posh-ACME sleeps for 2 minutes after writing TXT records for a certificate before it asks the ACME server to validate them. But 2 minutes might not be long enough for your particular environment. In that case, use the -DnsSleep parameter to modify the default sleep time. It takes a value in seconds. So if you needed 5 minutes, you'd use -DnsSleep 300 . And rather than just blindly increasing the delay when you're having a problem, it's a good idea to actually measure instead. Manually create a record Start a timer Query the record every few seconds until you see the change Make a note of the total time Add a 30 second buffer or so and use that value for -DnsSleep If you never see the change, it's possible you're having a different problem.","title":"DNS Propagation Delays"},{"location":"Guides/Troubleshooting-DNS-Validation/#internal-vs-external-dns","text":"Particularly in business environments, it is common to have a split-brain DNS architecture which basically means there might be two different \"views\" of a particular zone, one internal and one external. The internal view might resolve example.com to an internal IP like 10.0.0.50 . But the external view for the same name might resolve to public IP like 203.0.113.50 . Make sure that you only add your DNS challenge TXT records to the External view because that's the one the ACME server will be able to see.","title":"Internal vs External DNS"},{"location":"Guides/Troubleshooting-DNS-Validation/#caa-record-issues","text":"CAA is a relatively new type of DNS record that allows site owners to specify which Certificate Authorities (CAs) are allowed to issue certificates containing their domain names. Let's Encrypt, being a well behaved CA, tries to validate CAA records before issuing a certificate for a domain. So if you have a CAA record that is not correctly set to to allow Let's Encrypt, your challenge validation would fail. But there are a number of reasons why it might fail even if you are not using CAA records in your zone. Check Let's Encrypt's CAA document for more information.","title":"CAA Record Issues"},{"location":"Guides/Using-Alternate-Trust-Chains/","text":"Using Alternate Trust Chains \u00b6 The ACME protocol allows for a CA to offer alternate trust chains in order to accommodate the natural lifecycle of Root and Issuing certificates. As of this writing, the only public ACME CA that currently offers alternate trust chains is Let's Encrypt. But the instructions in this guide should work for any ACME CA. Let's Encrypt Options \u00b6 To understand why Let's Encrypt is offering multiple trust chains and why you as a site/service operator would choose one or the other, it is helpful to read the following posts: DST Root CA X3 Expiration (September 2021) Extending Android Device Compatibility for Let's Encrypt Certificates Production Chain Changes Your default choice is currently the longer chain that builds to the expired DST Root CA X3 self-signed certificate which should be compatible with almost all Android devices until 2024. The alternate choice is the shorter chain that builds to the ISRG Root X1 self-signed certificate which doesn't expire until 2035. Ultimately, your choice should depend on the clients that are connecting to your service. But if you don't know, it's probably safest to just leave the default. Let's Encrypt also has a Certificate Compatibility page that can help. It is also a perfectly valid option to switch to a different public ACME CA either permanently or until the dust settles on the DST Root expiration. Picking an Alternate Chain \u00b6 New-PACertificate , New-PAOrder , and Set-PAOrder all have a -PreferredChain parameter that work the same way. You provide the common name of a certificate in the chain you want to select. For Let's Encrypt, that would be ISRG Root X1 even though it exists in both chains. The alternate chain wins because that cert is closer to the root (it is the root) than the default chain. Here's an example of getting a new cert with the alternate chain using splatting . $certParams = @{ Domain = '*.example.com' , 'example.com' AcceptTOS = $true Contact = 'admin@example.com' Plugin = 'FakeDNS' PluginArgs = @{ FDToken = ( Read-Host 'FakeDNS API Token' -AsSecureString ) } PreferredChain = 'ISRG Root X1' } New-PACertificate @certParams You can also modify an existing order to use the alternate chain which will change both the current certificate files (if they exist) and future renewals. Set-PAOrder -Name 'example.com' -PreferredChain 'ISRG Root X1' Warning Changing the chain on an existing certificate will only update the files in the Posh-ACME order folder. Even if the order has the Install property set to $true , it will not re-import the current certificate to the Windows certificate store. It will only do that on the next renewal. Serving the Alternate Chain from Windows \u00b6 While the -PreferredChain option will make Posh-ACME download the alternate chain for the files in your config, you may notice that on Windows your website/application is still serving the default chain. Unlike many Linux applications that have explicit configuration options for chain configuration, applications that use the Windows certificate store usually rely on the underlying operating system to decide what chain to serve with the leaf certificate. There does not seem to be a way to differentiate the chains being served based on application. All websites and applications using leaf certs from the same Intermediate CA will serve the same chain. But it is possible to influence which chain based on the by manipulating the contents of the various Windows trust stores. The default chain that Windows picks for an LE cert following the expiration of DST Root CA X3 is actually Let's Encrypt's shorter \"alternate\" chain which does not include the cross-signed copy of ISRG Root X1 needed for old Android compatibility. Convincing Windows to serve Let's Encrypt's longer \"default\" chain that does support old Android devices currently requires a hack that involves un-trusting the legitimate self-signed ISRG Root X1 on the user account hosting your service. In the case of IIS, that usually means the local SYSTEM account. There are a number of different ways to make the modifications, but generally speaking the following needs to happen in the cert stores associated with the user running the service. Add the self-signed ISRG Root X1 certificate to Untrusted Certificates . Add the cross-signed ISRG Root X1 certificate to Intermediate Certification Authorities . Add the current R3 certificate to Intermediate Certification Authorities . (This one may already exist here) Warning This process is an unsupported hack and will partially break certificate validation against sites/services using Let's Encrypt certificates when accessed by software or web browsers on this user account. It should not affect validation for other users on the system. Option 1: Manually using PsExec \u00b6 Download the 3 certificates linked above (2 versions of ISRG Root X1 and a copy of R3) Download Microsoft's PsExec utility and run the following from an admin prompt to open the Certificate Manager for the SYSTEM user. psexec.exe -i -s certmgr.msc Navigate to Untrusted Certificates and expand Right click it, select All Tasks - Import Browse to the self-signed ISRG Root X1 you downloaded and complete the wizard to import it Navigate to Intermediate Certification Authorities and expand Right click it, select All Tasks - Import Browse to the cross-signed ISRG Root X1 you downloaded and complete the wizard to import it Look for an existing copy of R3 issued by ISRG Root X1 and expiring in 2025. (It's okay if there are multiple copies listed) If it doesn't exist, import it the same way you did for the cross-signed ISRG Root X1 Option 2: Import via Registry File \u00b6 Many find it easier to import a registry file containing the necessary cert changes. Here are two that allow you to switch back and forth between the \"default\" and \"alternate\" chain configurations. LetsEncrypt-DefaultChain-SYSTEM.reg LetsEncrypt-AltChain-SYSTEM.reg The first one imports the 3 certs as described in the manual method. The second one deletes them. Download the one you want, remove the .txt extension so it becomes .reg , and double-click to import it. Trigger Cert Chain Rebuild \u00b6 In order for the cert changes to take effect, the most reliable method is to reboot the server. If you are unable or don't want to reboot, you may also be able to trigger a chain rebuild by causing IIS to rebind the certificate on your site. On Windows Server 2012 R2 or newer, you can use the following command to rebind the cert as long as you know the certificate thumbprint. From PowerShell: & $env:SystemRoot \\ system32 \\ inetsrv \\ appcmd . exe renew binding / oldcert : THUMBPRINT / newcert : THUMBPRINT On earlier OSes, you can try modifying the binding from IIS Manager or just delete and re-create it. But again, the most reliable way is a reboot. Verify the Chain Being Served \u00b6 If your website is exposed to the Internet, you can use a number of web based SSL checkers to verify which chain is being served by your site. Here are a couple popular ones: Qualys SSL Labs Namecheap SSL Checker If your website or service is only listening on your internal network, the most common way to check the chain is using OpenSSL. It's usually pre-installed on Linux and MacOS. But you'll have to download and install it for Windows. A popular distribution is available from Shining Light Productions . All you should need is the \"Light\" Win64 version of whatever is the latest build. Run the following to check your site where SERVER is the hostname or IP of your server. openssl s_client -connect SERVER:443 If your server requires using an SNI hostname, you can use this alternative: openssl s_client -connect SERVER:443 -servername HOSTNAME The output will be quite long and you may need to Ctrl-C to cancel the command. But the output you're looking for should be within the first 10 lines of output. There will be a block of text between two sets of --- characters that should look like either of these: Default/Long Chain: --- Certificate chain 0 s:CN = example.com i:C = US, O = Let's Encrypt, CN = R3 1 s:C = US, O = Let's Encrypt, CN = R3 i:C = US, O = Internet Security Research Group, CN = ISRG Root X1 2 s:C = US, O = Internet Security Research Group, CN = ISRG Root X1 i:O = Digital Signature Trust Co., CN = DST Root CA X3 --- Alternate/Short Chain: --- Certificate chain 0 s:CN = example.com i:C = US, O = Let's Encrypt, CN = R3 1 s:C = US, O = Let's Encrypt, CN = R3 i:C = US, O = Internet Security Research Group, CN = ISRG Root X1 ---","title":"Using Alternate Trust Chains"},{"location":"Guides/Using-Alternate-Trust-Chains/#using-alternate-trust-chains","text":"The ACME protocol allows for a CA to offer alternate trust chains in order to accommodate the natural lifecycle of Root and Issuing certificates. As of this writing, the only public ACME CA that currently offers alternate trust chains is Let's Encrypt. But the instructions in this guide should work for any ACME CA.","title":"Using Alternate Trust Chains"},{"location":"Guides/Using-Alternate-Trust-Chains/#lets-encrypt-options","text":"To understand why Let's Encrypt is offering multiple trust chains and why you as a site/service operator would choose one or the other, it is helpful to read the following posts: DST Root CA X3 Expiration (September 2021) Extending Android Device Compatibility for Let's Encrypt Certificates Production Chain Changes Your default choice is currently the longer chain that builds to the expired DST Root CA X3 self-signed certificate which should be compatible with almost all Android devices until 2024. The alternate choice is the shorter chain that builds to the ISRG Root X1 self-signed certificate which doesn't expire until 2035. Ultimately, your choice should depend on the clients that are connecting to your service. But if you don't know, it's probably safest to just leave the default. Let's Encrypt also has a Certificate Compatibility page that can help. It is also a perfectly valid option to switch to a different public ACME CA either permanently or until the dust settles on the DST Root expiration.","title":"Let's Encrypt Options"},{"location":"Guides/Using-Alternate-Trust-Chains/#picking-an-alternate-chain","text":"New-PACertificate , New-PAOrder , and Set-PAOrder all have a -PreferredChain parameter that work the same way. You provide the common name of a certificate in the chain you want to select. For Let's Encrypt, that would be ISRG Root X1 even though it exists in both chains. The alternate chain wins because that cert is closer to the root (it is the root) than the default chain. Here's an example of getting a new cert with the alternate chain using splatting . $certParams = @{ Domain = '*.example.com' , 'example.com' AcceptTOS = $true Contact = 'admin@example.com' Plugin = 'FakeDNS' PluginArgs = @{ FDToken = ( Read-Host 'FakeDNS API Token' -AsSecureString ) } PreferredChain = 'ISRG Root X1' } New-PACertificate @certParams You can also modify an existing order to use the alternate chain which will change both the current certificate files (if they exist) and future renewals. Set-PAOrder -Name 'example.com' -PreferredChain 'ISRG Root X1' Warning Changing the chain on an existing certificate will only update the files in the Posh-ACME order folder. Even if the order has the Install property set to $true , it will not re-import the current certificate to the Windows certificate store. It will only do that on the next renewal.","title":"Picking an Alternate Chain"},{"location":"Guides/Using-Alternate-Trust-Chains/#serving-the-alternate-chain-from-windows","text":"While the -PreferredChain option will make Posh-ACME download the alternate chain for the files in your config, you may notice that on Windows your website/application is still serving the default chain. Unlike many Linux applications that have explicit configuration options for chain configuration, applications that use the Windows certificate store usually rely on the underlying operating system to decide what chain to serve with the leaf certificate. There does not seem to be a way to differentiate the chains being served based on application. All websites and applications using leaf certs from the same Intermediate CA will serve the same chain. But it is possible to influence which chain based on the by manipulating the contents of the various Windows trust stores. The default chain that Windows picks for an LE cert following the expiration of DST Root CA X3 is actually Let's Encrypt's shorter \"alternate\" chain which does not include the cross-signed copy of ISRG Root X1 needed for old Android compatibility. Convincing Windows to serve Let's Encrypt's longer \"default\" chain that does support old Android devices currently requires a hack that involves un-trusting the legitimate self-signed ISRG Root X1 on the user account hosting your service. In the case of IIS, that usually means the local SYSTEM account. There are a number of different ways to make the modifications, but generally speaking the following needs to happen in the cert stores associated with the user running the service. Add the self-signed ISRG Root X1 certificate to Untrusted Certificates . Add the cross-signed ISRG Root X1 certificate to Intermediate Certification Authorities . Add the current R3 certificate to Intermediate Certification Authorities . (This one may already exist here) Warning This process is an unsupported hack and will partially break certificate validation against sites/services using Let's Encrypt certificates when accessed by software or web browsers on this user account. It should not affect validation for other users on the system.","title":"Serving the Alternate Chain from Windows"},{"location":"Guides/Using-Alternate-Trust-Chains/#option-1-manually-using-psexec","text":"Download the 3 certificates linked above (2 versions of ISRG Root X1 and a copy of R3) Download Microsoft's PsExec utility and run the following from an admin prompt to open the Certificate Manager for the SYSTEM user. psexec.exe -i -s certmgr.msc Navigate to Untrusted Certificates and expand Right click it, select All Tasks - Import Browse to the self-signed ISRG Root X1 you downloaded and complete the wizard to import it Navigate to Intermediate Certification Authorities and expand Right click it, select All Tasks - Import Browse to the cross-signed ISRG Root X1 you downloaded and complete the wizard to import it Look for an existing copy of R3 issued by ISRG Root X1 and expiring in 2025. (It's okay if there are multiple copies listed) If it doesn't exist, import it the same way you did for the cross-signed ISRG Root X1","title":"Option 1: Manually using PsExec"},{"location":"Guides/Using-Alternate-Trust-Chains/#option-2-import-via-registry-file","text":"Many find it easier to import a registry file containing the necessary cert changes. Here are two that allow you to switch back and forth between the \"default\" and \"alternate\" chain configurations. LetsEncrypt-DefaultChain-SYSTEM.reg LetsEncrypt-AltChain-SYSTEM.reg The first one imports the 3 certs as described in the manual method. The second one deletes them. Download the one you want, remove the .txt extension so it becomes .reg , and double-click to import it.","title":"Option 2: Import via Registry File"},{"location":"Guides/Using-Alternate-Trust-Chains/#trigger-cert-chain-rebuild","text":"In order for the cert changes to take effect, the most reliable method is to reboot the server. If you are unable or don't want to reboot, you may also be able to trigger a chain rebuild by causing IIS to rebind the certificate on your site. On Windows Server 2012 R2 or newer, you can use the following command to rebind the cert as long as you know the certificate thumbprint. From PowerShell: & $env:SystemRoot \\ system32 \\ inetsrv \\ appcmd . exe renew binding / oldcert : THUMBPRINT / newcert : THUMBPRINT On earlier OSes, you can try modifying the binding from IIS Manager or just delete and re-create it. But again, the most reliable way is a reboot.","title":"Trigger Cert Chain Rebuild"},{"location":"Guides/Using-Alternate-Trust-Chains/#verify-the-chain-being-served","text":"If your website is exposed to the Internet, you can use a number of web based SSL checkers to verify which chain is being served by your site. Here are a couple popular ones: Qualys SSL Labs Namecheap SSL Checker If your website or service is only listening on your internal network, the most common way to check the chain is using OpenSSL. It's usually pre-installed on Linux and MacOS. But you'll have to download and install it for Windows. A popular distribution is available from Shining Light Productions . All you should need is the \"Light\" Win64 version of whatever is the latest build. Run the following to check your site where SERVER is the hostname or IP of your server. openssl s_client -connect SERVER:443 If your server requires using an SNI hostname, you can use this alternative: openssl s_client -connect SERVER:443 -servername HOSTNAME The output will be quite long and you may need to Ctrl-C to cancel the command. But the output you're looking for should be within the first 10 lines of output. There will be a block of text between two sets of --- characters that should look like either of these: Default/Long Chain: --- Certificate chain 0 s:CN = example.com i:C = US, O = Let's Encrypt, CN = R3 1 s:C = US, O = Let's Encrypt, CN = R3 i:C = US, O = Internet Security Research Group, CN = ISRG Root X1 2 s:C = US, O = Internet Security Research Group, CN = ISRG Root X1 i:O = Digital Signature Trust Co., CN = DST Root CA X3 --- Alternate/Short Chain: --- Certificate chain 0 s:CN = example.com i:C = US, O = Let's Encrypt, CN = R3 1 s:C = US, O = Let's Encrypt, CN = R3 i:C = US, O = Internet Security Research Group, CN = ISRG Root X1 ---","title":"Verify the Chain Being Served"},{"location":"Guides/Using-Custom-Plugins/","text":"Using Custom Plugins \u00b6 Since version 4.7.0, you can optionally have Posh-ACME load plugins from a secondary location using the POSH_ACMEPLUGINS environment variable. This is useful because when the module is updated, you no longer need to re-deploy you custom plugins to the module's default Plugins folder. Set the environment variable to the folder path where the custom plugin(s) live. The environment variable must exist when the module is first loaded. So if it has already been loaded in the current session, re-import it with the -Force parameter. $env:POSHACME_PLUGINS = 'C:\\my\\plugin\\path' Import-Module Posh-ACME -Force Warning Make sure your plugin's name doesn't conflict with the name of a buit-in plugin. If it does, a warning will be thrown and that plugin will be skipped.","title":"Using Custom Plugins"},{"location":"Guides/Using-Custom-Plugins/#using-custom-plugins","text":"Since version 4.7.0, you can optionally have Posh-ACME load plugins from a secondary location using the POSH_ACMEPLUGINS environment variable. This is useful because when the module is updated, you no longer need to re-deploy you custom plugins to the module's default Plugins folder. Set the environment variable to the folder path where the custom plugin(s) live. The environment variable must exist when the module is first loaded. So if it has already been loaded in the current session, re-import it with the -Force parameter. $env:POSHACME_PLUGINS = 'C:\\my\\plugin\\path' Import-Module Posh-ACME -Force Warning Make sure your plugin's name doesn't conflict with the name of a buit-in plugin. If it does, a warning will be thrown and that plugin will be skipped.","title":"Using Custom Plugins"},{"location":"Guides/Using-DNS-Challenge-Aliases/","text":"Using DNS Challenge Aliases \u00b6 Background \u00b6 There are two relatively common issues that come up when people try to automate ACME certs using DNS challenges. The first is that the DNS provider hosting the zone either doesn't have an API or the ACME client doesn't have a plugin to support it. The second is that for security reasons, the business may not want to save API credentials for their critical DNS zone on an internet-facing web server. The workaround for both of these involves using a CNAME record to redirect challenge requests to another DNS zone. When the ACME server goes to validate the challenges, it will follow the CNAME and check the challenge token from the redirected record. If the original problem was no API or no plugin, you'd put the redirected zone on a provider with an API and a supported plugin. If the original problem was security related, you'd make the redirected zone a less important one. The downside is the extra manual step required to add the CNAME for each new cert or name in a cert. But you only have to do that once ever for each name. Creating CNAMEs \u00b6 So how do we do that? First, you have to understand how the ACME protocol chooses what record to query for each name in a certificate. Non-wildcard names have _acme-challenge. prepended to them. Wildcard names use the same prefix but it replaces the *. prefix. So for example: Cert Name Challenge Record example.com _acme-challenge.example.com *.example.com _acme-challenge.example.com sub1.example.com _acme-challenge.sub1.example.com *.sub1.example.com _acme-challenge.sub1.example.com www.sub1.sub2.example.com _acme-challenge.www.sub1.sub2.example.com You may have noticed that a wildcard name and a non-wildcard for the same root domain have the same challenge record. That's not a mistake and the ACME server does actually expect to get two different values for the same TXT record. What it means for you though is that you only have one CNAME to create for both types of names. Where do you point the CNAMEs to? It doesn't really matter as long as the ACME server can query it from the Internet and Posh-ACME can create the necessary records there. Some choose to use the same _acme-challenge. prefix for clarity. Some use a different prefix because their provider doesn't allow names to start with a _ character. Some just point all of their CNAMEs to the exact same place. Examples: Challenge Record CNAME Target _acme-challenge.example.com _acme-challenge.example.net _acme-challenge.example.com acme.example.net _acme-challenge.example.com _acme-challenge.validation.example.net _acme-challenge.example.com _acme-challenge.sub1.example.com _acme-challenge.sub2.example.com acme.example.net _acme-challenge.example.com example.net Warning Don't point too many CNAMES at the same target. Let's Encrypt's ACME implementation can only deal with DNS responses up to 4096 bytes which is roughly 60-70 TXT records depending on your DNS server and query parameters. If your record is too big, the validations will fail. Testing \u00b6 You should verify your CNAME was created correctly before you try and use it. If you're inside a business with a split-horizon DNS infrastructure, you might need to explicitly query a public external resolver like CloudFlare's 1.1.1.1. However, some modern firewalls can be configured to prevent this ability. So make sure you can successfully query a known-good external record first. There are also web-based resolvers such as digwebinterface.com if necessary. C:\\> nslookup -q=CNAME _acme-challenge.example.com. 1.1.1.1 Server: 1dot1dot1dot1.cloudflare-dns.com Address: 1.1.1.1 Non-authoritative answer: _acme-challenge.example.com canonical name = acme.example.net Using the Challenge Alias \u00b6 Now that your CNAMEs are all setup, you just have to add one more parameter to your certificate request command, -DnsAlias . It works just like -Plugin as an array that should have one element for each domain in the request. But if all of your CNAMEs point to the same place, you can just specify the alias once and it will use that alias for all the names. $certParams = @{ Domain = '*.example.com' , 'example.com' AcceptTOS = $true Contact = 'me@example.com' Plugin = 'FakeDNS' PluginArgs = @{ FDToken = ( Read-Host 'FakeDNS API Token' -AsSecureString ) } DnsAlias = 'acme.example.net' Verbose = $true } New-PACertificate @certParams","title":"Using DNS Challenge Aliases"},{"location":"Guides/Using-DNS-Challenge-Aliases/#using-dns-challenge-aliases","text":"","title":"Using DNS Challenge Aliases"},{"location":"Guides/Using-DNS-Challenge-Aliases/#background","text":"There are two relatively common issues that come up when people try to automate ACME certs using DNS challenges. The first is that the DNS provider hosting the zone either doesn't have an API or the ACME client doesn't have a plugin to support it. The second is that for security reasons, the business may not want to save API credentials for their critical DNS zone on an internet-facing web server. The workaround for both of these involves using a CNAME record to redirect challenge requests to another DNS zone. When the ACME server goes to validate the challenges, it will follow the CNAME and check the challenge token from the redirected record. If the original problem was no API or no plugin, you'd put the redirected zone on a provider with an API and a supported plugin. If the original problem was security related, you'd make the redirected zone a less important one. The downside is the extra manual step required to add the CNAME for each new cert or name in a cert. But you only have to do that once ever for each name.","title":"Background"},{"location":"Guides/Using-DNS-Challenge-Aliases/#creating-cnames","text":"So how do we do that? First, you have to understand how the ACME protocol chooses what record to query for each name in a certificate. Non-wildcard names have _acme-challenge. prepended to them. Wildcard names use the same prefix but it replaces the *. prefix. So for example: Cert Name Challenge Record example.com _acme-challenge.example.com *.example.com _acme-challenge.example.com sub1.example.com _acme-challenge.sub1.example.com *.sub1.example.com _acme-challenge.sub1.example.com www.sub1.sub2.example.com _acme-challenge.www.sub1.sub2.example.com You may have noticed that a wildcard name and a non-wildcard for the same root domain have the same challenge record. That's not a mistake and the ACME server does actually expect to get two different values for the same TXT record. What it means for you though is that you only have one CNAME to create for both types of names. Where do you point the CNAMEs to? It doesn't really matter as long as the ACME server can query it from the Internet and Posh-ACME can create the necessary records there. Some choose to use the same _acme-challenge. prefix for clarity. Some use a different prefix because their provider doesn't allow names to start with a _ character. Some just point all of their CNAMEs to the exact same place. Examples: Challenge Record CNAME Target _acme-challenge.example.com _acme-challenge.example.net _acme-challenge.example.com acme.example.net _acme-challenge.example.com _acme-challenge.validation.example.net _acme-challenge.example.com _acme-challenge.sub1.example.com _acme-challenge.sub2.example.com acme.example.net _acme-challenge.example.com example.net Warning Don't point too many CNAMES at the same target. Let's Encrypt's ACME implementation can only deal with DNS responses up to 4096 bytes which is roughly 60-70 TXT records depending on your DNS server and query parameters. If your record is too big, the validations will fail.","title":"Creating CNAMEs"},{"location":"Guides/Using-DNS-Challenge-Aliases/#testing","text":"You should verify your CNAME was created correctly before you try and use it. If you're inside a business with a split-horizon DNS infrastructure, you might need to explicitly query a public external resolver like CloudFlare's 1.1.1.1. However, some modern firewalls can be configured to prevent this ability. So make sure you can successfully query a known-good external record first. There are also web-based resolvers such as digwebinterface.com if necessary. C:\\> nslookup -q=CNAME _acme-challenge.example.com. 1.1.1.1 Server: 1dot1dot1dot1.cloudflare-dns.com Address: 1.1.1.1 Non-authoritative answer: _acme-challenge.example.com canonical name = acme.example.net","title":"Testing"},{"location":"Guides/Using-DNS-Challenge-Aliases/#using-the-challenge-alias","text":"Now that your CNAMEs are all setup, you just have to add one more parameter to your certificate request command, -DnsAlias . It works just like -Plugin as an array that should have one element for each domain in the request. But if all of your CNAMEs point to the same place, you can just specify the alias once and it will use that alias for all the names. $certParams = @{ Domain = '*.example.com' , 'example.com' AcceptTOS = $true Contact = 'me@example.com' Plugin = 'FakeDNS' PluginArgs = @{ FDToken = ( Read-Host 'FakeDNS API Token' -AsSecureString ) } DnsAlias = 'acme.example.net' Verbose = $true } New-PACertificate @certParams","title":"Using the Challenge Alias"},{"location":"Guides/Using-SecretManagement/","text":"Using SecretManagement \u00b6 The alternative plugin encryption option added in Posh-ACME 4.0 allows for encrypting secure plugin arguments on disk with better config portability between users/systems and improves the encryption available on non-Windows platforms. The only downside to the feature is that the encryption key was stored with the main config which enables anyone with read access to the files the ability to decrypt the plugin parameters. In Posh-ACME 4.11.0, you can now utilize the Microsoft SecretManagement module to store the encryption key in a variety of local, on-prem, and cloud secret stores using supported vault extensions . Warning Some vault extensions are read-only and don't allow for creation of new secrets. The vault extensions supported by Posh-ACME must allow for secret creation using arbitrary name values. Prerequisites \u00b6 In order to use the SecretManagement feature, you must install both the Microsoft.PowerShell.SecretManagement module and an appropriate vault extension module to interface with your preferred secret store. You will also need to register a new vault and make note of the vault name. It will be provided to Posh-ACME using the POSHACME_VAULT_NAME environment variable. Vault Password \u00b6 Some vaults can be configured with a password such that retrieving a secret requires first unlocking the vault with the password. In order to use a vault with Posh-ACME, you have three options. Configure the vault so a password is not required. Provide the vault password using the POSHACME_VAULT_PASS environment variable. Prior to calling Posh-ACME functions, unlock or pre-authenticate to the vault so Posh-ACME can call Set-Secret and Get-Secret without error. Secret Names and Customization \u00b6 Each account configured to use alternative plugin encryption will store a single secret in the vault. The name of each secret will use the following template: poshacme-{0}-sskey The {0} is replaced with a unique GUID value generated for each account the first time the feature is used and stored as a property called VaultGuid on the account object. This ensures that using the same vault for multiple accounts does not result in secret naming conflicts. You may optionally create an environment variable called POSHACME_VAULT_SECRET_TEMPLATE to override the default template. Be sure to include {0} in your template string to make sure there are no conflicts between accounts. Also, be aware that some vaults have restrictions on the characters allowed in a secret name. Using a Vault \u00b6 Enable Vault Key Storage \u00b6 Ensure the appropriate environment variables are set based on the prerequisites listed above. Then specify the UseAltPluginEncryption switch with either New-PAAccount for new accounts or Set-PAAccount for existing accounts. # create a new account using vault key storage New-PAAccount -AcceptTOS -Contact 'me@example.com' -UseAltPluginEncryption -Verbose # migrate an existing account to use vault key storage Set-PAAccount -UseAltPluginEncryption -Verbose Warning If UseAltPluginEncryption was already enabled for an existing account, you will need to disable it before re-enabling it in order to use vault key storage. The verbose output should indicate the name of the secret that was added to the vault specified by your environment variables. You should also be able to list all the secrets associated with Posh-ACME by running the following: # change the search string if you're using a custom template Get-SecretInfo -Vault $env:POSHACME_VAULT_NAME -Name '*poshacme*' If there was a problem accessing the vault, an warning is thrown and the module falls back to storing the key with the account object. You can verify the current configuration for an account by checking the VaultGuid and sskey properties on account objects like this: Get-PAAccount -List | Select-Object id , sskey , VaultGuid When sskey is null or empty, the account is currently configured to use OS-native encryption. When sskey is set to VAULT and VaultGuid is not empty, the account is configured to use vault key storage. When sskey is any other value, the key is being stored with the account object. Disable Vault Key Storage \u00b6 To disable vault key storage, use the standard process to disable alternative plugin encryption. Set-PAAccount -UseAltPluginEncryption : $false If you still want to use alternative plugin encryption but without storing the key in a vault, remove your vault related environment variables and then re-enable alternative plugin encryption. Additional Considerations \u00b6 Losing the Vault Key \u00b6 If the module is unable to retrieve the key from the vault, it will be unable to decrypt SecureString and PSCredential based plugin arguments and renewals will likely fail. If the key or vault was deleted or is otherwise no longer accessible, you will need to re-configure the plugin arguments for each order associated with the account using Set-PAOrder . If the vault access disruption is only temporary, the module will be able to continue processing renewals after access is restored. However, new orders or order modifications that configure new plugin arguments will reset the account's config with a new encryption key stored on the account object. It would be difficult to recover the existing plugin arguments on other orders without tedious manual intervention. So this should be avoided if possible. Rotating the Vault Key \u00b6 If you believe the encryption key may have been compromised, you can rotate it by using the ResetAltPluginEncryption switch on Set-PAAccount . Set-PAAccount -ResetAltPluginEncryption Using ResetAltPluginEncryption is also an easy way to migrate from storing the key on the account to storing it in a vault. Sharing Configs and Vaults \u00b6 In some environments, the Posh-ACME config may be copied to multiple systems. Be wary when doing this using vault key storage. If the systems also share the same remote vault and you rotate the encryption key on one system, it will break the ability to decrypt plugin arguments on the other systems because the other systems won't have re-encrypted their copy of the plugin arguments with the new key. You will need to re-sync the config onto the other systems in order to fix it.","title":"Using SecretManagement"},{"location":"Guides/Using-SecretManagement/#using-secretmanagement","text":"The alternative plugin encryption option added in Posh-ACME 4.0 allows for encrypting secure plugin arguments on disk with better config portability between users/systems and improves the encryption available on non-Windows platforms. The only downside to the feature is that the encryption key was stored with the main config which enables anyone with read access to the files the ability to decrypt the plugin parameters. In Posh-ACME 4.11.0, you can now utilize the Microsoft SecretManagement module to store the encryption key in a variety of local, on-prem, and cloud secret stores using supported vault extensions . Warning Some vault extensions are read-only and don't allow for creation of new secrets. The vault extensions supported by Posh-ACME must allow for secret creation using arbitrary name values.","title":"Using SecretManagement"},{"location":"Guides/Using-SecretManagement/#prerequisites","text":"In order to use the SecretManagement feature, you must install both the Microsoft.PowerShell.SecretManagement module and an appropriate vault extension module to interface with your preferred secret store. You will also need to register a new vault and make note of the vault name. It will be provided to Posh-ACME using the POSHACME_VAULT_NAME environment variable.","title":"Prerequisites"},{"location":"Guides/Using-SecretManagement/#vault-password","text":"Some vaults can be configured with a password such that retrieving a secret requires first unlocking the vault with the password. In order to use a vault with Posh-ACME, you have three options. Configure the vault so a password is not required. Provide the vault password using the POSHACME_VAULT_PASS environment variable. Prior to calling Posh-ACME functions, unlock or pre-authenticate to the vault so Posh-ACME can call Set-Secret and Get-Secret without error.","title":"Vault Password"},{"location":"Guides/Using-SecretManagement/#secret-names-and-customization","text":"Each account configured to use alternative plugin encryption will store a single secret in the vault. The name of each secret will use the following template: poshacme-{0}-sskey The {0} is replaced with a unique GUID value generated for each account the first time the feature is used and stored as a property called VaultGuid on the account object. This ensures that using the same vault for multiple accounts does not result in secret naming conflicts. You may optionally create an environment variable called POSHACME_VAULT_SECRET_TEMPLATE to override the default template. Be sure to include {0} in your template string to make sure there are no conflicts between accounts. Also, be aware that some vaults have restrictions on the characters allowed in a secret name.","title":"Secret Names and Customization"},{"location":"Guides/Using-SecretManagement/#using-a-vault","text":"","title":"Using a Vault"},{"location":"Guides/Using-SecretManagement/#enable-vault-key-storage","text":"Ensure the appropriate environment variables are set based on the prerequisites listed above. Then specify the UseAltPluginEncryption switch with either New-PAAccount for new accounts or Set-PAAccount for existing accounts. # create a new account using vault key storage New-PAAccount -AcceptTOS -Contact 'me@example.com' -UseAltPluginEncryption -Verbose # migrate an existing account to use vault key storage Set-PAAccount -UseAltPluginEncryption -Verbose Warning If UseAltPluginEncryption was already enabled for an existing account, you will need to disable it before re-enabling it in order to use vault key storage. The verbose output should indicate the name of the secret that was added to the vault specified by your environment variables. You should also be able to list all the secrets associated with Posh-ACME by running the following: # change the search string if you're using a custom template Get-SecretInfo -Vault $env:POSHACME_VAULT_NAME -Name '*poshacme*' If there was a problem accessing the vault, an warning is thrown and the module falls back to storing the key with the account object. You can verify the current configuration for an account by checking the VaultGuid and sskey properties on account objects like this: Get-PAAccount -List | Select-Object id , sskey , VaultGuid When sskey is null or empty, the account is currently configured to use OS-native encryption. When sskey is set to VAULT and VaultGuid is not empty, the account is configured to use vault key storage. When sskey is any other value, the key is being stored with the account object.","title":"Enable Vault Key Storage"},{"location":"Guides/Using-SecretManagement/#disable-vault-key-storage","text":"To disable vault key storage, use the standard process to disable alternative plugin encryption. Set-PAAccount -UseAltPluginEncryption : $false If you still want to use alternative plugin encryption but without storing the key in a vault, remove your vault related environment variables and then re-enable alternative plugin encryption.","title":"Disable Vault Key Storage"},{"location":"Guides/Using-SecretManagement/#additional-considerations","text":"","title":"Additional Considerations"},{"location":"Guides/Using-SecretManagement/#losing-the-vault-key","text":"If the module is unable to retrieve the key from the vault, it will be unable to decrypt SecureString and PSCredential based plugin arguments and renewals will likely fail. If the key or vault was deleted or is otherwise no longer accessible, you will need to re-configure the plugin arguments for each order associated with the account using Set-PAOrder . If the vault access disruption is only temporary, the module will be able to continue processing renewals after access is restored. However, new orders or order modifications that configure new plugin arguments will reset the account's config with a new encryption key stored on the account object. It would be difficult to recover the existing plugin arguments on other orders without tedious manual intervention. So this should be avoided if possible.","title":"Losing the Vault Key"},{"location":"Guides/Using-SecretManagement/#rotating-the-vault-key","text":"If you believe the encryption key may have been compromised, you can rotate it by using the ResetAltPluginEncryption switch on Set-PAAccount . Set-PAAccount -ResetAltPluginEncryption Using ResetAltPluginEncryption is also an easy way to migrate from storing the key on the account to storing it in a vault.","title":"Rotating the Vault Key"},{"location":"Guides/Using-SecretManagement/#sharing-configs-and-vaults","text":"In some environments, the Posh-ACME config may be copied to multiple systems. Be wary when doing this using vault key storage. If the systems also share the same remote vault and you rotate the encryption key on one system, it will break the ability to decrypt plugin arguments on the other systems because the other systems won't have re-encrypted their copy of the plugin arguments with the new key. You will need to re-sync the config onto the other systems in order to fix it.","title":"Sharing Configs and Vaults"},{"location":"Guides/Using-an-Alternate-Config-Location/","text":"Using an Alternate Config Location \u00b6 Since version 3.2.0, you can configure Posh-ACME to use a different config location than the default path in the current user's profile folder. To do so, set an environment variable called POSHACME_HOME prior to running Import-Module or calling your first function. This can be done directly in the PowerShell session or any other standard way of setting environment variables in your OS or config management system. If the module was already imported before setting the environment variable, re-import with the -Force parameter to pick up the new location. $env:POSHACME_HOME = 'C:\\my\\path' Import-Module Posh-ACME -Force Why Bother? \u00b6 The default config location is specific to the OS the module is running on. Windows: %LOCALAPPDATA%\\Posh-ACME Linux: $HOME/.config/Posh-ACME MacOS: $HOME/Library/Preferences/Posh-ACME While the default config location is fine for most standard use-cases, there are legitimate reasons to host the config in a more central location. A common one is to enable multiple different users to manage certificates. Another might simply be easier integration with the application using the certificate. IMPORTANT: Encrypted Plugin Parameters \u00b6 On Windows OSes, most DNS plugins default to using \"secure\" versions of various plugin parameters like passwords and API tokens. When saved to disk, these secure parameters are encrypted so only the current user on the current computer can decrypt them. If you are using an alternate config location so that multiple users on the system can manage certificates, this can cause errors if a user tries to decrypt something that was encrypted by another user. In Posh-ACME 4.x, you have a few options to workaround this limitation. On each ACME account, use portable AES encryption instead of the OS native encryption with the -UseAltPluginEncryption switch on either New-PAAccount or Set-PAAccount . Don't use any plugin parameters that are [SecureString] or [PSCredential] types. Most plugins have \"Insecure\" versions of the normally secure arguments that are not encrypted on disk. However, these insecure parameter sets are deprecated and may be removed in a future major version of the module. Have each user on the system create their own ACME account that only they will use. This will technically prevent the errors as long as people don't try to accidentally renew or create new order from the wrong account. But it's not recommended. In Posh-ACME 3.x and earlier, you must either use option 2 or 3.","title":"Using an Alternate Config Location"},{"location":"Guides/Using-an-Alternate-Config-Location/#using-an-alternate-config-location","text":"Since version 3.2.0, you can configure Posh-ACME to use a different config location than the default path in the current user's profile folder. To do so, set an environment variable called POSHACME_HOME prior to running Import-Module or calling your first function. This can be done directly in the PowerShell session or any other standard way of setting environment variables in your OS or config management system. If the module was already imported before setting the environment variable, re-import with the -Force parameter to pick up the new location. $env:POSHACME_HOME = 'C:\\my\\path' Import-Module Posh-ACME -Force","title":"Using an Alternate Config Location"},{"location":"Guides/Using-an-Alternate-Config-Location/#why-bother","text":"The default config location is specific to the OS the module is running on. Windows: %LOCALAPPDATA%\\Posh-ACME Linux: $HOME/.config/Posh-ACME MacOS: $HOME/Library/Preferences/Posh-ACME While the default config location is fine for most standard use-cases, there are legitimate reasons to host the config in a more central location. A common one is to enable multiple different users to manage certificates. Another might simply be easier integration with the application using the certificate.","title":"Why Bother?"},{"location":"Guides/Using-an-Alternate-Config-Location/#important-encrypted-plugin-parameters","text":"On Windows OSes, most DNS plugins default to using \"secure\" versions of various plugin parameters like passwords and API tokens. When saved to disk, these secure parameters are encrypted so only the current user on the current computer can decrypt them. If you are using an alternate config location so that multiple users on the system can manage certificates, this can cause errors if a user tries to decrypt something that was encrypted by another user. In Posh-ACME 4.x, you have a few options to workaround this limitation. On each ACME account, use portable AES encryption instead of the OS native encryption with the -UseAltPluginEncryption switch on either New-PAAccount or Set-PAAccount . Don't use any plugin parameters that are [SecureString] or [PSCredential] types. Most plugins have \"Insecure\" versions of the normally secure arguments that are not encrypted on disk. However, these insecure parameter sets are deprecated and may be removed in a future major version of the module. Have each user on the system create their own ACME account that only they will use. This will technically prevent the errors as long as people don't try to accidentally renew or create new order from the wrong account. But it's not recommended. In Posh-ACME 3.x and earlier, you must either use option 2 or 3.","title":"IMPORTANT: Encrypted Plugin Parameters"},{"location":"Plugins/","text":"Supported Plugins \u00b6 DNS Plugins \u00b6 To request support for a particular DNS provider, please submit an issue . Pull requests for new plugins are also welcome and appreciated. See the plugin development guide for more info. If you are running Posh-ACME on PowerShell Core from a non-Windows OS, check the PS Core Compatible column to make sure the plugin is supported. Also check the usage guide for non-Windows specific instructions. Note Some of the provider links below are affiliate links which help reduce my out of pocket costs maintaining these plugins. I would be most grateful if you use them when signing up for new service. Released \u00b6 Plugin Provider Guide PS Core Compatible AcmeDns acme-dns Usage Guide Active24 Active24 Usage Guide Akamai Akamai Edge DNS Usage Guide Aliyun Aliyun (Alibaba Cloud) Usage Guide All-Inkl All-Inkl Usage Guide Aurora PCExtreme Usage Guide AutoDNS AutoDNS XML Gateway Usage Guide Azure Microsoft Azure DNS Usage Guide Beget Beget.com Usage Guide BlueCat BlueCat Address Manager Usage Guide Bunny Bunny.net Usage Guide Cloudflare Cloudflare DNS Usage Guide ClouDNS ClouDNS Usage Guide Combell Combell Usage Guide Constellix Constellix Usage Guide CoreNetworks Core Networks Usage Guide DeSEC DeSEC DNS Usage Guide DMEasy DNS Made Easy Usage Guide DNSimple DNSimple DNS Usage Guide DNSPod DNSPod Usage Guide DOcean Digital Ocean Usage Guide DomainOffensive Domain Offensive Usage Guide Domeneshop Domeneshop DNS Usage Guide Dreamhost Dreamhost DNS Usage Guide DuckDNS Duck DNS Usage Guide Dynu Dynu DNS Usage Guide EasyDNS EasyDNS Usage Guide Easyname easyname.com Usage Guide FreeDNS Free DNS Usage Guide Gandi Gandi LiveDNS Usage Guide GCloud Google Cloud DNS Usage Guide Google Domains Google Domains Usage Guide GoDaddy GoDaddy Usage Guide Hetzner Hetzner Usage Guide HostingDe Hosting.de Usage Guide HurricaneElectric Hurricane Electric DNS Usage Guide IBMSoftLayer IBM Cloud DNS Usage Guide Infoblox Infoblox NIOS Usage Guide Infomaniak Infomaniak Usage Guide IONOS IONOS Usage Guide ISPConfig ISPConfig Usage Guide LeaseWeb LeaseWeb Usage Guide Linode Linode DNS Usage Guide Loopia LoopiaDNS Usage Guide LuaDns LuaDns Usage Guide Manual Manual Record Creation Namecheap Namecheap FreeDNS Usage Guide NameCom Name.com Usage Guide NS1 NS1 DNS Usage Guide OVH OVH.com Usage Guide PointDNS PointDNS Usage Guide Porkbun Porkbun Usage Guide PortsManagement PortsManagement Usage Guide Rackspace Rackspace Cloud DNS Usage Guide Regru Reg.ru and Reg.com Usage Guide RFC2136 RFC 2136 Usage Guide Route53 AWS Route53 Usage Guide Selectel Selectel.ru Usage Guide SimpleDNSPlus Simple DNS Plus Usage Guide Simply Simply.com (formerly UnoEuro) Usage Guide SSHProxy Custom SSH Script Usage Guide TotalUptime TotalUptime Usage Guide UKFast UKFast Usage Guide Windows Microsoft Windows DNS Usage Guide Windows-Only 1 Yandex Yandex DNS Usage Guide Zilore Zilore Usage Guide Zonomi Zonomi DNS Usage Guide Notes \u00b6 1 : When using the Windows DNS plugin on Windows from PowerShell Core, you must be on PowerShell 7+ to use the DnsServer module via implicit remoting. HTTP Plugins \u00b6 HTTP plugins were added in Posh-ACME 4.x. To request support for a particular web server or provider, please submit an issue . Pull requests for new plugins are also welcome and appreciated. See the plugin development guide for more info. Released \u00b6 Plugin Notes Guide WebRoot Copies challenge files to a location on the filesystem. Usage Guide WebSelfHost Runs a self-hosted web server to answer challenge requests Usage Guide","title":"Supported Plugins"},{"location":"Plugins/#supported-plugins","text":"","title":"Supported Plugins"},{"location":"Plugins/#dns-plugins","text":"To request support for a particular DNS provider, please submit an issue . Pull requests for new plugins are also welcome and appreciated. See the plugin development guide for more info. If you are running Posh-ACME on PowerShell Core from a non-Windows OS, check the PS Core Compatible column to make sure the plugin is supported. Also check the usage guide for non-Windows specific instructions. Note Some of the provider links below are affiliate links which help reduce my out of pocket costs maintaining these plugins. I would be most grateful if you use them when signing up for new service.","title":"DNS Plugins"},{"location":"Plugins/#released","text":"Plugin Provider Guide PS Core Compatible AcmeDns acme-dns Usage Guide Active24 Active24 Usage Guide Akamai Akamai Edge DNS Usage Guide Aliyun Aliyun (Alibaba Cloud) Usage Guide All-Inkl All-Inkl Usage Guide Aurora PCExtreme Usage Guide AutoDNS AutoDNS XML Gateway Usage Guide Azure Microsoft Azure DNS Usage Guide Beget Beget.com Usage Guide BlueCat BlueCat Address Manager Usage Guide Bunny Bunny.net Usage Guide Cloudflare Cloudflare DNS Usage Guide ClouDNS ClouDNS Usage Guide Combell Combell Usage Guide Constellix Constellix Usage Guide CoreNetworks Core Networks Usage Guide DeSEC DeSEC DNS Usage Guide DMEasy DNS Made Easy Usage Guide DNSimple DNSimple DNS Usage Guide DNSPod DNSPod Usage Guide DOcean Digital Ocean Usage Guide DomainOffensive Domain Offensive Usage Guide Domeneshop Domeneshop DNS Usage Guide Dreamhost Dreamhost DNS Usage Guide DuckDNS Duck DNS Usage Guide Dynu Dynu DNS Usage Guide EasyDNS EasyDNS Usage Guide Easyname easyname.com Usage Guide FreeDNS Free DNS Usage Guide Gandi Gandi LiveDNS Usage Guide GCloud Google Cloud DNS Usage Guide Google Domains Google Domains Usage Guide GoDaddy GoDaddy Usage Guide Hetzner Hetzner Usage Guide HostingDe Hosting.de Usage Guide HurricaneElectric Hurricane Electric DNS Usage Guide IBMSoftLayer IBM Cloud DNS Usage Guide Infoblox Infoblox NIOS Usage Guide Infomaniak Infomaniak Usage Guide IONOS IONOS Usage Guide ISPConfig ISPConfig Usage Guide LeaseWeb LeaseWeb Usage Guide Linode Linode DNS Usage Guide Loopia LoopiaDNS Usage Guide LuaDns LuaDns Usage Guide Manual Manual Record Creation Namecheap Namecheap FreeDNS Usage Guide NameCom Name.com Usage Guide NS1 NS1 DNS Usage Guide OVH OVH.com Usage Guide PointDNS PointDNS Usage Guide Porkbun Porkbun Usage Guide PortsManagement PortsManagement Usage Guide Rackspace Rackspace Cloud DNS Usage Guide Regru Reg.ru and Reg.com Usage Guide RFC2136 RFC 2136 Usage Guide Route53 AWS Route53 Usage Guide Selectel Selectel.ru Usage Guide SimpleDNSPlus Simple DNS Plus Usage Guide Simply Simply.com (formerly UnoEuro) Usage Guide SSHProxy Custom SSH Script Usage Guide TotalUptime TotalUptime Usage Guide UKFast UKFast Usage Guide Windows Microsoft Windows DNS Usage Guide Windows-Only 1 Yandex Yandex DNS Usage Guide Zilore Zilore Usage Guide Zonomi Zonomi DNS Usage Guide","title":"Released"},{"location":"Plugins/#notes","text":"1 : When using the Windows DNS plugin on Windows from PowerShell Core, you must be on PowerShell 7+ to use the DnsServer module via implicit remoting.","title":"Notes"},{"location":"Plugins/#http-plugins","text":"HTTP plugins were added in Posh-ACME 4.x. To request support for a particular web server or provider, please submit an issue . Pull requests for new plugins are also welcome and appreciated. See the plugin development guide for more info.","title":"HTTP Plugins"},{"location":"Plugins/#released_1","text":"Plugin Notes Guide WebRoot Copies challenge files to a location on the filesystem. Usage Guide WebSelfHost Runs a self-hosted web server to answer challenge requests Usage Guide","title":"Released"},{"location":"Plugins/AcmeDns/","text":"How To Use the AcmeDns Plugin \u00b6 This plugin works against acme-dns which is limited DNS server implementation designed specifically to handle DNS challenges for the ACME protocol. It will also work against acme-dns compatible APIs such as Certify DNS . It is useful when the DNS provider for your domain doesn't have a supported plugin or security policies/limitations in your environment don't allow you to use a supported plugin. Initial certificate generation requires some manual steps, but renewals can be automated just like other plugins. Setup \u00b6 While there is a publicly accessible acme-dns instance that you can use to test with at https://auth.acme-dns.io, it is not recommended for production use. Instead, you should run your own instance using the install instructions on the project page or sign up for a commercial service such as Certify DNS . Once you have your instance running, it needs to be accessible via HTTPS to your client and via standard DNS (port 53) to ACME servers on the Internet. Using the Plugin \u00b6 If your acme-dns instance is using the default configuration running with TLS on port 443, the only required parameter for the plugin is ACMEServer which is the hostname of your instance. If you are not using TLS, using an alternate port, or require additional uri path segments, you will need to specify the full URI using ACMEUri instead. It's possible to configure acme-dns to require additonal Basic authentication which is also the case with some commercial acme-dns implementations. If that is true for your instance, you may pass the credentials using ACMECredential or embedded within the ACMEUri value. Warning It is recommended to use ACMECredential instead of embedding the credentials in the ACMEUri parameter because the URI value is not encrypted when saved to disk. There is also an optional ACMEAllowFrom parameter which takes an array of strings with networks specified in CIDR notation. If included, these networks will be the only ones that can send TXT record updates to the server for the registrations that get created as part of the certificate request. In some environments, it may make more sense to control network access via standard firewalls. This plugin is ultimately using CNAME aliases for DNS challenges under the hood. The first time you use it, you will be prompted to create the necessary CNAME records for each new name included in a cert. PS C:\\> New-PACertificate example . com -Plugin AcmeDns -PluginArgs @{ ACMEServer = 'auth.acme-dns.io' } Please create the following CNAME records: ------------------------------------------ _acme-challenge.example.com -> xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx.auth.acme-dns.io ------------------------------------------ Press any key to continue.: For each CNAME in the list, you need to create the associated record on your DNS server before continuing. Assuming the records get created properly, the process should complete successfully. Future renewals will complete without additional prompting as long as no new names are added to the cert. (Advanced) Pre-registration and CNAME creation \u00b6 Some organizations may want to pre-create the acme-dns registrations and add the necessary CNAME records to their DNS infrastructure prior to working with Posh-ACME. In this case, you can avoid the first-run interactive prompts by passing the necessary registration object(s) in a hashtable using the ACMERegistration parameter. For example, a cert that contains example.com and www.example.com will have two acme-dns registrations created (one for each name). Each registration contains four values: subdomain, username, password, and full domain. Creating the registration objects and creating the certificate might look something like this: $reg = @{ '_acme-challenge.example.com' = @( # the array order of these values is important '9aa5ce59-635e-440c-b2ca-12ee3503ddee' # subdomain '1b5cce3b-255d-4ffb-a81f-a9e27167ac7a' # username 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx' # password '9aa5ce59-635e-440c-b2ca-12ee3503ddee.acmedns.example.com' # full domain ) '_acme-challenge.www.example.com' = @( 'ec6ec1f4-836e-462e-b577-b2f4e04d7291' 'aeb00c77-852b-465e-9b27-984bc6cb12f5' 'yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy' 'ec6ec1f4-836e-462e-b577-b2f4e04d7291.acmedns.example.com' ) } $pArgs = @{ ACMEServer = 'acmedns.example.com' ACMERegistration = $reg } New-PACertificate example . com , www . example . com -Plugin AcmeDns -PluginArgs $pArgs","title":"AcmeDns"},{"location":"Plugins/AcmeDns/#how-to-use-the-acmedns-plugin","text":"This plugin works against acme-dns which is limited DNS server implementation designed specifically to handle DNS challenges for the ACME protocol. It will also work against acme-dns compatible APIs such as Certify DNS . It is useful when the DNS provider for your domain doesn't have a supported plugin or security policies/limitations in your environment don't allow you to use a supported plugin. Initial certificate generation requires some manual steps, but renewals can be automated just like other plugins.","title":"How To Use the AcmeDns Plugin"},{"location":"Plugins/AcmeDns/#setup","text":"While there is a publicly accessible acme-dns instance that you can use to test with at https://auth.acme-dns.io, it is not recommended for production use. Instead, you should run your own instance using the install instructions on the project page or sign up for a commercial service such as Certify DNS . Once you have your instance running, it needs to be accessible via HTTPS to your client and via standard DNS (port 53) to ACME servers on the Internet.","title":"Setup"},{"location":"Plugins/AcmeDns/#using-the-plugin","text":"If your acme-dns instance is using the default configuration running with TLS on port 443, the only required parameter for the plugin is ACMEServer which is the hostname of your instance. If you are not using TLS, using an alternate port, or require additional uri path segments, you will need to specify the full URI using ACMEUri instead. It's possible to configure acme-dns to require additonal Basic authentication which is also the case with some commercial acme-dns implementations. If that is true for your instance, you may pass the credentials using ACMECredential or embedded within the ACMEUri value. Warning It is recommended to use ACMECredential instead of embedding the credentials in the ACMEUri parameter because the URI value is not encrypted when saved to disk. There is also an optional ACMEAllowFrom parameter which takes an array of strings with networks specified in CIDR notation. If included, these networks will be the only ones that can send TXT record updates to the server for the registrations that get created as part of the certificate request. In some environments, it may make more sense to control network access via standard firewalls. This plugin is ultimately using CNAME aliases for DNS challenges under the hood. The first time you use it, you will be prompted to create the necessary CNAME records for each new name included in a cert. PS C:\\> New-PACertificate example . com -Plugin AcmeDns -PluginArgs @{ ACMEServer = 'auth.acme-dns.io' } Please create the following CNAME records: ------------------------------------------ _acme-challenge.example.com -> xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx.auth.acme-dns.io ------------------------------------------ Press any key to continue.: For each CNAME in the list, you need to create the associated record on your DNS server before continuing. Assuming the records get created properly, the process should complete successfully. Future renewals will complete without additional prompting as long as no new names are added to the cert.","title":"Using the Plugin"},{"location":"Plugins/AcmeDns/#advanced-pre-registration-and-cname-creation","text":"Some organizations may want to pre-create the acme-dns registrations and add the necessary CNAME records to their DNS infrastructure prior to working with Posh-ACME. In this case, you can avoid the first-run interactive prompts by passing the necessary registration object(s) in a hashtable using the ACMERegistration parameter. For example, a cert that contains example.com and www.example.com will have two acme-dns registrations created (one for each name). Each registration contains four values: subdomain, username, password, and full domain. Creating the registration objects and creating the certificate might look something like this: $reg = @{ '_acme-challenge.example.com' = @( # the array order of these values is important '9aa5ce59-635e-440c-b2ca-12ee3503ddee' # subdomain '1b5cce3b-255d-4ffb-a81f-a9e27167ac7a' # username 'xxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxxx' # password '9aa5ce59-635e-440c-b2ca-12ee3503ddee.acmedns.example.com' # full domain ) '_acme-challenge.www.example.com' = @( 'ec6ec1f4-836e-462e-b577-b2f4e04d7291' 'aeb00c77-852b-465e-9b27-984bc6cb12f5' 'yyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyyy' 'ec6ec1f4-836e-462e-b577-b2f4e04d7291.acmedns.example.com' ) } $pArgs = @{ ACMEServer = 'acmedns.example.com' ACMERegistration = $reg } New-PACertificate example . com , www . example . com -Plugin AcmeDns -PluginArgs $pArgs","title":"(Advanced) Pre-registration and CNAME creation"},{"location":"Plugins/Active24/","text":"How To Use the Active24 DNS Plugin \u00b6 This plugin works against the Active24 DNS provider. It is assumed that you have already setup an account and created the DNS zone(s) you will be working against. Setup \u00b6 First, login to your account. Tokens are placed at Customer data edit page, in Tokens management . There is need to type in your password again to manage the tokens. Detailed walk through: \u00b6 Using your login information log in to Customer center . Click on the user name in the upper right corner or you may use direct link to the API management . You may Enter to the API management at the bottom of this page. Use the Create a new token button to setup new API token. The Comment is not mandatory , it simply helps to manage created tokens. The expiration date is also optional. In the Access restrictions can be specified the IP address of the device that can work with the token. If the device with a different IP address used functional token, it will not perform any requests - the requests cannot be authorized. Once you fill everything you need, you can Create a new token . There is a password confirmation required. Using the Plugin \u00b6 With your token value, you'll need to set the A24Token SecureString parameter. $pArgs = @{ A24Token = ( Read-Host \"Active24 Token\" -AsSecureString ) } New-PACertificate example . com -Plugin Active24 -PluginArgs $pArgs","title":"Active24"},{"location":"Plugins/Active24/#how-to-use-the-active24-dns-plugin","text":"This plugin works against the Active24 DNS provider. It is assumed that you have already setup an account and created the DNS zone(s) you will be working against.","title":"How To Use the Active24 DNS Plugin"},{"location":"Plugins/Active24/#setup","text":"First, login to your account. Tokens are placed at Customer data edit page, in Tokens management . There is need to type in your password again to manage the tokens.","title":"Setup"},{"location":"Plugins/Active24/#detailed-walk-through","text":"Using your login information log in to Customer center . Click on the user name in the upper right corner or you may use direct link to the API management . You may Enter to the API management at the bottom of this page. Use the Create a new token button to setup new API token. The Comment is not mandatory , it simply helps to manage created tokens. The expiration date is also optional. In the Access restrictions can be specified the IP address of the device that can work with the token. If the device with a different IP address used functional token, it will not perform any requests - the requests cannot be authorized. Once you fill everything you need, you can Create a new token . There is a password confirmation required.","title":"Detailed walk through:"},{"location":"Plugins/Active24/#using-the-plugin","text":"With your token value, you'll need to set the A24Token SecureString parameter. $pArgs = @{ A24Token = ( Read-Host \"Active24 Token\" -AsSecureString ) } New-PACertificate example . com -Plugin Active24 -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/Akamai/","text":"How To Use the Akamai Plugin \u00b6 This plugin works against the Akamai Edge DNS provider (formerly known as Fast DNS). It is assumed that you already have an account and one or more primary zones hosted. Setup \u00b6 You will need a set of tokens associated with what Akamai calls an \"API Client\". If you are a Control Center administrator, you should be able to create this for yourself in the Identity Management section using the instructions here . You will need Read/Write access to DNS Zones and Records. The end of this process should generate a set of four values: host , client_token , client_secret , and access_token . If you are not the Control Center administrator, your administrator should be able to provide these values to you after creating an API client on your behalf. Depending on how you want to use the plugin, you can either add the values to a .edgerc file and reference that file path with the plugin or just reference the values directly. Details on those options are provided below. Using the Plugin \u00b6 Akamai is one of the few DNS providers with an API to check whether changes have propagated to the authoritative nameservers for your zones and this plugin will use it automatically. What this means is that if all of the names in your certificate are using the Akamai plugin, you may want to decrease the default DNSSleep parameter from 120 seconds down to something small like 10 seconds because the changes should be propagated by the time the sleep timer would normally start. The examples below will demonstrate. Explicit API Options \u00b6 Specify API values individually using AKHost , AKClientToken , and AKAccessToken as string values and AKClientSecret as a SecureString value Warning The AKClientSecretInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ AKHost = 'myhost.akamaiapis.net' AKClientToken = 'xxxxxxxxxxxx' AKClientSecret = ( Read-Host \"Client Secret\" -AsSecureString ) AKAccessToken = 'yyyyyyyyyyyy' } New-PACertificate example . com -Plugin Akamai -PluginArgs $pArgs -DNSSleep 10 .edgerc Options \u00b6 If your API client values are stored in a .edgerc file, you can use the AKUseEdgeRC parameter rather than specifying all the values explicitly. Use the AKEdgeRCFile and AKEdgeRCSection parameters if your file is not in the default ~\\.edgerc location or the [default] section. Make sure the user who will be running the commands has read access to this file. # default location and section New-PACertificate example . com -Plugin Akamai -PluginArgs @{ AKUseEdgeRC = $true } -DNSSleep 10 # alternate location and section $pArgs = @{ AKUseEdgeRC = $true AKEdgeRCFile = 'C:\\ProgramData\\.edgerc' AKEdgeRCSection = 'poshacme' } New-PACertificate example . com -Plugin Akamai -PluginArgs $pArgs -DNSSleep 10","title":"Akamai"},{"location":"Plugins/Akamai/#how-to-use-the-akamai-plugin","text":"This plugin works against the Akamai Edge DNS provider (formerly known as Fast DNS). It is assumed that you already have an account and one or more primary zones hosted.","title":"How To Use the Akamai Plugin"},{"location":"Plugins/Akamai/#setup","text":"You will need a set of tokens associated with what Akamai calls an \"API Client\". If you are a Control Center administrator, you should be able to create this for yourself in the Identity Management section using the instructions here . You will need Read/Write access to DNS Zones and Records. The end of this process should generate a set of four values: host , client_token , client_secret , and access_token . If you are not the Control Center administrator, your administrator should be able to provide these values to you after creating an API client on your behalf. Depending on how you want to use the plugin, you can either add the values to a .edgerc file and reference that file path with the plugin or just reference the values directly. Details on those options are provided below.","title":"Setup"},{"location":"Plugins/Akamai/#using-the-plugin","text":"Akamai is one of the few DNS providers with an API to check whether changes have propagated to the authoritative nameservers for your zones and this plugin will use it automatically. What this means is that if all of the names in your certificate are using the Akamai plugin, you may want to decrease the default DNSSleep parameter from 120 seconds down to something small like 10 seconds because the changes should be propagated by the time the sleep timer would normally start. The examples below will demonstrate.","title":"Using the Plugin"},{"location":"Plugins/Akamai/#explicit-api-options","text":"Specify API values individually using AKHost , AKClientToken , and AKAccessToken as string values and AKClientSecret as a SecureString value Warning The AKClientSecretInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ AKHost = 'myhost.akamaiapis.net' AKClientToken = 'xxxxxxxxxxxx' AKClientSecret = ( Read-Host \"Client Secret\" -AsSecureString ) AKAccessToken = 'yyyyyyyyyyyy' } New-PACertificate example . com -Plugin Akamai -PluginArgs $pArgs -DNSSleep 10","title":"Explicit API Options"},{"location":"Plugins/Akamai/#edgerc-options","text":"If your API client values are stored in a .edgerc file, you can use the AKUseEdgeRC parameter rather than specifying all the values explicitly. Use the AKEdgeRCFile and AKEdgeRCSection parameters if your file is not in the default ~\\.edgerc location or the [default] section. Make sure the user who will be running the commands has read access to this file. # default location and section New-PACertificate example . com -Plugin Akamai -PluginArgs @{ AKUseEdgeRC = $true } -DNSSleep 10 # alternate location and section $pArgs = @{ AKUseEdgeRC = $true AKEdgeRCFile = 'C:\\ProgramData\\.edgerc' AKEdgeRCSection = 'poshacme' } New-PACertificate example . com -Plugin Akamai -PluginArgs $pArgs -DNSSleep 10","title":".edgerc Options"},{"location":"Plugins/Aliyun/","text":"How To Use the Aliyun (Alibaba Cloud) DNS Plugin \u00b6 This plugin works against the Aliyun (Alibaba Cloud) DNS provider. It is assumed that you have already setup an account and registered the domains or zones you will be working against. Setup \u00b6 First, login to your account and go to the Security Management page. Click the Create Access Key link and make a note of the Key ID and Secret values. Note It is also supported recommended to use RAM (Resource Access Management) users with more limited privileges instead of your root account key. More information about creating RAM users can be found here . Using the Plugin \u00b6 The Key ID is specified as a string using AliKeyId and the secret is specified as a SecureString using AliSecret . Warning The AliSecretInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $secret = Read-Host \"Secret\" -AsSecureString $pArgs = @{ AliKeyId = 'asdf1234' AliSecret = $secret } New-PACertificate example . com -Plugin Aliyun -PluginArgs $pArgs","title":"Aliyun"},{"location":"Plugins/Aliyun/#how-to-use-the-aliyun-alibaba-cloud-dns-plugin","text":"This plugin works against the Aliyun (Alibaba Cloud) DNS provider. It is assumed that you have already setup an account and registered the domains or zones you will be working against.","title":"How To Use the Aliyun (Alibaba Cloud) DNS Plugin"},{"location":"Plugins/Aliyun/#setup","text":"First, login to your account and go to the Security Management page. Click the Create Access Key link and make a note of the Key ID and Secret values. Note It is also supported recommended to use RAM (Resource Access Management) users with more limited privileges instead of your root account key. More information about creating RAM users can be found here .","title":"Setup"},{"location":"Plugins/Aliyun/#using-the-plugin","text":"The Key ID is specified as a string using AliKeyId and the secret is specified as a SecureString using AliSecret . Warning The AliSecretInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $secret = Read-Host \"Secret\" -AsSecureString $pArgs = @{ AliKeyId = 'asdf1234' AliSecret = $secret } New-PACertificate example . com -Plugin Aliyun -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/All-Inkl/","text":"How To Use the All-Inkl KAS DNS Plugin \u00b6 This plugin works against the All-Inkl KAS DNS provider. It is assumed that you have already setup an account and created the DNS zone(s) you will be working against. Setup \u00b6 Using the All-Inkl KAS API only requires your accounts username and password. Using the Plugin \u00b6 In any case you have to provide the username with the KasUsername parameter.\\ In addition you can provide the password as SecureString in plain text by using the KasPwd parameter or as sha1 hash by using the KasPwdHash parameter. In both cases this plugin only sends a sha1 hash of your password to the All-Inkl KAS API. Alternatively you can handle the authentication yourself and provide a valid session id by specifying the KasSession parameter as SecureString. $pArgs = @{ KasUsername = 'myusername' KasPwd = ( Read-Host \"KAS Password\" -AsSecureString ) } New-PACertificate example . com -Plugin All-Inkl -PluginArgs $pArgs","title":"All-Inkl"},{"location":"Plugins/All-Inkl/#how-to-use-the-all-inkl-kas-dns-plugin","text":"This plugin works against the All-Inkl KAS DNS provider. It is assumed that you have already setup an account and created the DNS zone(s) you will be working against.","title":"How To Use the All-Inkl KAS DNS Plugin"},{"location":"Plugins/All-Inkl/#setup","text":"Using the All-Inkl KAS API only requires your accounts username and password.","title":"Setup"},{"location":"Plugins/All-Inkl/#using-the-plugin","text":"In any case you have to provide the username with the KasUsername parameter.\\ In addition you can provide the password as SecureString in plain text by using the KasPwd parameter or as sha1 hash by using the KasPwdHash parameter. In both cases this plugin only sends a sha1 hash of your password to the All-Inkl KAS API. Alternatively you can handle the authentication yourself and provide a valid session id by specifying the KasSession parameter as SecureString. $pArgs = @{ KasUsername = 'myusername' KasPwd = ( Read-Host \"KAS Password\" -AsSecureString ) } New-PACertificate example . com -Plugin All-Inkl -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/Aurora/","text":"How To Use the Aurora DNS Plugin \u00b6 This plugin works against the PCExtreme provider, Aurora DNS. It is assumed that you already have an account and at least one Managed zone you will be working against. Setup \u00b6 If you haven't done it already, you need to generate API Credentials for your account from the DNS - Health Checks Users page. When you open the user details, you should be provided with an API URL , Key and Secret value. These are what we will use with the plugin. Using the Plugin \u00b6 The API Key and Secret are passed as the username and password in a PSCredential object to the AuroraCredential parameter. There is also an optional AuroraApi parameter for the hostname provided in API URL which defaults to api.auroradns.eu . So if your API URL is the same, you can ignore that parameter. $pArgs = @{ AuroraCredential = ( Get-Credential )) } New-PACertificate example . com -Plugin Aurora -PluginArgs $pArgs","title":"Aurora"},{"location":"Plugins/Aurora/#how-to-use-the-aurora-dns-plugin","text":"This plugin works against the PCExtreme provider, Aurora DNS. It is assumed that you already have an account and at least one Managed zone you will be working against.","title":"How To Use the Aurora DNS Plugin"},{"location":"Plugins/Aurora/#setup","text":"If you haven't done it already, you need to generate API Credentials for your account from the DNS - Health Checks Users page. When you open the user details, you should be provided with an API URL , Key and Secret value. These are what we will use with the plugin.","title":"Setup"},{"location":"Plugins/Aurora/#using-the-plugin","text":"The API Key and Secret are passed as the username and password in a PSCredential object to the AuroraCredential parameter. There is also an optional AuroraApi parameter for the hostname provided in API URL which defaults to api.auroradns.eu . So if your API URL is the same, you can ignore that parameter. $pArgs = @{ AuroraCredential = ( Get-Credential )) } New-PACertificate example . com -Plugin Aurora -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/AutoDNS/","text":"How To Use the AutoDNS DNS Plugin \u00b6 This plugin works against any DNS provider that utilizes the AutoDNS XML API from InternetX . Schlundtech is an example of a registrar who uses this API. It is assumed that you have already setup an account and registered the domains or zones you will be working against. Setup \u00b6 In addition to your username and password, you will also need a \"Context\" value for your account. This is typically a number and varies per provider. The plugin defaults to 4 . If you are not using InternetX directly, you will also need the XML gateway URL. The plugin defaults to gateway.autodns.com . Using the Plugin \u00b6 AutoDNSUser , AutoDNSContext , and AutoDNSGateway are specified using regular string values. AutoDNSPassword is a SecureString value. Warning The AutoDNSPasswordInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ AutoDNSUser = 'myusername' AutoDNSPassword = ( Read-Host -Prompt \"Password\" -AsSecureString ) AutoDNSContext = '4' AutoDNSGateway = 'gateway.autodns.com' } New-PACertificate example . com -Plugin AutoDNS -PluginArgs $pArgs","title":"AutoDNS"},{"location":"Plugins/AutoDNS/#how-to-use-the-autodns-dns-plugin","text":"This plugin works against any DNS provider that utilizes the AutoDNS XML API from InternetX . Schlundtech is an example of a registrar who uses this API. It is assumed that you have already setup an account and registered the domains or zones you will be working against.","title":"How To Use the AutoDNS DNS Plugin"},{"location":"Plugins/AutoDNS/#setup","text":"In addition to your username and password, you will also need a \"Context\" value for your account. This is typically a number and varies per provider. The plugin defaults to 4 . If you are not using InternetX directly, you will also need the XML gateway URL. The plugin defaults to gateway.autodns.com .","title":"Setup"},{"location":"Plugins/AutoDNS/#using-the-plugin","text":"AutoDNSUser , AutoDNSContext , and AutoDNSGateway are specified using regular string values. AutoDNSPassword is a SecureString value. Warning The AutoDNSPasswordInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ AutoDNSUser = 'myusername' AutoDNSPassword = ( Read-Host -Prompt \"Password\" -AsSecureString ) AutoDNSContext = '4' AutoDNSGateway = 'gateway.autodns.com' } New-PACertificate example . com -Plugin AutoDNS -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/Azure/","text":"How To Use the Azure DNS Plugin \u00b6 This plugin works against the Azure DNS provider. It is assumed that you already have an active subscription with at least one DNS zone, associated Resource Group, and an account with access to create roles and app registrations. The setup commands used in this guide will also make use of the Az module. But it is not required to use the plugin normally. Setup \u00b6 This plugin has three distinct methods for authentication against Azure. The first involves specifying a Tenant ID and credentials for an account or app registration. The second requires an existing OAuth 2.0 access token which would generally be used for short lived services or environments where Azure authentication is being handled externally to the Posh-ACME module. The last is for systems running within Azure that have a Managed Service Identity (MSI) and utilizes the Instance Metadata Service (IMDS) to request an access token. All methods require that the identity being used to authenticate has been given access to modify TXT records in the specified Azure subscription. If you have already done that, you can skip most of the following setup. Connect to Azure \u00b6 Using an account with access to create roles and app registrations, connect to Azure with the following commands. We'll be saving the resulting Subscription and Tenant ID values for later. # On Windows, this will pop up a web-GUI to login with. On other OSes, # it will ask you to open a browser separately with a code for logging in. $az = Connect-AzAccount # Save the subscription/tentant ID for later $subscriptionID = $az . Context . Subscription . Id $tenantID = $az . Context . Subscription . TenantId Create a Custom Role \u00b6 We're going to create a custom role that is limited to modifying TXT records in whatever resource group it is assigned to. It will be based on the default DNS Zone Contributor role. $roleDef = Get-AzRoleDefinition -Name \"DNS Zone Contributor\" $roleDef . Id = $null $roleDef . Name = \"DNS TXT Contributor\" $roleDef . Description = \"Manage DNS TXT records only.\" $roleDef . Actions . RemoveRange ( 0 , $roleDef . Actions . Count ) $roleDef . Actions . Add ( \"Microsoft.Network/dnsZones/TXT/*\" ) $roleDef . Actions . Add ( \"Microsoft.Network/dnsZones/read\" ) $roleDef . Actions . Add ( \"Microsoft.Authorization/*/read\" ) $roleDef . Actions . Add ( \"Microsoft.Insights/alertRules/*\" ) $roleDef . Actions . Add ( \"Microsoft.ResourceHealth/availabilityStatuses/read\" ) $roleDef . Actions . Add ( \"Microsoft.Resources/deployments/read\" ) $roleDef . Actions . Add ( \"Microsoft.Resources/subscriptions/resourceGroups/read\" ) $roleDef . AssignableScopes . Clear () $roleDef . AssignableScopes . Add ( \"/subscriptions/ $( $az . Context . Subscription . Id ) \" ) $role = New-AzRoleDefinition $roleDef $role (Optional) Create a Service Principal / App Registration \u00b6 If you're using Posh-ACME from outside Azure and not using an existing access token, it is wise to create a dedicated service principal limited to modifying TXT records. Service Principals are tied to App Registrations in Azure AD and creating the former will automatically create the latter (though it's technically possible to create them separately). Service Principals are associated with one or more Credentials which can be password or certificated based. Certificates can be a bit trickier to setup particularly on non-Windows OSes, but Microsoft recommends them over passwords. We'll go over both methods below. Both also have configurable expiration values that default to 1 year and we'll be setting ours to 5 years, but you can choose whatever you like. $notBefore = Get-Date $notAfter = $notBefore . AddYears ( 5 ) Password Based Principal \u00b6 The New-AzADServicePrincipal function will generate a password for us, so all we have to do is give it a name and specify our expiration dates. $spParams = @{ DisplayName = 'PoshACME' StartDate = $notBefore EndDate = $notAfter } $sp = New-AzADServicePrincipal @spParams You'll use your new credential with the AZAppCred plugin parameter. The username is in the AppId property and the password is in PasswordCredentials.SecretText . Here's how to create the credential object for later. $spPass = $sp . PasswordCredentials . SecretText | ConvertTo-SecureString -AsPlainText -Force $appCred = [pscredential] :: new ( $sp . AppId , $spPass ) Certificate Based Principal on Windows \u00b6 Before we can create a certificate based credential, we have to actually create a certificate to use with it. Self-signed certs are fine here because we're only using them to sign data and Azure just needs to verify the signature using the public key we will associate with the principal. Note New-SelfSignedCertificate is only available on Windows 10/2016 or later. Check this document for instructions on earlier OSes. Note If you plan on using an existing certificate, make sure it is being stored using the legacy CSP called \"Microsoft Enhanced RSA and AES Cryptographic Provider\" that supports the SHA256 hashing algorithm. PowerShell doesn't yet support retrieving private key values from newer KSP based providers. # Keep in mind that this certificate will be created in the current user's certificate # store. If you intend to use it from another account, you will need to either create it # there or export it and re-import it there. $certParams = @{ CertStoreLocation = 'Cert:\\CurrentUser\\My' Subject = 'CN=Azure App PoshACME' HashAlgorithm = 'SHA256' Provider = 'Microsoft Enhanced RSA and AES Cryptographic Provider' NotBefore = $notBefore NotAfter = $notAfter } $cert = New-SelfSignedCertificate @certParams $certData = [System.Convert] :: ToBase64String ( $cert . GetRawCertData ()) $spParams = @{ DisplayName = 'PoshACME' CertValue = $certData StartDate = $cert . NotBefore EndDate = $cert . NotAfter } $sp = New-AzADServicePrincipal @spParams You'll use your new credential with the AZAppUsername and AZCertThumbprint plugin parameters. Here's how to save a reference to them for later. $appUser = $sp . AppId $thumbprint = $cert . Thumbprint Certificate Based Principal on non-Windows \u00b6 Before we can create a certificate based credential, we have to actually create a certificate to use with it. As of PowerShell 6.2.3, the non-Windows support for .NET's certificate store abstraction is still not great. So we need to create the cert with OpenSSL and reference a PFX file directly rather than using the thumbprint value like on Windows. Self-signed certs are fine here because we're only using them to sign data and Azure just needs to verify the signature using the public key we will associate with the principal. # Depending on your OpenSSL config, this may prompt you for certificate details # like Country, Organization, etc. None of the details matter for the purposes of # authentication and can be set to anything you like. openssl req -x509 -nodes -sha256 -days 1826 -newkey rsa : 2048 -keyout poshacme . key -out poshacme . crt # change the export password to whatever you want, but remember what it is so you can # provide it as part of the plugin parameters openssl pkcs12 -export -in poshacme . crt -inkey poshacme . key -CSP \"Microsoft Enhanced RSA and AES Cryptographic Provider\" -out poshacme . pfx -passout \"pass:poshacme\" $cert = [Security.Cryptography.X509Certificates.X509Certificate2] :: new (( Resolve-Path './poshacme.crt' )) $certData = [Convert] :: ToBase64String ( $cert . GetRawCertData ()) $spParams = @{ DisplayName = 'PoshACMELinux' CertValue = $certData StartDate = $cert . NotBefore EndDate = $cert . NotAfter } $sp = New-AzADServicePrincipal @spParams # (optional) delete the PEM files we don't need for plugin purposes rm poshacme . crt poshacme . key # IMPORTANT: Anyone who can read the crt/key or pfx files may be able to impersonate this # service principal. So make sure to move and/or change permissions on the files so # that only the process running Posh-ACME can read them. You'll use your new credential with the AZAppUsername , AZCertPfx , and AZPfxPassSecure plugin parameters. Here's how to save a reference to them for later. $appUser = $sp . AppId # modify the path and/or password as appropriate $certPfx = ( Resolve-Path './poshacme.pfx' ). ToString () # remember to use the password you used with openssl $pfxPass = ConvertToSecureString 'poshacme' -AsPlainText -Force Assign Permissions to the Service Principal \u00b6 Now we'll tie everything together by assigning the service principal we created to the custom Role we created and the Resource Group that contains our DNS zones. If your zones are in more than one resource group, just repeat this for each one. If you used your own method for creating a service princpal, just use Get-AzAdServicePrincipal to get a reference to it first. # modify the ResourceGroupName as appropriate for your environment $raParams = @{ ApplicationId = $sp . AppId ResourceGroupName = 'MyZones' RoleDefinitionName = 'DNS TXT Contributor' } New-AzRoleAssignment @raParams (Optional) Using a Managed Service Identity (MSI) \u00b6 When using a Managed Service Identity (MSI) , we need the security principal ID of the VM or Service to assign permissions to. This example will query a VM. # NOTE: The VM must have a managed identity associated with it for this to work $spID = ( Get-AzVM -ResourceGroupName '<VM Resource Group>' -Name '<VM Name>' ). Identity . PrincipalId $raParams = @{ ObjectId = $spID ResourceGroupName = 'MyZones' RoleDefinitionName = 'DNS TXT Contributor' } New-AzRoleAssignment @raParams In addition to the AZSubscriptionId plugin parameter that all auth methods must provide, the only plugin parameter you'll need is the AZUseIMDS switch. (Optional) Using An Existing Access Token \u00b6 Any existing user, application, or managed service principal should work as long as it has been assigned permissions to manage DNS TXT records in the zones you're requesting certificates for. Here is how to get the token for the context you are currently logged in with using with Powershell. The method depends on what version of the Az.Accounts module you're using. # Az.Accounts 1.9.x or earlier $ctx = Get-AzContext $token = ( $ctx . TokenCache . ReadItems () | ?{ $_ . TenantId -eq $ctx . Subscription . TenantId -and $_ . Resource -eq \"https://management.core.windows.net/\" } | Select-Object -First 1 ). AccessToken # Az.Accounts 2.0.x or later $token = ( Get-AzAccessToken -ResourceUrl \"https://management.core.windows.net/\" -TenantId $tenantId ). Token Here's a similar method using Azure CLI 2.0. # show all subscriptions - the one marked as \"isDefault\": true will be used to create the token az account list $token = ( az account get-access -token - -resource 'https://management.core.windows.net/' | ConvertFrom-Json ). accessToken To get a token for the MSI when running in a VM, Azure Function or App Service - please refer to the following documentation. Remember to pass in the correct resource uri: https://management.core.windows.net/ Getting a token for an MSI-enabled VM Getting a token for an MSI-enabled App Service or Function Using the Plugin \u00b6 All authentication methods require specifying AZSubscriptionId which is the subscription that contains the DNS zones to modify. Password and Certificate based credentials also require AZTenantId which is the Azure AD tenant guid. Additional parameters are outlined in each section below. Note The plugin defaults to using the primary public Azure Cloud. But country and government specific Azure clouds are also supported by specifying the AZEnvironment parameter. Supported environments include AzureCloud (Default), AzureUSGovernment , AzureGermanCloud , and AzureChinaCloud . Password Credential \u00b6 Subscription and Tenant values are passed as standard strings using AZSubscriptionId and AZTenantId . The credential is passed as a PSCredential object using AZAppCred . PSCredential objects require a username and password. For a service principal, the username is the its ApplicationId guid and the password is whatever was originally set for it. If you've been following the setup instructions, you may have $subscriptionID , $tenantID , and $appCred variables you can use instead of the sample values below. Warning The AZAppUsername and AZAppPasswordInsecure parameters are deprecated and will be removed in the next major module version. If you are using them, please migrate to a secure parameter set. $pArgs = @{ AZSubscriptionId = 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx' AZTenantId = 'yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy' AZAppCred = ( Get-Credential ) } New-PACertificate example . com -Plugin Azure -PluginArgs $pArgs Certificate Credential \u00b6 As of PowerShell 6.2.3 (November 2019), support for the certificate store abstractions only really works on Windows. So there are separate instructions for Windows and non-Windows OSes. Windows Certificate \u00b6 You'll need to specify the service principal username which is its ApplicationId guid and the certificate thumbprint value. If you've been following the setup instructions, you may have $subscriptionID , $tenantID , $appUser , and $thumbprint variables you can use instead of the sample values below. $pArgs = @{ AZSubscriptionId = 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx' AZTenantId = 'yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy' AZAppUsername = 'zzzzzzzz-zzzz-zzzz-zzzz-zzzzzzzzzzzz' AZCertThumbprint = '1A2B3C4D5E6F1A2B3C4D5E6F1A2B3C4D5E6F1A2B' } New-PACertificate example . com -Plugin Azure -PluginArgs $pArgs Non-Windows Certificate \u00b6 You'll need to specify the service principal username which is its ApplicationId guid, the path to the PFX file, and the PFX password as a SecureString. If you've been following the setup instructions, you may have $subscriptionID , $tenantID , $appUser , $certPfx , and $pfxPass variables you can use instead of the sample values below. Warning The AZPfxPass parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to a secure parameter set. $pArgs = @{ AZSubscriptionId = 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx' AZTenantId = 'yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy' AZAppUsername = 'zzzzzzzz-zzzz-zzzz-zzzz-zzzzzzzzzzzz' AZCertPfx = '/home/certuser/poshacme.pfx' AZPfxPassSecure = ( ConvertTo-SecureString 'poshacme' -AsPlainText -Force ) } New-PACertificate example . com -Plugin Azure -PluginArgs $pArgs Existing Access Token \u00b6 Only the subscription guid and the access token you previously retrieved are required for this method. $pArgs = @{ AZSubscriptionId = 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx' AZAccessToken = $token } New-PACertificate example . com -Plugin Azure -PluginArgs $pArgs Instance Metadata Service (IMDS) \u00b6 Only the subscription guid and the AZUseIMDS switch are required for this method. $pArgs = @{ AZSubscriptionId = 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx' AZUseIMDS = $true } New-PACertificate example . com -Plugin Azure -PluginArgs $pArgs Workaround for Duplicate Public Zones \u00b6 In rare cases, a subscription may have two or more public copies of the same zone in different resource groups. When this happens, the plugin will throw an error such as: 2 public copies of example.com zone found. Please use 'poshacme' tag on the live copy. To workaround this problem, there are two main options. The easiest is to add an Azure Tag called poshacme on the live copy of the zone. The tag value doesn't matter as long as the name is poshacme . The plugin will recognize this tag and ignore the other copies of the zone. (Note: This requires version 3.2.1 of the module or later) The other solution is to remove permissions from the Azure account being used with Posh-ACME so it can only see the resource group that contains the live copy of the zone. But this may not be feasible depending on what else is in the resource group and what else the Azure account is being used for.","title":"Azure"},{"location":"Plugins/Azure/#how-to-use-the-azure-dns-plugin","text":"This plugin works against the Azure DNS provider. It is assumed that you already have an active subscription with at least one DNS zone, associated Resource Group, and an account with access to create roles and app registrations. The setup commands used in this guide will also make use of the Az module. But it is not required to use the plugin normally.","title":"How To Use the Azure DNS Plugin"},{"location":"Plugins/Azure/#setup","text":"This plugin has three distinct methods for authentication against Azure. The first involves specifying a Tenant ID and credentials for an account or app registration. The second requires an existing OAuth 2.0 access token which would generally be used for short lived services or environments where Azure authentication is being handled externally to the Posh-ACME module. The last is for systems running within Azure that have a Managed Service Identity (MSI) and utilizes the Instance Metadata Service (IMDS) to request an access token. All methods require that the identity being used to authenticate has been given access to modify TXT records in the specified Azure subscription. If you have already done that, you can skip most of the following setup.","title":"Setup"},{"location":"Plugins/Azure/#connect-to-azure","text":"Using an account with access to create roles and app registrations, connect to Azure with the following commands. We'll be saving the resulting Subscription and Tenant ID values for later. # On Windows, this will pop up a web-GUI to login with. On other OSes, # it will ask you to open a browser separately with a code for logging in. $az = Connect-AzAccount # Save the subscription/tentant ID for later $subscriptionID = $az . Context . Subscription . Id $tenantID = $az . Context . Subscription . TenantId","title":"Connect to Azure"},{"location":"Plugins/Azure/#create-a-custom-role","text":"We're going to create a custom role that is limited to modifying TXT records in whatever resource group it is assigned to. It will be based on the default DNS Zone Contributor role. $roleDef = Get-AzRoleDefinition -Name \"DNS Zone Contributor\" $roleDef . Id = $null $roleDef . Name = \"DNS TXT Contributor\" $roleDef . Description = \"Manage DNS TXT records only.\" $roleDef . Actions . RemoveRange ( 0 , $roleDef . Actions . Count ) $roleDef . Actions . Add ( \"Microsoft.Network/dnsZones/TXT/*\" ) $roleDef . Actions . Add ( \"Microsoft.Network/dnsZones/read\" ) $roleDef . Actions . Add ( \"Microsoft.Authorization/*/read\" ) $roleDef . Actions . Add ( \"Microsoft.Insights/alertRules/*\" ) $roleDef . Actions . Add ( \"Microsoft.ResourceHealth/availabilityStatuses/read\" ) $roleDef . Actions . Add ( \"Microsoft.Resources/deployments/read\" ) $roleDef . Actions . Add ( \"Microsoft.Resources/subscriptions/resourceGroups/read\" ) $roleDef . AssignableScopes . Clear () $roleDef . AssignableScopes . Add ( \"/subscriptions/ $( $az . Context . Subscription . Id ) \" ) $role = New-AzRoleDefinition $roleDef $role","title":"Create a Custom Role"},{"location":"Plugins/Azure/#optional-create-a-service-principal-app-registration","text":"If you're using Posh-ACME from outside Azure and not using an existing access token, it is wise to create a dedicated service principal limited to modifying TXT records. Service Principals are tied to App Registrations in Azure AD and creating the former will automatically create the latter (though it's technically possible to create them separately). Service Principals are associated with one or more Credentials which can be password or certificated based. Certificates can be a bit trickier to setup particularly on non-Windows OSes, but Microsoft recommends them over passwords. We'll go over both methods below. Both also have configurable expiration values that default to 1 year and we'll be setting ours to 5 years, but you can choose whatever you like. $notBefore = Get-Date $notAfter = $notBefore . AddYears ( 5 )","title":"(Optional) Create a Service Principal / App Registration"},{"location":"Plugins/Azure/#password-based-principal","text":"The New-AzADServicePrincipal function will generate a password for us, so all we have to do is give it a name and specify our expiration dates. $spParams = @{ DisplayName = 'PoshACME' StartDate = $notBefore EndDate = $notAfter } $sp = New-AzADServicePrincipal @spParams You'll use your new credential with the AZAppCred plugin parameter. The username is in the AppId property and the password is in PasswordCredentials.SecretText . Here's how to create the credential object for later. $spPass = $sp . PasswordCredentials . SecretText | ConvertTo-SecureString -AsPlainText -Force $appCred = [pscredential] :: new ( $sp . AppId , $spPass )","title":"Password Based Principal"},{"location":"Plugins/Azure/#certificate-based-principal-on-windows","text":"Before we can create a certificate based credential, we have to actually create a certificate to use with it. Self-signed certs are fine here because we're only using them to sign data and Azure just needs to verify the signature using the public key we will associate with the principal. Note New-SelfSignedCertificate is only available on Windows 10/2016 or later. Check this document for instructions on earlier OSes. Note If you plan on using an existing certificate, make sure it is being stored using the legacy CSP called \"Microsoft Enhanced RSA and AES Cryptographic Provider\" that supports the SHA256 hashing algorithm. PowerShell doesn't yet support retrieving private key values from newer KSP based providers. # Keep in mind that this certificate will be created in the current user's certificate # store. If you intend to use it from another account, you will need to either create it # there or export it and re-import it there. $certParams = @{ CertStoreLocation = 'Cert:\\CurrentUser\\My' Subject = 'CN=Azure App PoshACME' HashAlgorithm = 'SHA256' Provider = 'Microsoft Enhanced RSA and AES Cryptographic Provider' NotBefore = $notBefore NotAfter = $notAfter } $cert = New-SelfSignedCertificate @certParams $certData = [System.Convert] :: ToBase64String ( $cert . GetRawCertData ()) $spParams = @{ DisplayName = 'PoshACME' CertValue = $certData StartDate = $cert . NotBefore EndDate = $cert . NotAfter } $sp = New-AzADServicePrincipal @spParams You'll use your new credential with the AZAppUsername and AZCertThumbprint plugin parameters. Here's how to save a reference to them for later. $appUser = $sp . AppId $thumbprint = $cert . Thumbprint","title":"Certificate Based Principal on Windows"},{"location":"Plugins/Azure/#certificate-based-principal-on-non-windows","text":"Before we can create a certificate based credential, we have to actually create a certificate to use with it. As of PowerShell 6.2.3, the non-Windows support for .NET's certificate store abstraction is still not great. So we need to create the cert with OpenSSL and reference a PFX file directly rather than using the thumbprint value like on Windows. Self-signed certs are fine here because we're only using them to sign data and Azure just needs to verify the signature using the public key we will associate with the principal. # Depending on your OpenSSL config, this may prompt you for certificate details # like Country, Organization, etc. None of the details matter for the purposes of # authentication and can be set to anything you like. openssl req -x509 -nodes -sha256 -days 1826 -newkey rsa : 2048 -keyout poshacme . key -out poshacme . crt # change the export password to whatever you want, but remember what it is so you can # provide it as part of the plugin parameters openssl pkcs12 -export -in poshacme . crt -inkey poshacme . key -CSP \"Microsoft Enhanced RSA and AES Cryptographic Provider\" -out poshacme . pfx -passout \"pass:poshacme\" $cert = [Security.Cryptography.X509Certificates.X509Certificate2] :: new (( Resolve-Path './poshacme.crt' )) $certData = [Convert] :: ToBase64String ( $cert . GetRawCertData ()) $spParams = @{ DisplayName = 'PoshACMELinux' CertValue = $certData StartDate = $cert . NotBefore EndDate = $cert . NotAfter } $sp = New-AzADServicePrincipal @spParams # (optional) delete the PEM files we don't need for plugin purposes rm poshacme . crt poshacme . key # IMPORTANT: Anyone who can read the crt/key or pfx files may be able to impersonate this # service principal. So make sure to move and/or change permissions on the files so # that only the process running Posh-ACME can read them. You'll use your new credential with the AZAppUsername , AZCertPfx , and AZPfxPassSecure plugin parameters. Here's how to save a reference to them for later. $appUser = $sp . AppId # modify the path and/or password as appropriate $certPfx = ( Resolve-Path './poshacme.pfx' ). ToString () # remember to use the password you used with openssl $pfxPass = ConvertToSecureString 'poshacme' -AsPlainText -Force","title":"Certificate Based Principal on non-Windows"},{"location":"Plugins/Azure/#assign-permissions-to-the-service-principal","text":"Now we'll tie everything together by assigning the service principal we created to the custom Role we created and the Resource Group that contains our DNS zones. If your zones are in more than one resource group, just repeat this for each one. If you used your own method for creating a service princpal, just use Get-AzAdServicePrincipal to get a reference to it first. # modify the ResourceGroupName as appropriate for your environment $raParams = @{ ApplicationId = $sp . AppId ResourceGroupName = 'MyZones' RoleDefinitionName = 'DNS TXT Contributor' } New-AzRoleAssignment @raParams","title":"Assign Permissions to the Service Principal"},{"location":"Plugins/Azure/#optional-using-a-managed-service-identity-msi","text":"When using a Managed Service Identity (MSI) , we need the security principal ID of the VM or Service to assign permissions to. This example will query a VM. # NOTE: The VM must have a managed identity associated with it for this to work $spID = ( Get-AzVM -ResourceGroupName '<VM Resource Group>' -Name '<VM Name>' ). Identity . PrincipalId $raParams = @{ ObjectId = $spID ResourceGroupName = 'MyZones' RoleDefinitionName = 'DNS TXT Contributor' } New-AzRoleAssignment @raParams In addition to the AZSubscriptionId plugin parameter that all auth methods must provide, the only plugin parameter you'll need is the AZUseIMDS switch.","title":"(Optional) Using a Managed Service Identity (MSI)"},{"location":"Plugins/Azure/#optional-using-an-existing-access-token","text":"Any existing user, application, or managed service principal should work as long as it has been assigned permissions to manage DNS TXT records in the zones you're requesting certificates for. Here is how to get the token for the context you are currently logged in with using with Powershell. The method depends on what version of the Az.Accounts module you're using. # Az.Accounts 1.9.x or earlier $ctx = Get-AzContext $token = ( $ctx . TokenCache . ReadItems () | ?{ $_ . TenantId -eq $ctx . Subscription . TenantId -and $_ . Resource -eq \"https://management.core.windows.net/\" } | Select-Object -First 1 ). AccessToken # Az.Accounts 2.0.x or later $token = ( Get-AzAccessToken -ResourceUrl \"https://management.core.windows.net/\" -TenantId $tenantId ). Token Here's a similar method using Azure CLI 2.0. # show all subscriptions - the one marked as \"isDefault\": true will be used to create the token az account list $token = ( az account get-access -token - -resource 'https://management.core.windows.net/' | ConvertFrom-Json ). accessToken To get a token for the MSI when running in a VM, Azure Function or App Service - please refer to the following documentation. Remember to pass in the correct resource uri: https://management.core.windows.net/ Getting a token for an MSI-enabled VM Getting a token for an MSI-enabled App Service or Function","title":"(Optional) Using An Existing Access Token"},{"location":"Plugins/Azure/#using-the-plugin","text":"All authentication methods require specifying AZSubscriptionId which is the subscription that contains the DNS zones to modify. Password and Certificate based credentials also require AZTenantId which is the Azure AD tenant guid. Additional parameters are outlined in each section below. Note The plugin defaults to using the primary public Azure Cloud. But country and government specific Azure clouds are also supported by specifying the AZEnvironment parameter. Supported environments include AzureCloud (Default), AzureUSGovernment , AzureGermanCloud , and AzureChinaCloud .","title":"Using the Plugin"},{"location":"Plugins/Azure/#password-credential","text":"Subscription and Tenant values are passed as standard strings using AZSubscriptionId and AZTenantId . The credential is passed as a PSCredential object using AZAppCred . PSCredential objects require a username and password. For a service principal, the username is the its ApplicationId guid and the password is whatever was originally set for it. If you've been following the setup instructions, you may have $subscriptionID , $tenantID , and $appCred variables you can use instead of the sample values below. Warning The AZAppUsername and AZAppPasswordInsecure parameters are deprecated and will be removed in the next major module version. If you are using them, please migrate to a secure parameter set. $pArgs = @{ AZSubscriptionId = 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx' AZTenantId = 'yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy' AZAppCred = ( Get-Credential ) } New-PACertificate example . com -Plugin Azure -PluginArgs $pArgs","title":"Password Credential"},{"location":"Plugins/Azure/#certificate-credential","text":"As of PowerShell 6.2.3 (November 2019), support for the certificate store abstractions only really works on Windows. So there are separate instructions for Windows and non-Windows OSes.","title":"Certificate Credential"},{"location":"Plugins/Azure/#windows-certificate","text":"You'll need to specify the service principal username which is its ApplicationId guid and the certificate thumbprint value. If you've been following the setup instructions, you may have $subscriptionID , $tenantID , $appUser , and $thumbprint variables you can use instead of the sample values below. $pArgs = @{ AZSubscriptionId = 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx' AZTenantId = 'yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy' AZAppUsername = 'zzzzzzzz-zzzz-zzzz-zzzz-zzzzzzzzzzzz' AZCertThumbprint = '1A2B3C4D5E6F1A2B3C4D5E6F1A2B3C4D5E6F1A2B' } New-PACertificate example . com -Plugin Azure -PluginArgs $pArgs","title":"Windows Certificate"},{"location":"Plugins/Azure/#non-windows-certificate","text":"You'll need to specify the service principal username which is its ApplicationId guid, the path to the PFX file, and the PFX password as a SecureString. If you've been following the setup instructions, you may have $subscriptionID , $tenantID , $appUser , $certPfx , and $pfxPass variables you can use instead of the sample values below. Warning The AZPfxPass parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to a secure parameter set. $pArgs = @{ AZSubscriptionId = 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx' AZTenantId = 'yyyyyyyy-yyyy-yyyy-yyyy-yyyyyyyyyyyy' AZAppUsername = 'zzzzzzzz-zzzz-zzzz-zzzz-zzzzzzzzzzzz' AZCertPfx = '/home/certuser/poshacme.pfx' AZPfxPassSecure = ( ConvertTo-SecureString 'poshacme' -AsPlainText -Force ) } New-PACertificate example . com -Plugin Azure -PluginArgs $pArgs","title":"Non-Windows Certificate"},{"location":"Plugins/Azure/#existing-access-token","text":"Only the subscription guid and the access token you previously retrieved are required for this method. $pArgs = @{ AZSubscriptionId = 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx' AZAccessToken = $token } New-PACertificate example . com -Plugin Azure -PluginArgs $pArgs","title":"Existing Access Token"},{"location":"Plugins/Azure/#instance-metadata-service-imds","text":"Only the subscription guid and the AZUseIMDS switch are required for this method. $pArgs = @{ AZSubscriptionId = 'xxxxxxxx-xxxx-xxxx-xxxx-xxxxxxxxxxxx' AZUseIMDS = $true } New-PACertificate example . com -Plugin Azure -PluginArgs $pArgs","title":"Instance Metadata Service (IMDS)"},{"location":"Plugins/Azure/#workaround-for-duplicate-public-zones","text":"In rare cases, a subscription may have two or more public copies of the same zone in different resource groups. When this happens, the plugin will throw an error such as: 2 public copies of example.com zone found. Please use 'poshacme' tag on the live copy. To workaround this problem, there are two main options. The easiest is to add an Azure Tag called poshacme on the live copy of the zone. The tag value doesn't matter as long as the name is poshacme . The plugin will recognize this tag and ignore the other copies of the zone. (Note: This requires version 3.2.1 of the module or later) The other solution is to remove permissions from the Azure account being used with Posh-ACME so it can only see the resource group that contains the live copy of the zone. But this may not be feasible depending on what else is in the resource group and what else the Azure account is being used for.","title":"Workaround for Duplicate Public Zones"},{"location":"Plugins/Beget/","text":"How To Use the Beget DNS Plugin \u00b6 This plugin works against the Beget.com provider. It is assumed that you already have an account and at least one domain you will be working against. Setup \u00b6 It is possible to use this plugin using the same credentials that are used to login to the web control panel. However, it is recommended to setup a separate password for API access and also limit the permissions. To do this, go to your Beget API settings and select \"Use separate password\". After setting the password, uncheck all of the Permitted Methods except for \"DNS management\" and click the Apply button. Warning There are some limitations with how the Beget API works that make it risky to use when using DNS Challenge Aliases . If you need to use this plugin with challenge aliases, the value for the DnsAlias must not contain any other record types or TXT values because they will likely be deleted when the plugin attempts to create the TXT records. Using the Plugin \u00b6 Your Beget credentials are passed as the username and password in a PSCredential object to the BegetCredential parameter. $pArgs = @{ BegetCredential = ( Get-Credential -Message \"Beget Credentials\" ) } New-PACertificate example . com -Plugin Beget -PluginArgs $pArgs","title":"Beget"},{"location":"Plugins/Beget/#how-to-use-the-beget-dns-plugin","text":"This plugin works against the Beget.com provider. It is assumed that you already have an account and at least one domain you will be working against.","title":"How To Use the Beget DNS Plugin"},{"location":"Plugins/Beget/#setup","text":"It is possible to use this plugin using the same credentials that are used to login to the web control panel. However, it is recommended to setup a separate password for API access and also limit the permissions. To do this, go to your Beget API settings and select \"Use separate password\". After setting the password, uncheck all of the Permitted Methods except for \"DNS management\" and click the Apply button. Warning There are some limitations with how the Beget API works that make it risky to use when using DNS Challenge Aliases . If you need to use this plugin with challenge aliases, the value for the DnsAlias must not contain any other record types or TXT values because they will likely be deleted when the plugin attempts to create the TXT records.","title":"Setup"},{"location":"Plugins/Beget/#using-the-plugin","text":"Your Beget credentials are passed as the username and password in a PSCredential object to the BegetCredential parameter. $pArgs = @{ BegetCredential = ( Get-Credential -Message \"Beget Credentials\" ) } New-PACertificate example . com -Plugin Beget -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/BlueCat/","text":"How To Use the BlueCat DNS Plugin \u00b6 This plugin works against the BlueCat Address Manager DNS provider. It is assumed that you have already have an account that is an \"API User\" and have created the DNS zone(s) you will be working against. This plugin has been tested against version 8.1.1. Using the Plugin \u00b6 Due to the potentially short lifetime of a BAM auth token you must pass the username and password as a PSCredential object using the BlueCatCredential parameter. You also need to provide the API uri as BlueCatUri . In addition you must also pass the Configuration name as BlueCatConfig , the DNS View name as BlueCatView , and the list of DNS servers to deploy as BlueCatDeployTargets . Warning The BlueCatUsername and BlueCatPassword parameters are deprecated and will be removed in the next major module version. If you are using them, please migrate to the Secure parameter set. $BlueCatParams = @{ BlueCatUsername = 'xxxxxxxx' BlueCatPassword = 'xxxxxxxx' BlueCatUri = 'https://FQDN//Services/API' BlueCatConfig = 'foobar' BlueCatView = 'foobaz' BlueCatDeployTargets =@( 'FQDN1' , 'FQDN2' , 'FQDN3' ) } New-PACertificate example . com -Plugin BlueCat -PluginArgs $BlueCatParams","title":"BlueCat"},{"location":"Plugins/BlueCat/#how-to-use-the-bluecat-dns-plugin","text":"This plugin works against the BlueCat Address Manager DNS provider. It is assumed that you have already have an account that is an \"API User\" and have created the DNS zone(s) you will be working against. This plugin has been tested against version 8.1.1.","title":"How To Use the BlueCat DNS Plugin"},{"location":"Plugins/BlueCat/#using-the-plugin","text":"Due to the potentially short lifetime of a BAM auth token you must pass the username and password as a PSCredential object using the BlueCatCredential parameter. You also need to provide the API uri as BlueCatUri . In addition you must also pass the Configuration name as BlueCatConfig , the DNS View name as BlueCatView , and the list of DNS servers to deploy as BlueCatDeployTargets . Warning The BlueCatUsername and BlueCatPassword parameters are deprecated and will be removed in the next major module version. If you are using them, please migrate to the Secure parameter set. $BlueCatParams = @{ BlueCatUsername = 'xxxxxxxx' BlueCatPassword = 'xxxxxxxx' BlueCatUri = 'https://FQDN//Services/API' BlueCatConfig = 'foobar' BlueCatView = 'foobaz' BlueCatDeployTargets =@( 'FQDN1' , 'FQDN2' , 'FQDN3' ) } New-PACertificate example . com -Plugin BlueCat -PluginArgs $BlueCatParams","title":"Using the Plugin"},{"location":"Plugins/Bunny/","text":"How To Use the Bunny.net DNS Plugin \u00b6 This plugin works against the Bunny.net DNS provider. It is assumed that you have already setup an account and created the DNS zone(s) you will be working against. Setup \u00b6 First, login to your account. Your API Key (Access Key) is available under the Account section. Using the Plugin \u00b6 Use your account API Key as the BunnyAccessKey SecureString parameter. $pArgs = @{ BunnyAccessKey = ( Read-Host \"Bunny Access Key\" -AsSecureString ) } New-PACertificate example . com -Plugin Bunny -PluginArgs $pArgs","title":"Bunny"},{"location":"Plugins/Bunny/#how-to-use-the-bunnynet-dns-plugin","text":"This plugin works against the Bunny.net DNS provider. It is assumed that you have already setup an account and created the DNS zone(s) you will be working against.","title":"How To Use the Bunny.net DNS Plugin"},{"location":"Plugins/Bunny/#setup","text":"First, login to your account. Your API Key (Access Key) is available under the Account section.","title":"Setup"},{"location":"Plugins/Bunny/#using-the-plugin","text":"Use your account API Key as the BunnyAccessKey SecureString parameter. $pArgs = @{ BunnyAccessKey = ( Read-Host \"Bunny Access Key\" -AsSecureString ) } New-PACertificate example . com -Plugin Bunny -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/ClouDNS/","text":"How To Use the ClouDNS DNS Plugin \u00b6 This plugin works against the ClouDNS provider. It is assumed that you have already setup an account and registered the domains or zones you will be working against. Note This provider does not allow API Access on its free account tier. If you sign up for a premium plan trial and let it expire, the plugin will stop working unless you upgrade your account to premium again. Their premium plans are reasonably priced and if you are a new customer, you can help me maintain this plugin by using this affiliate link when you sign up. Setup \u00b6 First, login to your account and go to the API Settings page. Click the Add new user link and set a password and optional IP whitelist. After saving, make note of the auth-id value for this user. (Optional) Sub Users and Zone Delegation \u00b6 The standard API users have complete access to your account. But for a bit more security, you can create sub-users that only have access to a subset of zones on your account. Click the Add new sub-user link from the API Settings page. Set a password and set the DNS Zones value to the number of zones you'll be delegating the user to. The rest of the fields are either optional or can be set to 0. After the user is created, click the text link in the DNS Zones column for the user that should be something like \"0 / X\" where X is the number of zone you configured for delegation. This will pop up a dialog box and let you add the specific zones you are delegating. Make a note of the sub-auth-id or sub-auth-user name you set for later. Using the Plugin \u00b6 The CDUserType parameter must be set to either auth-id , sub-auth-id , or sub-auth-user depending on the type of credential you are using. The CDUsername parameter should be set to the ID or username of the user. The password is set using CDPassword as a SecureString value. Warning The CDPasswordInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. By default the plugin assumes Posh-ACME's default DNS propagation delay mechanics will be used. But ClouDNS also supports a polling API to check whether record changes have propagated to the nameservers. To use this instead of the default mechanics, add a CDPollPropagation = $true parameter to your plugin args. By default, it will timeout after 5 minutes if the polling API never returns a success. You can override the timeout value with CDPollTimeout in seconds. When using CDPollPropagation, you should also set Posh-ACME's DNSSleep parameter to 0 unless you are using additional plugins that don't support their own form of propagation polling. Standard Propagation Delay \u00b6 $pArgs = @{ CDUserType = 'auth-id' CDUsername = '12345' CDPassword = ( Read-Host \"Password\" -AsSecureString ) } New-PACertificate example . com -Plugin ClouDNS -PluginArgs $pArgs ClouDNS Propagation Polling \u00b6 $pArgs = @{ CDUserType = 'auth-id' CDUsername = '12345' CDPassword = ( Read-Host \"Password\" -AsSecureString ) CDPollPropagation = $true } New-PACertificate example . com -Plugin ClouDNS -PluginArgs $pArgs -DnsSleep 0","title":"ClouDNS"},{"location":"Plugins/ClouDNS/#how-to-use-the-cloudns-dns-plugin","text":"This plugin works against the ClouDNS provider. It is assumed that you have already setup an account and registered the domains or zones you will be working against. Note This provider does not allow API Access on its free account tier. If you sign up for a premium plan trial and let it expire, the plugin will stop working unless you upgrade your account to premium again. Their premium plans are reasonably priced and if you are a new customer, you can help me maintain this plugin by using this affiliate link when you sign up.","title":"How To Use the ClouDNS DNS Plugin"},{"location":"Plugins/ClouDNS/#setup","text":"First, login to your account and go to the API Settings page. Click the Add new user link and set a password and optional IP whitelist. After saving, make note of the auth-id value for this user.","title":"Setup"},{"location":"Plugins/ClouDNS/#optional-sub-users-and-zone-delegation","text":"The standard API users have complete access to your account. But for a bit more security, you can create sub-users that only have access to a subset of zones on your account. Click the Add new sub-user link from the API Settings page. Set a password and set the DNS Zones value to the number of zones you'll be delegating the user to. The rest of the fields are either optional or can be set to 0. After the user is created, click the text link in the DNS Zones column for the user that should be something like \"0 / X\" where X is the number of zone you configured for delegation. This will pop up a dialog box and let you add the specific zones you are delegating. Make a note of the sub-auth-id or sub-auth-user name you set for later.","title":"(Optional) Sub Users and Zone Delegation"},{"location":"Plugins/ClouDNS/#using-the-plugin","text":"The CDUserType parameter must be set to either auth-id , sub-auth-id , or sub-auth-user depending on the type of credential you are using. The CDUsername parameter should be set to the ID or username of the user. The password is set using CDPassword as a SecureString value. Warning The CDPasswordInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. By default the plugin assumes Posh-ACME's default DNS propagation delay mechanics will be used. But ClouDNS also supports a polling API to check whether record changes have propagated to the nameservers. To use this instead of the default mechanics, add a CDPollPropagation = $true parameter to your plugin args. By default, it will timeout after 5 minutes if the polling API never returns a success. You can override the timeout value with CDPollTimeout in seconds. When using CDPollPropagation, you should also set Posh-ACME's DNSSleep parameter to 0 unless you are using additional plugins that don't support their own form of propagation polling.","title":"Using the Plugin"},{"location":"Plugins/ClouDNS/#standard-propagation-delay","text":"$pArgs = @{ CDUserType = 'auth-id' CDUsername = '12345' CDPassword = ( Read-Host \"Password\" -AsSecureString ) } New-PACertificate example . com -Plugin ClouDNS -PluginArgs $pArgs","title":"Standard Propagation Delay"},{"location":"Plugins/ClouDNS/#cloudns-propagation-polling","text":"$pArgs = @{ CDUserType = 'auth-id' CDUsername = '12345' CDPassword = ( Read-Host \"Password\" -AsSecureString ) CDPollPropagation = $true } New-PACertificate example . com -Plugin ClouDNS -PluginArgs $pArgs -DnsSleep 0","title":"ClouDNS Propagation Polling"},{"location":"Plugins/Cloudflare/","text":"How To Use the Cloudflare DNS Plugin \u00b6 This plugin works against the Cloudflare DNS provider. It is assumed that you have already setup an account and created the DNS zone(s) you will be working against. Setup \u00b6 There are two choices for authentication against the Cloudflare API. The old way uses your account email address and a \"Global API Key\" that has complete access to your account. Cloudflare also supports API Tokens that can be limited to only certain permissions within the account. This is the recommended method to use. Open the API Tokens page to get started. API Token \u00b6 The API token will need Zone - DNS - Edit permissions on the zone(s) you will be requesting a certificate for. Many find it easiest to use All zones or All zones from an account in the Zone Resources section. But you may also limit the token to a subset of the account's zones using one or more instances of Specific zone . Click Create Token Find the Edit zone DNS token template and click Use template (Optional) Click the pencil icon to rename the token The Permissions list should already contain Zone - DNS - Edit Set Zone Resources to Include - All zones (or whatever alternative scope you like) (Optional) Add IP address filtering to limit where API requests can come from for this token (Optional) Set a TTL Start/End date. NOTE: Setting a TTL will require generating a new token when it expires and updating your Posh-ACME config with the new value. Click Continue to summary Click Create Token Copy the token value from the summary screen because it can't be retrieved after leaving this page. You must generate a new value if you forget or lose the old one. Global API Key \u00b6 In the API Keys section, click View for the \"Global API Key\" You may need to re-enter the account password and answer a CAPTCHA. Copy the key value for later. Using the Plugin \u00b6 If you're using the newer API Token method, you'll use it with the CFToken SecureString parameter. If you're using the Global API Key method, you'll need to use the CFAuthEmail and CFAuthKeySecure parameters with the account's email address as a string and previously retrieved Global API Key as a SecureString. Warning The CFTokenInsecure and CFAuthKey parameters are deprecated and will be removed in the next major module version. If you are using them, please migrate to one of the Secure parameter sets. API Token \u00b6 $pArgs = @{ CFToken = ( Read-Host 'API Token' -AsSecureString ) } New-PACertificate example . com -Plugin Cloudflare -PluginArgs $pArgs Global API Key \u00b6 $pArgs = @{ CFAuthEmail = 'xxxx@example.com' CFAuthKeySecure = ( Read-Host 'Global API Key' -AsSecureString ) } New-PACertificate example . com -Plugin Cloudflare -PluginArgs $pArgs","title":"Cloudflare"},{"location":"Plugins/Cloudflare/#how-to-use-the-cloudflare-dns-plugin","text":"This plugin works against the Cloudflare DNS provider. It is assumed that you have already setup an account and created the DNS zone(s) you will be working against.","title":"How To Use the Cloudflare DNS Plugin"},{"location":"Plugins/Cloudflare/#setup","text":"There are two choices for authentication against the Cloudflare API. The old way uses your account email address and a \"Global API Key\" that has complete access to your account. Cloudflare also supports API Tokens that can be limited to only certain permissions within the account. This is the recommended method to use. Open the API Tokens page to get started.","title":"Setup"},{"location":"Plugins/Cloudflare/#api-token","text":"The API token will need Zone - DNS - Edit permissions on the zone(s) you will be requesting a certificate for. Many find it easiest to use All zones or All zones from an account in the Zone Resources section. But you may also limit the token to a subset of the account's zones using one or more instances of Specific zone . Click Create Token Find the Edit zone DNS token template and click Use template (Optional) Click the pencil icon to rename the token The Permissions list should already contain Zone - DNS - Edit Set Zone Resources to Include - All zones (or whatever alternative scope you like) (Optional) Add IP address filtering to limit where API requests can come from for this token (Optional) Set a TTL Start/End date. NOTE: Setting a TTL will require generating a new token when it expires and updating your Posh-ACME config with the new value. Click Continue to summary Click Create Token Copy the token value from the summary screen because it can't be retrieved after leaving this page. You must generate a new value if you forget or lose the old one.","title":"API Token"},{"location":"Plugins/Cloudflare/#global-api-key","text":"In the API Keys section, click View for the \"Global API Key\" You may need to re-enter the account password and answer a CAPTCHA. Copy the key value for later.","title":"Global API Key"},{"location":"Plugins/Cloudflare/#using-the-plugin","text":"If you're using the newer API Token method, you'll use it with the CFToken SecureString parameter. If you're using the Global API Key method, you'll need to use the CFAuthEmail and CFAuthKeySecure parameters with the account's email address as a string and previously retrieved Global API Key as a SecureString. Warning The CFTokenInsecure and CFAuthKey parameters are deprecated and will be removed in the next major module version. If you are using them, please migrate to one of the Secure parameter sets.","title":"Using the Plugin"},{"location":"Plugins/Cloudflare/#api-token_1","text":"$pArgs = @{ CFToken = ( Read-Host 'API Token' -AsSecureString ) } New-PACertificate example . com -Plugin Cloudflare -PluginArgs $pArgs","title":"API Token"},{"location":"Plugins/Cloudflare/#global-api-key_1","text":"$pArgs = @{ CFAuthEmail = 'xxxx@example.com' CFAuthKeySecure = ( Read-Host 'Global API Key' -AsSecureString ) } New-PACertificate example . com -Plugin Cloudflare -PluginArgs $pArgs","title":"Global API Key"},{"location":"Plugins/Combell/","text":"How To Use the Combell DNS Plugin \u00b6 Combell NV is a hosting provider based in Belgium. Besides offering hosting solutions, Combell NV is an ICANN Accredited Registrar under IANA number 1467 . This plugin works with the Combell DNS provider by using the Combell Reseller API. Warning The Combell Reseller API (also referred to as the Combell API ), is only available for reseller accounts, which are more expensive than normal accounts. A free trial is available - see reseller hosting for more information. | The remainder of this document assumes you have a reseller account and have created the DNS domain zone(s) you'll be working with. Setup \u00b6 The Combell API can be activated for any administrator in the Combell reseller account. To add administrators, navigate to Dashboard / Settings / Administrators , and click the Invite administrator button to add an administrator. Click the Permissions button next to an administrator's name, and ensure the administrator's permssions is configured as All rights ( \"User has access to all the products in this customer account\" ). Next, navigate to Dashboard / Settings / API / Users and activate the API key for the required administrator(s): - Click the API key button next to the administrator's user name; - Click the Activate the API key button ( \"Activate an API key for this user.\" ); The API key and API secret will now appear. You'll need them in the next section Using the Plugin . IP address whitelisting \u00b6 The Combell API can only be accessed from registered IP addresses. Navigate to Dashboard / Settings / API / IP restrictions and add your public IP address(es) to the whitelist. Using the Plugin \u00b6 The API Key and Secret and used with the CombellApiKey and CombellApiSecret parameters as SecureString values. Using SecureString ensures the values are saved to disk in encrypted form by Posh-ACME for later renewals. $pArgs = @{ CombellApiKey = ( Read-Host \"Combell API key\" -AsSecureString ) CombellApiSecret = ( Read-Host \"Combell API secret\" -AsSecureString ) } New-PACertificate example . com -Plugin Combell -PluginArgs $pArgs External links \u00b6 Combell.com . Combell API Documentation .","title":"Combell"},{"location":"Plugins/Combell/#how-to-use-the-combell-dns-plugin","text":"Combell NV is a hosting provider based in Belgium. Besides offering hosting solutions, Combell NV is an ICANN Accredited Registrar under IANA number 1467 . This plugin works with the Combell DNS provider by using the Combell Reseller API. Warning The Combell Reseller API (also referred to as the Combell API ), is only available for reseller accounts, which are more expensive than normal accounts. A free trial is available - see reseller hosting for more information. | The remainder of this document assumes you have a reseller account and have created the DNS domain zone(s) you'll be working with.","title":"How To Use the Combell DNS Plugin"},{"location":"Plugins/Combell/#setup","text":"The Combell API can be activated for any administrator in the Combell reseller account. To add administrators, navigate to Dashboard / Settings / Administrators , and click the Invite administrator button to add an administrator. Click the Permissions button next to an administrator's name, and ensure the administrator's permssions is configured as All rights ( \"User has access to all the products in this customer account\" ). Next, navigate to Dashboard / Settings / API / Users and activate the API key for the required administrator(s): - Click the API key button next to the administrator's user name; - Click the Activate the API key button ( \"Activate an API key for this user.\" ); The API key and API secret will now appear. You'll need them in the next section Using the Plugin .","title":"Setup"},{"location":"Plugins/Combell/#ip-address-whitelisting","text":"The Combell API can only be accessed from registered IP addresses. Navigate to Dashboard / Settings / API / IP restrictions and add your public IP address(es) to the whitelist.","title":"IP address whitelisting"},{"location":"Plugins/Combell/#using-the-plugin","text":"The API Key and Secret and used with the CombellApiKey and CombellApiSecret parameters as SecureString values. Using SecureString ensures the values are saved to disk in encrypted form by Posh-ACME for later renewals. $pArgs = @{ CombellApiKey = ( Read-Host \"Combell API key\" -AsSecureString ) CombellApiSecret = ( Read-Host \"Combell API secret\" -AsSecureString ) } New-PACertificate example . com -Plugin Combell -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/Combell/#external-links","text":"Combell.com . Combell API Documentation .","title":"External links"},{"location":"Plugins/Constellix/","text":"How To Use the Constellix Plugin \u00b6 This plugin works against the Constellix DNS provider. It is assumed that you already have an account and at least one managed zone already configured. Setup \u00b6 While you can use an account with the \"Admin\" role, it is not recommended for security reasons. Instead, you should create an account from the User Management Console with the \"User\" role and limit it to the DNS service on the account. Then, go to the DNS Users Console and modify the Domains permissions to include: (Optional) New domain permissions on creation: Read/Write/Commit . If you leave this on None , you will need to manually give permissions to future domains when they are created. Uncheck \"Add Domains\" Uncheck \"Delete Domains\" Read/Write/Commit on either \"All Domains\" or a selected subset of domains you will be using Posh-ACME with. Now login to the management console as the user who will be using Posh-ACME and go to Edit My Info . Click the Generate API Keys button and record the values for \"API Key\" and \"Secret Key\". This is the only time they will be displayed. Using the Plugin \u00b6 The API key will used with the ConstellixKey parameter as a string value. The API secret will be used with the ConstellixSecret parameter as a SecureString value. $pArgs = @{ ConstellixKey = 'xxxxxxxxxxxx' ConstellixSecret = ( Read-Host 'API Secret' -AsSecureString ) } New-PACertificate example . com -Plugin Constellix -PluginArgs $pArgs","title":"Constellix"},{"location":"Plugins/Constellix/#how-to-use-the-constellix-plugin","text":"This plugin works against the Constellix DNS provider. It is assumed that you already have an account and at least one managed zone already configured.","title":"How To Use the Constellix Plugin"},{"location":"Plugins/Constellix/#setup","text":"While you can use an account with the \"Admin\" role, it is not recommended for security reasons. Instead, you should create an account from the User Management Console with the \"User\" role and limit it to the DNS service on the account. Then, go to the DNS Users Console and modify the Domains permissions to include: (Optional) New domain permissions on creation: Read/Write/Commit . If you leave this on None , you will need to manually give permissions to future domains when they are created. Uncheck \"Add Domains\" Uncheck \"Delete Domains\" Read/Write/Commit on either \"All Domains\" or a selected subset of domains you will be using Posh-ACME with. Now login to the management console as the user who will be using Posh-ACME and go to Edit My Info . Click the Generate API Keys button and record the values for \"API Key\" and \"Secret Key\". This is the only time they will be displayed.","title":"Setup"},{"location":"Plugins/Constellix/#using-the-plugin","text":"The API key will used with the ConstellixKey parameter as a string value. The API secret will be used with the ConstellixSecret parameter as a SecureString value. $pArgs = @{ ConstellixKey = 'xxxxxxxxxxxx' ConstellixSecret = ( Read-Host 'API Secret' -AsSecureString ) } New-PACertificate example . com -Plugin Constellix -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/CoreNetworks/","text":"How To Use the Core Networks DNS Plugin \u00b6 This plugin works against the Core Networks DNS provider. It is assumed that you have already setup an (API)Account and created the DNS zone(s) you will be working against. Setup \u00b6 On your account profile page , click Add Access . Give it custom a username and a strong password. Record the value to use later. You won't be able to go back and look it up after leaving the page. At the moment, no Internationalized Domain Name (IDN) are supported. Using the Plugin \u00b6 Your username and password are used with the CoreNetworksCred PSCredential parameter. There is also an optional CoreNetworksApiRoot parameter that currently defaults to https://beta.api.core-networks.de . Unless Core Networks changes that URL when the API is out of beta, you won't need to worry about it. $pArgs = @{ CoreNetworksCred = ( Get-Credential ) } New-PACertificate example . com -Plugin CoreNetworks -PluginArgs $pArgs","title":"CoreNetworks"},{"location":"Plugins/CoreNetworks/#how-to-use-the-core-networks-dns-plugin","text":"This plugin works against the Core Networks DNS provider. It is assumed that you have already setup an (API)Account and created the DNS zone(s) you will be working against.","title":"How To Use the Core Networks DNS Plugin"},{"location":"Plugins/CoreNetworks/#setup","text":"On your account profile page , click Add Access . Give it custom a username and a strong password. Record the value to use later. You won't be able to go back and look it up after leaving the page. At the moment, no Internationalized Domain Name (IDN) are supported.","title":"Setup"},{"location":"Plugins/CoreNetworks/#using-the-plugin","text":"Your username and password are used with the CoreNetworksCred PSCredential parameter. There is also an optional CoreNetworksApiRoot parameter that currently defaults to https://beta.api.core-networks.de . Unless Core Networks changes that URL when the API is out of beta, you won't need to worry about it. $pArgs = @{ CoreNetworksCred = ( Get-Credential ) } New-PACertificate example . com -Plugin CoreNetworks -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/DMEasy/","text":"How To Use the DMEasy DNS Plugin \u00b6 This plugin works against the DNS Made Easy provider. It is assumed that you already have an account and at least one Managed zone you will be working against. Setup \u00b6 If you haven't done it already, you need to generate API Credentials for your account from the Account Information page. You should end up with an API Key and Secret Key value. These are what we will use with the plugin. Using the Plugin \u00b6 With your API key and secret, you'll need to pass them with the DMEKey parameter and the DMESecret SecureString parameter. Warning The DMESecuretInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ DMEKey = 'xxxxxxxxxxxx' DMESecret = ( Read-Host 'DME Secret' -AsSecureString ) } New-PACertificate example . com -Plugin DMEasy -PluginArgs $pArgs","title":"DMEasy"},{"location":"Plugins/DMEasy/#how-to-use-the-dmeasy-dns-plugin","text":"This plugin works against the DNS Made Easy provider. It is assumed that you already have an account and at least one Managed zone you will be working against.","title":"How To Use the DMEasy DNS Plugin"},{"location":"Plugins/DMEasy/#setup","text":"If you haven't done it already, you need to generate API Credentials for your account from the Account Information page. You should end up with an API Key and Secret Key value. These are what we will use with the plugin.","title":"Setup"},{"location":"Plugins/DMEasy/#using-the-plugin","text":"With your API key and secret, you'll need to pass them with the DMEKey parameter and the DMESecret SecureString parameter. Warning The DMESecuretInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ DMEKey = 'xxxxxxxxxxxx' DMESecret = ( Read-Host 'DME Secret' -AsSecureString ) } New-PACertificate example . com -Plugin DMEasy -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/DNSPod/","text":"How To Use the DNSPod DNS Plugin \u00b6 This plugin works against the DNSPod provider. It is assumed that you have already setup an account and created the domain you will be working against. Setup \u00b6 As of November 13, 2020, DNSPod was integrated with Tencent Cloud and slightly changed how their API works. Instead of authenticating with your normal website login credentials, you must create an API token to use instead. Login to the console and go to the Key Management section. Create a new key and make a note of its ID and Token values. Using the Plugin \u00b6 The API key ID is used with the DNSPodKeyId string parameter. The key token is used with DNSPodKeyToken as a SecureString. Warning The DNSPodKeyTokenInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. There is also a DNSPodApiRoot optional parameter that defaults to the API root for dnspod.com. If you are using dnspod.cn, you may specify https://dnsapi.cn instead for this parameter. $pArgs = @{ DNSPodKeyID = '111' DNSPodToken = ( Read-Host 'Enter Token' -AsSecureString ) } New-PACertificate example . com -Plugin DNSPod -PluginArgs $pArgs","title":"DNSPod"},{"location":"Plugins/DNSPod/#how-to-use-the-dnspod-dns-plugin","text":"This plugin works against the DNSPod provider. It is assumed that you have already setup an account and created the domain you will be working against.","title":"How To Use the DNSPod DNS Plugin"},{"location":"Plugins/DNSPod/#setup","text":"As of November 13, 2020, DNSPod was integrated with Tencent Cloud and slightly changed how their API works. Instead of authenticating with your normal website login credentials, you must create an API token to use instead. Login to the console and go to the Key Management section. Create a new key and make a note of its ID and Token values.","title":"Setup"},{"location":"Plugins/DNSPod/#using-the-plugin","text":"The API key ID is used with the DNSPodKeyId string parameter. The key token is used with DNSPodKeyToken as a SecureString. Warning The DNSPodKeyTokenInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. There is also a DNSPodApiRoot optional parameter that defaults to the API root for dnspod.com. If you are using dnspod.cn, you may specify https://dnsapi.cn instead for this parameter. $pArgs = @{ DNSPodKeyID = '111' DNSPodToken = ( Read-Host 'Enter Token' -AsSecureString ) } New-PACertificate example . com -Plugin DNSPod -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/DNSimple/","text":"How To Use the DNSimple DNS Plugin \u00b6 This plugin works against the DNSimple DNS provider. It is assumed that you have already setup an account and created the DNS zone(s) you will be working against. Note The link above is an affiliate link which reduces my out of pocket cost to maintain this plugin. I'd be most grateful if you use it when signing up for a new account. Setup \u00b6 First, login to your account and then go to Account - API tokens and click New access token . After giving it a name, it will show you the token string. Be sure to save it as you can't look it up if you forget later. You can only generate a new one. Also, make sure it is an account token, not a user token. Using the Plugin \u00b6 With your token value, you'll need to set the DSToken SecureString parameter. Warning The DSTokenInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ DSToken = ( Read-Host \"DNSimple Token\" -AsSecureString ) } New-PACertificate example . com -Plugin DNSimple -PluginArgs $pArgs","title":"DNSimple"},{"location":"Plugins/DNSimple/#how-to-use-the-dnsimple-dns-plugin","text":"This plugin works against the DNSimple DNS provider. It is assumed that you have already setup an account and created the DNS zone(s) you will be working against. Note The link above is an affiliate link which reduces my out of pocket cost to maintain this plugin. I'd be most grateful if you use it when signing up for a new account.","title":"How To Use the DNSimple DNS Plugin"},{"location":"Plugins/DNSimple/#setup","text":"First, login to your account and then go to Account - API tokens and click New access token . After giving it a name, it will show you the token string. Be sure to save it as you can't look it up if you forget later. You can only generate a new one. Also, make sure it is an account token, not a user token.","title":"Setup"},{"location":"Plugins/DNSimple/#using-the-plugin","text":"With your token value, you'll need to set the DSToken SecureString parameter. Warning The DSTokenInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ DSToken = ( Read-Host \"DNSimple Token\" -AsSecureString ) } New-PACertificate example . com -Plugin DNSimple -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/DOcean/","text":"How To Use the DOcean DNS Plugin \u00b6 This plugin works against the Digital Ocean DNS provider. It is assumed that you have already setup an account and created the DNS zone(s) you will be working against. Note The link above is an affiliate link which reduces my out of pocket cost to maintain this plugin. I'd be most grateful if you use it when signing up for a new account. Setup \u00b6 You need to create a Personal Access Token so the plugin can access Digital Ocean's API. Click Generate New Token Name: Posh-ACME Check the Write (optional) box Click Generate Token Copy the resulting token string somewhere safe. There's no way to retrieve it once you leave this page. You would have to delete the old one and create a new one. Using the Plugin \u00b6 Use the DOTokenSecure SecureString parameter with the token value you created earlier. Warning The DOToken parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ DOTokenSecure = ( Read-Host 'Access Token' -AsSecureString ) } New-PACertificate example . com -Plugin DOcean -PluginArgs $pArgs","title":"DOcean"},{"location":"Plugins/DOcean/#how-to-use-the-docean-dns-plugin","text":"This plugin works against the Digital Ocean DNS provider. It is assumed that you have already setup an account and created the DNS zone(s) you will be working against. Note The link above is an affiliate link which reduces my out of pocket cost to maintain this plugin. I'd be most grateful if you use it when signing up for a new account.","title":"How To Use the DOcean DNS Plugin"},{"location":"Plugins/DOcean/#setup","text":"You need to create a Personal Access Token so the plugin can access Digital Ocean's API. Click Generate New Token Name: Posh-ACME Check the Write (optional) box Click Generate Token Copy the resulting token string somewhere safe. There's no way to retrieve it once you leave this page. You would have to delete the old one and create a new one.","title":"Setup"},{"location":"Plugins/DOcean/#using-the-plugin","text":"Use the DOTokenSecure SecureString parameter with the token value you created earlier. Warning The DOToken parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ DOTokenSecure = ( Read-Host 'Access Token' -AsSecureString ) } New-PACertificate example . com -Plugin DOcean -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/DeSEC/","text":"How To Use the deSEC DNS Plugin \u00b6 This plugin works against the deSEC DNS provider. It is assumed that you have already setup an account and created the DNS zone(s) you will be working against. Setup \u00b6 You may already have an API token from your original registration email. If not, go to the Token Management page and create a new one. The value will only be shown once towards the bottom of the screen. It is not the ID value in the list of tokens. Using the Plugin \u00b6 You will need to provide the API token as a SecureString value to DSCToken . There is an optional DSCTTL parameter to use as the TTL of new TXT record. It defaults to 3600 which seems to be the minimum value allowed by the API. Warning The DSToken , DSTokenInsecure , and DSTTL parameters have been deprecated because they conflicted with another Posh-ACME plugin. If you are using them, please migrate to the newer parameters as they will be removed in the next major version of the module. $pArgs = @{ DSCToken = ( Read-Host \"deSEC Token\" -AsSecureString ) } New-PACertificate example . com -Plugin DeSEC -PluginArgs $pArgs","title":"DeSEC"},{"location":"Plugins/DeSEC/#how-to-use-the-desec-dns-plugin","text":"This plugin works against the deSEC DNS provider. It is assumed that you have already setup an account and created the DNS zone(s) you will be working against.","title":"How To Use the deSEC DNS Plugin"},{"location":"Plugins/DeSEC/#setup","text":"You may already have an API token from your original registration email. If not, go to the Token Management page and create a new one. The value will only be shown once towards the bottom of the screen. It is not the ID value in the list of tokens.","title":"Setup"},{"location":"Plugins/DeSEC/#using-the-plugin","text":"You will need to provide the API token as a SecureString value to DSCToken . There is an optional DSCTTL parameter to use as the TTL of new TXT record. It defaults to 3600 which seems to be the minimum value allowed by the API. Warning The DSToken , DSTokenInsecure , and DSTTL parameters have been deprecated because they conflicted with another Posh-ACME plugin. If you are using them, please migrate to the newer parameters as they will be removed in the next major version of the module. $pArgs = @{ DSCToken = ( Read-Host \"deSEC Token\" -AsSecureString ) } New-PACertificate example . com -Plugin DeSEC -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/DomainOffensive/","text":"How To Use the Domain Offensive DNS Plugin \u00b6 This plugin works against the Domain Offensive DNS provider. It is assumed that you have already setup an account and created the DNS zone(s) you will be working against. Setup \u00b6 We need to retrieve an secret API token for the account that will be used to update DNS records. Further information can ba found at the (german) developer docs . Using the Plugin \u00b6 Your personal API token is specified using the DomOffToken SecureString parameter. Warning The DomOffTokenInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ DomOffToken = ( Read-Host -Prompt \"Token\" -AsSecureString ) } New-PACertificate example . com -Plugin DomainOffensive -PluginArgs $pArgs","title":"DomainOffensive"},{"location":"Plugins/DomainOffensive/#how-to-use-the-domain-offensive-dns-plugin","text":"This plugin works against the Domain Offensive DNS provider. It is assumed that you have already setup an account and created the DNS zone(s) you will be working against.","title":"How To Use the Domain Offensive DNS Plugin"},{"location":"Plugins/DomainOffensive/#setup","text":"We need to retrieve an secret API token for the account that will be used to update DNS records. Further information can ba found at the (german) developer docs .","title":"Setup"},{"location":"Plugins/DomainOffensive/#using-the-plugin","text":"Your personal API token is specified using the DomOffToken SecureString parameter. Warning The DomOffTokenInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ DomOffToken = ( Read-Host -Prompt \"Token\" -AsSecureString ) } New-PACertificate example . com -Plugin DomainOffensive -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/Domeneshop/","text":"How To Use the Domeneshop DNS Plugin \u00b6 This plugin works against the Domeneshop DNS provider. It is assumed that you have already setup an account and created the DNS zone(s) you will be working against. Warning The API is currently (May 2019) a beta (\"version 0\"). The interface may change before it is released and those changes may break this plugin. Domeneshop recommends not relying on the API for mission critical services until it has been released. Setup \u00b6 We need to retrieve an API token and secret for the account that will be used to update DNS records. Login to Domeneshop using the account that will be used to update DNS. Using the Plugin \u00b6 The API token is specified using the DomeneshopToken string parameter. The secret is specified with the DomeneshopSecret SecureString parameter. Warning The DomeneshopSecretInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ DomeneshopToken = 'xxxxxxxxxxxx' DomeneshopSecret = ( Read-Host \"Secret\" -AsSecureString ) } New-PACertificate example . com -Plugin Domeneshop -PluginArgs $pArgs","title":"Domeneshop"},{"location":"Plugins/Domeneshop/#how-to-use-the-domeneshop-dns-plugin","text":"This plugin works against the Domeneshop DNS provider. It is assumed that you have already setup an account and created the DNS zone(s) you will be working against. Warning The API is currently (May 2019) a beta (\"version 0\"). The interface may change before it is released and those changes may break this plugin. Domeneshop recommends not relying on the API for mission critical services until it has been released.","title":"How To Use the Domeneshop DNS Plugin"},{"location":"Plugins/Domeneshop/#setup","text":"We need to retrieve an API token and secret for the account that will be used to update DNS records. Login to Domeneshop using the account that will be used to update DNS.","title":"Setup"},{"location":"Plugins/Domeneshop/#using-the-plugin","text":"The API token is specified using the DomeneshopToken string parameter. The secret is specified with the DomeneshopSecret SecureString parameter. Warning The DomeneshopSecretInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ DomeneshopToken = 'xxxxxxxxxxxx' DomeneshopSecret = ( Read-Host \"Secret\" -AsSecureString ) } New-PACertificate example . com -Plugin Domeneshop -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/Dreamhost/","text":"How To Use the Dreamhost DNS Plugin \u00b6 This plugin works against the Dreamhost API. It is assumed that you already have web hosting through Dreamhost and are using Dreamhost to manage DNS for your domain(s). Setup \u00b6 We need to generate the API key that will be used to update DNS records. Open the Web Panel API page, and generate a new API key with dns-add_record, and dns-remove_record permissions. It is recommended to name this API key something memorable like \"Posh-ACME\" by entering this in the \"Comment for this key\" field. Take note of your new API key. Using the Plugin \u00b6 You will use the previously generated API key with the DreamhostApiKeySecure SecureString parameter. Warning The DreamhostApiKey parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ DreamhostApiKeySecure = ( Read-Host 'Key' -AsSecureString ) } New-PACertificate example . com -Plugin Dreamhost -PluginArgs $pArgs","title":"Dreamhost"},{"location":"Plugins/Dreamhost/#how-to-use-the-dreamhost-dns-plugin","text":"This plugin works against the Dreamhost API. It is assumed that you already have web hosting through Dreamhost and are using Dreamhost to manage DNS for your domain(s).","title":"How To Use the Dreamhost DNS Plugin"},{"location":"Plugins/Dreamhost/#setup","text":"We need to generate the API key that will be used to update DNS records. Open the Web Panel API page, and generate a new API key with dns-add_record, and dns-remove_record permissions. It is recommended to name this API key something memorable like \"Posh-ACME\" by entering this in the \"Comment for this key\" field. Take note of your new API key.","title":"Setup"},{"location":"Plugins/Dreamhost/#using-the-plugin","text":"You will use the previously generated API key with the DreamhostApiKeySecure SecureString parameter. Warning The DreamhostApiKey parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ DreamhostApiKeySecure = ( Read-Host 'Key' -AsSecureString ) } New-PACertificate example . com -Plugin Dreamhost -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/DuckDNS/","text":"How To Use the DuckDNS Plugin \u00b6 This plugin works against the Duck DNS provider. It is assumed that you have already setup an account and created the domain(s) you will be working against. Setup \u00b6 Look for a token value listed on the Duck DNS homepage after you login. You'll need to supply this value as one of the plugin parameters. You will also need the domain subname for each domain that matches one of the names in the certificate you request. So if you're requesting a cert for www.mydomain.duckdns.org and www.myotherdomain.duckdns.org , you would need both mydomain and myotherdomain . Using the Plugin \u00b6 Duck DNS has a rather annoying limitation that there can only ever be a single TXT record associated with all domains on your account. This means that if you request a certificate with multiple names, each name must be validated separately instead of just creating all of the TXT records at once and validating them together. This can make the entire process take a lot longer depending on how many names are in the certificate. In order for Posh-ACME to process the validations in serial rather than parallel, you must specify the UseSerialValidation switch in your call to New-PACertificate . Your API token is specified using the DuckToken SecureString parameter. You also need to specify the domain subnames using the DuckDomain parameter. Warning The DuckTokenInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ DuckToken = ( Read-Host -Prompt \"Token\" -AsSecureString ) DuckDomain = 'mydomain1' } $certNames = 'mydomain1.duckdns.org' , 'www.mydomain1.duckdns.org' New-PACertificate $certNames -UseSerialValidation -Plugin DuckDNS -PluginArgs $pArgs","title":"DuckDNS"},{"location":"Plugins/DuckDNS/#how-to-use-the-duckdns-plugin","text":"This plugin works against the Duck DNS provider. It is assumed that you have already setup an account and created the domain(s) you will be working against.","title":"How To Use the DuckDNS Plugin"},{"location":"Plugins/DuckDNS/#setup","text":"Look for a token value listed on the Duck DNS homepage after you login. You'll need to supply this value as one of the plugin parameters. You will also need the domain subname for each domain that matches one of the names in the certificate you request. So if you're requesting a cert for www.mydomain.duckdns.org and www.myotherdomain.duckdns.org , you would need both mydomain and myotherdomain .","title":"Setup"},{"location":"Plugins/DuckDNS/#using-the-plugin","text":"Duck DNS has a rather annoying limitation that there can only ever be a single TXT record associated with all domains on your account. This means that if you request a certificate with multiple names, each name must be validated separately instead of just creating all of the TXT records at once and validating them together. This can make the entire process take a lot longer depending on how many names are in the certificate. In order for Posh-ACME to process the validations in serial rather than parallel, you must specify the UseSerialValidation switch in your call to New-PACertificate . Your API token is specified using the DuckToken SecureString parameter. You also need to specify the domain subnames using the DuckDomain parameter. Warning The DuckTokenInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ DuckToken = ( Read-Host -Prompt \"Token\" -AsSecureString ) DuckDomain = 'mydomain1' } $certNames = 'mydomain1.duckdns.org' , 'www.mydomain1.duckdns.org' New-PACertificate $certNames -UseSerialValidation -Plugin DuckDNS -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/Dynu/","text":"How To Use the Dynu DNS Plugin \u00b6 This plugin works against the Dynu DNS provider. It is assumed that you have already setup an account configured at least one DDNS domain to work against. Warning Dynu imposes some limitations on non-paid accounts. The most significant is a limit of 4 DNS records per domain which effectively means you can only create a cert with up to 4 names in it from the same domain (and only if you have no other DNS records counting against your limit). Additionally, if you are using one of Dynu's provided domain names, their official policy (as of 03/2019) is that you can't create TXT records until the domain is 30 days old. Though currently, that limitation only seems to apply to the web GUI. Setup \u00b6 You will need to retrieve the Client ID and Secret that will be used to update DNS records. You can find these on your Dynu Control Panel . Using the Plugin \u00b6 The Client ID is used with the DynuClientID string parameter and the secret is used with the DynuSecretSecure SecureString parameter. Warning The DynuSecret parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ DynuClientID = 'xxxxxxxx' DynuSecretSecure = ( Read-Host 'Secret' -AsSecureString ) } New-PACertificate example . com -Plugin Dynu -PluginArgs $pArgs \"Quota Exception\" error \u00b6 If you get this message it likely means you're on a free account and you've added too many names from the same domain to a certificate. See the note at the top of this guide for details.","title":"Dynu"},{"location":"Plugins/Dynu/#how-to-use-the-dynu-dns-plugin","text":"This plugin works against the Dynu DNS provider. It is assumed that you have already setup an account configured at least one DDNS domain to work against. Warning Dynu imposes some limitations on non-paid accounts. The most significant is a limit of 4 DNS records per domain which effectively means you can only create a cert with up to 4 names in it from the same domain (and only if you have no other DNS records counting against your limit). Additionally, if you are using one of Dynu's provided domain names, their official policy (as of 03/2019) is that you can't create TXT records until the domain is 30 days old. Though currently, that limitation only seems to apply to the web GUI.","title":"How To Use the Dynu DNS Plugin"},{"location":"Plugins/Dynu/#setup","text":"You will need to retrieve the Client ID and Secret that will be used to update DNS records. You can find these on your Dynu Control Panel .","title":"Setup"},{"location":"Plugins/Dynu/#using-the-plugin","text":"The Client ID is used with the DynuClientID string parameter and the secret is used with the DynuSecretSecure SecureString parameter. Warning The DynuSecret parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ DynuClientID = 'xxxxxxxx' DynuSecretSecure = ( Read-Host 'Secret' -AsSecureString ) } New-PACertificate example . com -Plugin Dynu -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/Dynu/#quota-exception-error","text":"If you get this message it likely means you're on a free account and you've added too many names from the same domain to a certificate. See the note at the top of this guide for details.","title":"\"Quota Exception\" error"},{"location":"Plugins/EasyDNS/","text":"How To Use the EasyDNS Plugin \u00b6 This plugin works against the EasyDNS provider. It is assumed that you have already setup an account with a domain registered. Warning The EasyDNS REST API is currently (August 2019) in BETA status and has been for quite a while. Beta APIs may change prior to release and potentially break this plugin. Please don't rely on it for mission critical things. Setup \u00b6 Documentation, including signup instructions, is available at http://docs.sandbox.rest.easydns.net/. When you first receive an API Token and Key, they will be for the sandbox environment, not the live environment. In the sandbox environment, publishing and unpublishing challenge records will work but they will not be hosted as public DNS records and thus can't be used to get a certificate. To move to the live environment, you will need to email the API support team with the request. Using the Plugin \u00b6 The API Token is used with the EDToken string parameter. The API Key is used with the EDKeySecure SecureString parameter. If you are testing against the sandbox environment, you must also include EDUseSandbox = $true . Warning The EDKey parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ EDToken = 'xxxxxxxxxxxxxxxx' EDKeySecure = ( Read-Host 'Key' -AsSecureString ) } New-PACertificate example . com -Plugin EasyDNS -PluginArgs $pArgs","title":"EasyDNS"},{"location":"Plugins/EasyDNS/#how-to-use-the-easydns-plugin","text":"This plugin works against the EasyDNS provider. It is assumed that you have already setup an account with a domain registered. Warning The EasyDNS REST API is currently (August 2019) in BETA status and has been for quite a while. Beta APIs may change prior to release and potentially break this plugin. Please don't rely on it for mission critical things.","title":"How To Use the EasyDNS Plugin"},{"location":"Plugins/EasyDNS/#setup","text":"Documentation, including signup instructions, is available at http://docs.sandbox.rest.easydns.net/. When you first receive an API Token and Key, they will be for the sandbox environment, not the live environment. In the sandbox environment, publishing and unpublishing challenge records will work but they will not be hosted as public DNS records and thus can't be used to get a certificate. To move to the live environment, you will need to email the API support team with the request.","title":"Setup"},{"location":"Plugins/EasyDNS/#using-the-plugin","text":"The API Token is used with the EDToken string parameter. The API Key is used with the EDKeySecure SecureString parameter. If you are testing against the sandbox environment, you must also include EDUseSandbox = $true . Warning The EDKey parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ EDToken = 'xxxxxxxxxxxxxxxx' EDKeySecure = ( Read-Host 'Key' -AsSecureString ) } New-PACertificate example . com -Plugin EasyDNS -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/Easyname/","text":"How To Use the Easyname Plugin \u00b6 This plugin works against the Easyname hosting provider. It is assumed that you have already setup an account and have at least one domain registered. Warning As of April 2021, Easyname's REST API is extremely limited in functionality and doesn't allow for DNS record manipulation. So this plugin utilizes web scraping to accomplish the task. That also means it is more likely to break if the site owner ever changes their HTML markup. So be wary of depending on this for critical projects. Setup \u00b6 Because the plugin uses web scraping to manipulate DNS records, all that is needed is your standard login credentials which should include an email address and password. Using the Plugin \u00b6 Your login credentials should be used with the EasynameCredential parameter which is a PSCredential object. $pArgs = @{ EasynameCredential = ( Get-Credential ) } New-PACertificate example . com -Plugin Easyname -PluginArgs $pArgs","title":"Easyname"},{"location":"Plugins/Easyname/#how-to-use-the-easyname-plugin","text":"This plugin works against the Easyname hosting provider. It is assumed that you have already setup an account and have at least one domain registered. Warning As of April 2021, Easyname's REST API is extremely limited in functionality and doesn't allow for DNS record manipulation. So this plugin utilizes web scraping to accomplish the task. That also means it is more likely to break if the site owner ever changes their HTML markup. So be wary of depending on this for critical projects.","title":"How To Use the Easyname Plugin"},{"location":"Plugins/Easyname/#setup","text":"Because the plugin uses web scraping to manipulate DNS records, all that is needed is your standard login credentials which should include an email address and password.","title":"Setup"},{"location":"Plugins/Easyname/#using-the-plugin","text":"Your login credentials should be used with the EasynameCredential parameter which is a PSCredential object. $pArgs = @{ EasynameCredential = ( Get-Credential ) } New-PACertificate example . com -Plugin Easyname -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/FreeDNS/","text":"How To Use the FreeDNS Plugin \u00b6 This plugin works against Free DNS . It is assumed that you have an existing account. Free and Premium accounts are both supported, but there are limitations on Free accounts unless the domain you're using is actually owned by you. There are also limitations on Premium accounts if you do not own the domain you're using. Setup \u00b6 The only setup needed aside from knowing your account credentials is manually adding at least one subdomain/record to the domain you're going to be working against. The plugin grabs a list of available domains from the Subdomains page. So anything not showing on that page won't be found by the plugin. Limitations \u00b6 Free Accounts \u00b6 Solving a CAPTCHA is required in order to create any records on domains you don't own. This makes it impossible to automate with the plugin. Make sure you own the domains you're working against. Free and Premium Accounts \u00b6 Regardless of your account status, Free DNS does not currently allow you to create records beginning with an underscore ( _ ) unless you own the underlying domain you're creating the records on. Because Let's Encrypt DNS challenges require creating a TXT record that starts with _acme-challenge , you will be unable to generate a certificate for a Free DNS hosted domain unless you own it. The only thing you can use a non-owned domain for are challenge aliases . But due to the CAPTCHA limitation on Free accounts, only Premium accounts can do this. If using challenge aliases, make sure your CNAME points to a record that does not start with _ . Using the Plugin \u00b6 Your account credentials will be used with the FDCredential parameter which is a PSCredential object. Warning The FDUsername and FDPassword parameters are deprecated and will be removed in the next major module version. If you are using them, please migrate to the Secure parameter set. $pArgs = @{ FDCredential = ( Get-Credential ) } New-PACertificate example . com -Plugin FreeDNS -PluginArgs $pArgs","title":"FreeDNS"},{"location":"Plugins/FreeDNS/#how-to-use-the-freedns-plugin","text":"This plugin works against Free DNS . It is assumed that you have an existing account. Free and Premium accounts are both supported, but there are limitations on Free accounts unless the domain you're using is actually owned by you. There are also limitations on Premium accounts if you do not own the domain you're using.","title":"How To Use the FreeDNS Plugin"},{"location":"Plugins/FreeDNS/#setup","text":"The only setup needed aside from knowing your account credentials is manually adding at least one subdomain/record to the domain you're going to be working against. The plugin grabs a list of available domains from the Subdomains page. So anything not showing on that page won't be found by the plugin.","title":"Setup"},{"location":"Plugins/FreeDNS/#limitations","text":"","title":"Limitations"},{"location":"Plugins/FreeDNS/#free-accounts","text":"Solving a CAPTCHA is required in order to create any records on domains you don't own. This makes it impossible to automate with the plugin. Make sure you own the domains you're working against.","title":"Free Accounts"},{"location":"Plugins/FreeDNS/#free-and-premium-accounts","text":"Regardless of your account status, Free DNS does not currently allow you to create records beginning with an underscore ( _ ) unless you own the underlying domain you're creating the records on. Because Let's Encrypt DNS challenges require creating a TXT record that starts with _acme-challenge , you will be unable to generate a certificate for a Free DNS hosted domain unless you own it. The only thing you can use a non-owned domain for are challenge aliases . But due to the CAPTCHA limitation on Free accounts, only Premium accounts can do this. If using challenge aliases, make sure your CNAME points to a record that does not start with _ .","title":"Free and Premium Accounts"},{"location":"Plugins/FreeDNS/#using-the-plugin","text":"Your account credentials will be used with the FDCredential parameter which is a PSCredential object. Warning The FDUsername and FDPassword parameters are deprecated and will be removed in the next major module version. If you are using them, please migrate to the Secure parameter set. $pArgs = @{ FDCredential = ( Get-Credential ) } New-PACertificate example . com -Plugin FreeDNS -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/GCloud/","text":"How To Use the GCloud DNS Plugin \u00b6 This plugin works against the Google Cloud DNS provider. It is assumed that you have already setup a project, billing, and created the DNS zone(s) you will be working against. If not, check the Cloud DNS Quickstart . Setup \u00b6 We need to create a service account and give it permission to add TXT records to the zone(s) we'll be issuing certificates for. Create a Custom Role \u00b6 It's always a good idea to limit a service account's access to only what is needed to perform its function. So rather than giving it the default DNS Administrator role, we'll create a custom one that is less dangerous. Start by going to the IAM Roles page and make sure the project containing your DNS zone is selected. Filter the Roles for \"dns\" and find the DNS Administrator role Open the context menu for the role and click Create role from this role Title: DNS Zone Editor Description: List/Read Zones and Write Zone data ID: DNSZoneEditor Role launch stage: General Availability In the list of permissions, uncheck all except the following: dns.changes.create dns.changes.get dns.changes.list dns.managedZones.get dns.managedZones.list dns.resourceRecordSets.create dns.resourceRecordSets.delete dns.resourceRecordSets.get dns.resourceRecordSets.list dns.resourceRecordSets.update Click Create This will give the account it is applied to the ability to edit all record types for all existing zones in the current project. Unfortunately, the current Google APIs don't allow us to further restrict this role so that the account can only modify TXT records or only specific zones. Create a Service Account \u00b6 Start by going to the Service accounts page and make sure the correct project is selected. Click Create service account Service account name: posh-acme Role: DNS Zone Editor Check Furnish a new private key Key type: JSON Click Create A JSON file should be automatically downloaded. Don't lose it . If you have multiple projects with DNS zones that this account will need to modify, you can grant cross-project access by creating the same DNS Zone Editor role in the other projects and then granting the role to this service account by referencing its Principal ID which usually looks like <id>@<project>.iam.gserviceaccount.com . Using the Plugin \u00b6 If all of your DNS zones are in the same project as your service account, the only plugin argument you need is GCKeyFile which is the path to the JSON account file you downloaded. The plugin will cache the contents of this file on each use in case the original gets deleted or moved. But as long as it still exists, the real file will take precedence over the cached copy so you can update it in the future if necessary. $pArgs = @{ GCKeyFile = '<path to json>' } New-PACertificate example . com -Plugin GCloud -PluginArgs $pArgs If your DNS zones are in a different project than your service account or if you have zones that span multiple projects, you will also need to supply the GCProjectId parameter with all of the project IDs that contain your DNS zones (including the one associated with the service account). $pArgs = @{ GCKeyFile = '<path to json>' GCProjectId = 'project1' , 'project2' } New-PACertificate example . com -Plugin GCloud -PluginArgs $pArgs App Engine Compatibility Note \u00b6 If you're planning on uploading your certificate to Google App Engine, it has been reported that it only supports RSA based certificates. So don't use an ECC key option. It also requires the private key to be in PKCS#1 format and the module currently outputs the key as PKCS#8. You can convert it with openssl using the following command: openssl rsa -in cert.key -out cert-pkcs1.key","title":"GCloud"},{"location":"Plugins/GCloud/#how-to-use-the-gcloud-dns-plugin","text":"This plugin works against the Google Cloud DNS provider. It is assumed that you have already setup a project, billing, and created the DNS zone(s) you will be working against. If not, check the Cloud DNS Quickstart .","title":"How To Use the GCloud DNS Plugin"},{"location":"Plugins/GCloud/#setup","text":"We need to create a service account and give it permission to add TXT records to the zone(s) we'll be issuing certificates for.","title":"Setup"},{"location":"Plugins/GCloud/#create-a-custom-role","text":"It's always a good idea to limit a service account's access to only what is needed to perform its function. So rather than giving it the default DNS Administrator role, we'll create a custom one that is less dangerous. Start by going to the IAM Roles page and make sure the project containing your DNS zone is selected. Filter the Roles for \"dns\" and find the DNS Administrator role Open the context menu for the role and click Create role from this role Title: DNS Zone Editor Description: List/Read Zones and Write Zone data ID: DNSZoneEditor Role launch stage: General Availability In the list of permissions, uncheck all except the following: dns.changes.create dns.changes.get dns.changes.list dns.managedZones.get dns.managedZones.list dns.resourceRecordSets.create dns.resourceRecordSets.delete dns.resourceRecordSets.get dns.resourceRecordSets.list dns.resourceRecordSets.update Click Create This will give the account it is applied to the ability to edit all record types for all existing zones in the current project. Unfortunately, the current Google APIs don't allow us to further restrict this role so that the account can only modify TXT records or only specific zones.","title":"Create a Custom Role"},{"location":"Plugins/GCloud/#create-a-service-account","text":"Start by going to the Service accounts page and make sure the correct project is selected. Click Create service account Service account name: posh-acme Role: DNS Zone Editor Check Furnish a new private key Key type: JSON Click Create A JSON file should be automatically downloaded. Don't lose it . If you have multiple projects with DNS zones that this account will need to modify, you can grant cross-project access by creating the same DNS Zone Editor role in the other projects and then granting the role to this service account by referencing its Principal ID which usually looks like <id>@<project>.iam.gserviceaccount.com .","title":"Create a Service Account"},{"location":"Plugins/GCloud/#using-the-plugin","text":"If all of your DNS zones are in the same project as your service account, the only plugin argument you need is GCKeyFile which is the path to the JSON account file you downloaded. The plugin will cache the contents of this file on each use in case the original gets deleted or moved. But as long as it still exists, the real file will take precedence over the cached copy so you can update it in the future if necessary. $pArgs = @{ GCKeyFile = '<path to json>' } New-PACertificate example . com -Plugin GCloud -PluginArgs $pArgs If your DNS zones are in a different project than your service account or if you have zones that span multiple projects, you will also need to supply the GCProjectId parameter with all of the project IDs that contain your DNS zones (including the one associated with the service account). $pArgs = @{ GCKeyFile = '<path to json>' GCProjectId = 'project1' , 'project2' } New-PACertificate example . com -Plugin GCloud -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/GCloud/#app-engine-compatibility-note","text":"If you're planning on uploading your certificate to Google App Engine, it has been reported that it only supports RSA based certificates. So don't use an ECC key option. It also requires the private key to be in PKCS#1 format and the module currently outputs the key as PKCS#8. You can convert it with openssl using the following command: openssl rsa -in cert.key -out cert-pkcs1.key","title":"App Engine Compatibility Note"},{"location":"Plugins/Gandi/","text":"How To Use the Gandi DNS Plugin \u00b6 This plugin works against the Gandi DNS provider. It is assumed that you have already setup an account and have a registered domain with an associated DNS zone you will be working against. Setup \u00b6 First, login to your account page and go to the Security section. There will be an option to generate or regenerate the \"API Key for LiveDNS\". Do that and make a record the new value. Using the Plugin \u00b6 The API key is used with the GandiToken SecureString parameter. Warning The GandiTokenInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ GandiToken = ( Read-Host \"Gandi Token\" -AsSecureString ) } New-PACertificate example . com -Plugin Gandi -PluginArgs $pArgs","title":"Gandi"},{"location":"Plugins/Gandi/#how-to-use-the-gandi-dns-plugin","text":"This plugin works against the Gandi DNS provider. It is assumed that you have already setup an account and have a registered domain with an associated DNS zone you will be working against.","title":"How To Use the Gandi DNS Plugin"},{"location":"Plugins/Gandi/#setup","text":"First, login to your account page and go to the Security section. There will be an option to generate or regenerate the \"API Key for LiveDNS\". Do that and make a record the new value.","title":"Setup"},{"location":"Plugins/Gandi/#using-the-plugin","text":"The API key is used with the GandiToken SecureString parameter. Warning The GandiTokenInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ GandiToken = ( Read-Host \"Gandi Token\" -AsSecureString ) } New-PACertificate example . com -Plugin Gandi -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/GoDaddy/","text":"How To Use the GoDaddy DNS Plugin \u00b6 This plugin works against the GoDaddy DNS provider. It is assumed that you have already setup an account and created the DNS zone(s) you will be working against. Setup \u00b6 We need to generate an API key for the production GoDaddy environment. Click Create New API Key Name: Posh-ACME Environment: Production Click Next Copy the resulting key and secret strings somewhere safe. There's no way to retrieve the secret once you leave this page. You would have to delete the old one and create a new one. Using the Plugin \u00b6 The Key is used with the GDKey string parameter and the Secret is used with the GDSecretSecure SecureString parameter. Warning The GDSecret parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ GDKey = 'xxxxxxxxxxxxxxxx' GDSecret = ( Read-Host 'Secret' -AsSecureString ) } New-PACertificate example . com -Plugin GoDaddy -PluginArgs $pArgs","title":"GoDaddy"},{"location":"Plugins/GoDaddy/#how-to-use-the-godaddy-dns-plugin","text":"This plugin works against the GoDaddy DNS provider. It is assumed that you have already setup an account and created the DNS zone(s) you will be working against.","title":"How To Use the GoDaddy DNS Plugin"},{"location":"Plugins/GoDaddy/#setup","text":"We need to generate an API key for the production GoDaddy environment. Click Create New API Key Name: Posh-ACME Environment: Production Click Next Copy the resulting key and secret strings somewhere safe. There's no way to retrieve the secret once you leave this page. You would have to delete the old one and create a new one.","title":"Setup"},{"location":"Plugins/GoDaddy/#using-the-plugin","text":"The Key is used with the GDKey string parameter and the Secret is used with the GDSecretSecure SecureString parameter. Warning The GDSecret parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ GDKey = 'xxxxxxxxxxxxxxxx' GDSecret = ( Read-Host 'Secret' -AsSecureString ) } New-PACertificate example . com -Plugin GoDaddy -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/GoogleDomains/","text":"How To Use the Google Domains Plugin \u00b6 This plugin is for domains registered with Google Domains and using its native DNS service. Do not confuse it with Google Cloud DNS which should use the GCloud plugin instead. Setup \u00b6 With your domain selected in the Google Domains interface, browse to the Security section and choose Create Token under DNS ACME API . Save the secret token value that is generated. You will provide it to the plugin along with the root domain. Using the Plugin \u00b6 To generate a certificate that is comprised of names all within a single domain, you will pass the root domain and the access token as a PSCredential object to the GDomCredential parameter where the username is the root domain and the password is the access token. $pArgs = @{ GDomCredential = Get-Credential -Username example . com } New-PACertificate 'example.com' , 'www.example.com' -Plugin GoogleDomains -PluginArgs $pArgs If you are generating a certificate that uses names from multiple domains, make sure you have an access token for each domain and provide an array of PSCredential objects to the GDomCredential parameter for each unique domain in your cert. $pArgs = @{ GDomCredential = @( ( Get-Credential -Username example . com ) ( Get-Credential -Username example . net ) ) } New-PACertificate 'www.example.com' , 'www.example.net' -Plugin GoogleDomains -PluginArgs $pArgs","title":"GoogleDomains"},{"location":"Plugins/GoogleDomains/#how-to-use-the-google-domains-plugin","text":"This plugin is for domains registered with Google Domains and using its native DNS service. Do not confuse it with Google Cloud DNS which should use the GCloud plugin instead.","title":"How To Use the Google Domains Plugin"},{"location":"Plugins/GoogleDomains/#setup","text":"With your domain selected in the Google Domains interface, browse to the Security section and choose Create Token under DNS ACME API . Save the secret token value that is generated. You will provide it to the plugin along with the root domain.","title":"Setup"},{"location":"Plugins/GoogleDomains/#using-the-plugin","text":"To generate a certificate that is comprised of names all within a single domain, you will pass the root domain and the access token as a PSCredential object to the GDomCredential parameter where the username is the root domain and the password is the access token. $pArgs = @{ GDomCredential = Get-Credential -Username example . com } New-PACertificate 'example.com' , 'www.example.com' -Plugin GoogleDomains -PluginArgs $pArgs If you are generating a certificate that uses names from multiple domains, make sure you have an access token for each domain and provide an array of PSCredential objects to the GDomCredential parameter for each unique domain in your cert. $pArgs = @{ GDomCredential = @( ( Get-Credential -Username example . com ) ( Get-Credential -Username example . net ) ) } New-PACertificate 'www.example.com' , 'www.example.net' -Plugin GoogleDomains -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/Hetzner/","text":"How To Use the Hetzner DNS Plugin \u00b6 This plugin works against the Hetzner DNS provider. It is assumed that you have already setup an account and created the DNS zone(s) you will be working against. Setup \u00b6 You will need to generate an API Token if you haven't already done so. Go to Manage API tokens after logging in to the DNS Console . Give the token a name and click Create access token . Make a note of the token value as you'll need it later and won't be able to retrieve it after this point. Using the Plugin \u00b6 You will need to provide the API Token as a SecureString value to HetznerToken . Warning The HetznerTokenInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ HetznerToken = ( Read-Host 'Hetzner Token' -AsSecureString ) } New-PACertificate example . com -Plugin Hetzner -PluginArgs $pArgs","title":"Hetzner"},{"location":"Plugins/Hetzner/#how-to-use-the-hetzner-dns-plugin","text":"This plugin works against the Hetzner DNS provider. It is assumed that you have already setup an account and created the DNS zone(s) you will be working against.","title":"How To Use the Hetzner DNS Plugin"},{"location":"Plugins/Hetzner/#setup","text":"You will need to generate an API Token if you haven't already done so. Go to Manage API tokens after logging in to the DNS Console . Give the token a name and click Create access token . Make a note of the token value as you'll need it later and won't be able to retrieve it after this point.","title":"Setup"},{"location":"Plugins/Hetzner/#using-the-plugin","text":"You will need to provide the API Token as a SecureString value to HetznerToken . Warning The HetznerTokenInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ HetznerToken = ( Read-Host 'Hetzner Token' -AsSecureString ) } New-PACertificate example . com -Plugin Hetzner -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/HostingDe/","text":"How To Use the HostingDe Plugin \u00b6 This plugin works against the Hosting.de provider. It is assumed that you already have an account and at least one managed zone already configured. Setup \u00b6 On your account profile page , click Create new API key . Give it a name, and uncheck all permissions except \"Display\" and \"Edit\" within DNS Service - Zones. Record the value to use later. You won't be able to go back and look it up after leaving the page. Using the Plugin \u00b6 The API key will used with the HDEToken parameter as a SecureString value. $pArgs = @{ HDEToken = ( Read-Host 'API Token' -AsSecureString ) } New-PACertificate example . com -Plugin HostingDe -PluginArgs $pArgs","title":"HostingDe"},{"location":"Plugins/HostingDe/#how-to-use-the-hostingde-plugin","text":"This plugin works against the Hosting.de provider. It is assumed that you already have an account and at least one managed zone already configured.","title":"How To Use the HostingDe Plugin"},{"location":"Plugins/HostingDe/#setup","text":"On your account profile page , click Create new API key . Give it a name, and uncheck all permissions except \"Display\" and \"Edit\" within DNS Service - Zones. Record the value to use later. You won't be able to go back and look it up after leaving the page.","title":"Setup"},{"location":"Plugins/HostingDe/#using-the-plugin","text":"The API key will used with the HDEToken parameter as a SecureString value. $pArgs = @{ HDEToken = ( Read-Host 'API Token' -AsSecureString ) } New-PACertificate example . com -Plugin HostingDe -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/HurricaneElectric/","text":"How To Use the HurricaneElectric Plugin \u00b6 This plugin works against Hurricane Electric DNS . It is assumed that you have already setup an account and created the DNS zone(s) you will be working against. Note Hurricane Electric can be configured as a secondary to your primary zones hosted elsewhere. This plugin will not work for secondary zones. You must use a plugin that is able to modify the primary nameservers. Setup \u00b6 There's not really any setup aside from knowing your account credentials. Hurricane Electric doesn't currently support an API for manipulating DNS records. So this plugin utilizes web scraping to accomplish the task. That also means it is more likely to break if the site owner ever changes their HTML markup. So be wary of depending on this for critical projects. Using the Plugin \u00b6 Your account credentials will be used with the HECredential parameter as a PSCredential object. Warning The HEUsername and HEPassword parameters are deprecated and will be removed in the next major module version. If you are using them, please migrate to the Secure parameter set. $pArgs = @{ HECredential = ( Get-Credential ) } New-PACertificate example . com -Plugin HurricaneElectric -PluginArgs $pArgs","title":"HurricaneElectric"},{"location":"Plugins/HurricaneElectric/#how-to-use-the-hurricaneelectric-plugin","text":"This plugin works against Hurricane Electric DNS . It is assumed that you have already setup an account and created the DNS zone(s) you will be working against. Note Hurricane Electric can be configured as a secondary to your primary zones hosted elsewhere. This plugin will not work for secondary zones. You must use a plugin that is able to modify the primary nameservers.","title":"How To Use the HurricaneElectric Plugin"},{"location":"Plugins/HurricaneElectric/#setup","text":"There's not really any setup aside from knowing your account credentials. Hurricane Electric doesn't currently support an API for manipulating DNS records. So this plugin utilizes web scraping to accomplish the task. That also means it is more likely to break if the site owner ever changes their HTML markup. So be wary of depending on this for critical projects.","title":"Setup"},{"location":"Plugins/HurricaneElectric/#using-the-plugin","text":"Your account credentials will be used with the HECredential parameter as a PSCredential object. Warning The HEUsername and HEPassword parameters are deprecated and will be removed in the next major module version. If you are using them, please migrate to the Secure parameter set. $pArgs = @{ HECredential = ( Get-Credential ) } New-PACertificate example . com -Plugin HurricaneElectric -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/IBMSoftLayer/","text":"How To Use the IBMSoftlayer DNS Plugin \u00b6 This plugin works against the IBM Cloud DNS provider (formerly known as SoftLayer). It is assumed that you have already setup an account and created the DNS zone(s) you will be working against. Setup \u00b6 If you don't already have an API Key setup, login to your account and go to the Users page. There should be a Generate link in the \"API KEY\" column. When you click it, you will briefly see a dialog that shows your new API username and key. If you miss it, there should now be a View link where the Generate link was before. Click that and make a note of your API username and key values. Using the Plugin \u00b6 The API username and key are used with the IBMCredential parameter as a PSCredential object where the key is the password. Warning The IBMUser and IBMKey parameters are deprecated and will be removed in the next major module version. If you are using them, please migrate to the Secure parameter set. $pArgs = @{ IBMCredential = ( Get-Credential ) } New-PACertificate example . com -Plugin IBMSoftLayer -PluginArgs $pArgs","title":"IBMSoftLayer"},{"location":"Plugins/IBMSoftLayer/#how-to-use-the-ibmsoftlayer-dns-plugin","text":"This plugin works against the IBM Cloud DNS provider (formerly known as SoftLayer). It is assumed that you have already setup an account and created the DNS zone(s) you will be working against.","title":"How To Use the IBMSoftlayer DNS Plugin"},{"location":"Plugins/IBMSoftLayer/#setup","text":"If you don't already have an API Key setup, login to your account and go to the Users page. There should be a Generate link in the \"API KEY\" column. When you click it, you will briefly see a dialog that shows your new API username and key. If you miss it, there should now be a View link where the Generate link was before. Click that and make a note of your API username and key values.","title":"Setup"},{"location":"Plugins/IBMSoftLayer/#using-the-plugin","text":"The API username and key are used with the IBMCredential parameter as a PSCredential object where the key is the password. Warning The IBMUser and IBMKey parameters are deprecated and will be removed in the next major module version. If you are using them, please migrate to the Secure parameter set. $pArgs = @{ IBMCredential = ( Get-Credential ) } New-PACertificate example . com -Plugin IBMSoftLayer -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/IONOS/","text":"How To Use the IONOS DNS Plugin \u00b6 This plugin works against the IONOS.de / IONOS.com DNS provider. It is assumed that you have already setup an account and one or more domains you will be working against. Setup \u00b6 You will need to generate an API Token if you haven't already done so. Follow the guide provided by IONOS here (DE) or here (EN) . Using the Plugin \u00b6 You will need to provide the API Public Prefix to IONOSKeyPrefix and the API Secret to IONOSKeySecret . $pArgs = @{ IONOSKeyPrefix = ( Read-Host 'API Public Prefix' ) IONOSKeySecret = ( Read-Host 'API Secret' -AsSecureString ) } New-PACertificate example . com -Plugin IONOS -PluginArgs $pArgs","title":"IONOS"},{"location":"Plugins/IONOS/#how-to-use-the-ionos-dns-plugin","text":"This plugin works against the IONOS.de / IONOS.com DNS provider. It is assumed that you have already setup an account and one or more domains you will be working against.","title":"How To Use the IONOS DNS Plugin"},{"location":"Plugins/IONOS/#setup","text":"You will need to generate an API Token if you haven't already done so. Follow the guide provided by IONOS here (DE) or here (EN) .","title":"Setup"},{"location":"Plugins/IONOS/#using-the-plugin","text":"You will need to provide the API Public Prefix to IONOSKeyPrefix and the API Secret to IONOSKeySecret . $pArgs = @{ IONOSKeyPrefix = ( Read-Host 'API Public Prefix' ) IONOSKeySecret = ( Read-Host 'API Secret' -AsSecureString ) } New-PACertificate example . com -Plugin IONOS -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/ISPConfig/","text":"How To Use the ISPConfig DNS Plugin \u00b6 This plugin works against the ISPConfig hosting control panel. It is assumed that you have an account and created the DNS zone(s) you will be working against. Setup \u00b6 As an admin account, go to System - Remote Users and create a new remote user with the following permissions: Remote Access (Optional) Remote Access IPs Client functions DNZ zone functions DNS txt functions In addition to the credentials for the remote user, you will need to know the URL for the JSON REST endpoint. You should be able to derive it by using the URL of the control panel home page. Just replace index.php with remote/json/php . For example: Homepage: https://ispc.example.com:8080/index.php JSON Endpoint: https://ispc.example.com:8080/remote/json.php Using the Plugin \u00b6 The remote access username and password are used the the ISPConfigCredential parameter as a PSCredential object. The JSON endpoint is used with the ISPConfigEndpoint parameter. If your control panel is currently using a self-signed certificate, you may also need to use ISPConfigIgnoreCert=$true . $pArgs = @{ ISPConfigCredential = ( Get-Credential ) ISPConfigEndpoint = 'https://ispc.example.com:8080/remote/json.php' ISPConfigIgnoreCert = $true } New-PACertificate example . com -Plugin ISPConfig -PluginArgs $pArgs","title":"ISPConfig"},{"location":"Plugins/ISPConfig/#how-to-use-the-ispconfig-dns-plugin","text":"This plugin works against the ISPConfig hosting control panel. It is assumed that you have an account and created the DNS zone(s) you will be working against.","title":"How To Use the ISPConfig DNS Plugin"},{"location":"Plugins/ISPConfig/#setup","text":"As an admin account, go to System - Remote Users and create a new remote user with the following permissions: Remote Access (Optional) Remote Access IPs Client functions DNZ zone functions DNS txt functions In addition to the credentials for the remote user, you will need to know the URL for the JSON REST endpoint. You should be able to derive it by using the URL of the control panel home page. Just replace index.php with remote/json/php . For example: Homepage: https://ispc.example.com:8080/index.php JSON Endpoint: https://ispc.example.com:8080/remote/json.php","title":"Setup"},{"location":"Plugins/ISPConfig/#using-the-plugin","text":"The remote access username and password are used the the ISPConfigCredential parameter as a PSCredential object. The JSON endpoint is used with the ISPConfigEndpoint parameter. If your control panel is currently using a self-signed certificate, you may also need to use ISPConfigIgnoreCert=$true . $pArgs = @{ ISPConfigCredential = ( Get-Credential ) ISPConfigEndpoint = 'https://ispc.example.com:8080/remote/json.php' ISPConfigIgnoreCert = $true } New-PACertificate example . com -Plugin ISPConfig -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/Infoblox/","text":"How To Use the Infoblox DNS Plugin \u00b6 This plugin works against Infoblox DDI . It is assumed that you have a set of credentials and permissions to modify TXT records for the zone(s) you will be working against. Setup \u00b6 The Infoblox WAPI (REST API) takes a standard username/password combo for authentication. There is no setup aside from knowing those credentials and making sure you have enough permissions. If your organization is using split-brain DNS using DNS Views, you should also know which DNS View to write against that is internet-facing. The DNS View name is case-sensitive. Using the Plugin \u00b6 Your username and password are used with the IBCred parameter as a PSCredential object. You need to set the IBServer parameter which is usually the grid master. By default, the DNS View is set to default . You can use the IBView parameter to specify a different one. If your grid still uses the default self-signed certificate, you'll also want to set IBIgnoreCert=$true . Warning The IBUsername and IBPassword parameters are deprecated and will be removed in the next major module version. If you are using them, please migrate to the Secure parameter set. $pArgs = @{ IBServer = 'gridmaster.example.com' IBView = 'External' IBCred = ( Get-Credential ) IBIgnoreCert = $true } New-PACertificate example . com -Plugin Infoblox -PluginArgs $pArgs","title":"Infoblox"},{"location":"Plugins/Infoblox/#how-to-use-the-infoblox-dns-plugin","text":"This plugin works against Infoblox DDI . It is assumed that you have a set of credentials and permissions to modify TXT records for the zone(s) you will be working against.","title":"How To Use the Infoblox DNS Plugin"},{"location":"Plugins/Infoblox/#setup","text":"The Infoblox WAPI (REST API) takes a standard username/password combo for authentication. There is no setup aside from knowing those credentials and making sure you have enough permissions. If your organization is using split-brain DNS using DNS Views, you should also know which DNS View to write against that is internet-facing. The DNS View name is case-sensitive.","title":"Setup"},{"location":"Plugins/Infoblox/#using-the-plugin","text":"Your username and password are used with the IBCred parameter as a PSCredential object. You need to set the IBServer parameter which is usually the grid master. By default, the DNS View is set to default . You can use the IBView parameter to specify a different one. If your grid still uses the default self-signed certificate, you'll also want to set IBIgnoreCert=$true . Warning The IBUsername and IBPassword parameters are deprecated and will be removed in the next major module version. If you are using them, please migrate to the Secure parameter set. $pArgs = @{ IBServer = 'gridmaster.example.com' IBView = 'External' IBCred = ( Get-Credential ) IBIgnoreCert = $true } New-PACertificate example . com -Plugin Infoblox -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/Infomaniak/","text":"How To Use the Infomaniak DNS Plugin \u00b6 This plugin works against the Infomaniak DNS provider. It is assumed that you have already setup an account and created the DNS zone(s) you will be working against. Setup \u00b6 You will need to generate an API Token if you haven't already done so. Go to Manage API tokens after logging in to the Management Console . Create a new token with the scope Domain . Set the expiration time to your preference. Make a note of the token value as you'll need it later and won't be able to retrieve it after this point. Note If the token gets invalidated before a renewal is submitted, a new token has to be created and the order has to be updated. Using the Plugin \u00b6 You will need to provide the API Token as a SecureString value to InfomaniakToken . Warning The InfomaniakTokenInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ InfomaniakToken = ( Read-Host \"Infomaniak Token\" -AsSecureString ) } New-PACertificate example . com -Plugin Infomaniak -PluginArgs $pArgs","title":"Infomaniak"},{"location":"Plugins/Infomaniak/#how-to-use-the-infomaniak-dns-plugin","text":"This plugin works against the Infomaniak DNS provider. It is assumed that you have already setup an account and created the DNS zone(s) you will be working against.","title":"How To Use the Infomaniak DNS Plugin"},{"location":"Plugins/Infomaniak/#setup","text":"You will need to generate an API Token if you haven't already done so. Go to Manage API tokens after logging in to the Management Console . Create a new token with the scope Domain . Set the expiration time to your preference. Make a note of the token value as you'll need it later and won't be able to retrieve it after this point. Note If the token gets invalidated before a renewal is submitted, a new token has to be created and the order has to be updated.","title":"Setup"},{"location":"Plugins/Infomaniak/#using-the-plugin","text":"You will need to provide the API Token as a SecureString value to InfomaniakToken . Warning The InfomaniakTokenInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ InfomaniakToken = ( Read-Host \"Infomaniak Token\" -AsSecureString ) } New-PACertificate example . com -Plugin Infomaniak -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/LeaseWeb/","text":"How To Use the LeaseWeb DNS Plugin \u00b6 This plugin works against the LeaseWeb DNS provider. It is assumed that you have already setup an account and created the DNS zone(s) you will be working against. Setup \u00b6 Create your API key from the Customer Portal and make a note of it for later. Using the Plugin \u00b6 The API key is used with the LSWApiKey SecureString parameter. $pArgs = @{ LSWApiKey = ( Read-Host -Prompt 'API Key' -AsSecureString ) } New-PACertificate example . com -Plugin LeaseWeb -PluginArgs $pArgs","title":"LeaseWeb"},{"location":"Plugins/LeaseWeb/#how-to-use-the-leaseweb-dns-plugin","text":"This plugin works against the LeaseWeb DNS provider. It is assumed that you have already setup an account and created the DNS zone(s) you will be working against.","title":"How To Use the LeaseWeb DNS Plugin"},{"location":"Plugins/LeaseWeb/#setup","text":"Create your API key from the Customer Portal and make a note of it for later.","title":"Setup"},{"location":"Plugins/LeaseWeb/#using-the-plugin","text":"The API key is used with the LSWApiKey SecureString parameter. $pArgs = @{ LSWApiKey = ( Read-Host -Prompt 'API Key' -AsSecureString ) } New-PACertificate example . com -Plugin LeaseWeb -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/Linode/","text":"How To Use the Linode DNS Plugin \u00b6 This plugin works against the Linode DNS provider. It is assumed that you have already setup an account and created the DNS zone(s) you will be working against. Note The link above is an affiliate link which reduces my out of pocket cost to maintain this plugin. I'd be most grateful if you use it when signing up for a new account. Setup \u00b6 This plugin works against v4 of the Linode API which is not compatible with \"legacy\" pre-paid accounts. In order to use it and generate the appropriate API Token, your account must be a newer style \"hourly billed\" account which it should automatically be if you created it after late 2014. Login to your account and go to the API Tokens section of your profile. Generate a Personal Access Token and give it Read/Write access to Domains. Record the value to use later. You can't retrieve it if you forget it. You can only delete and re-create. Using the Plugin \u00b6 The token you created is used with the LIToken SecureString parameter. Warning The LITokenInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. Linode also has an unusually long delay between when a record is set and when it propagates to their public name servers. There's a note at the bottom of the DNS Manager web GUI that reads, \"Changes made to a master zone will take effect in our nameservers every quarter hour.\" So you need to set DnsSleep parameter in New-PACertificate to at least 15 minutes. But in testing, 17 minutes (1020 seconds) seemed to be the minimum to reliably satisfy the challenges. $pArgs = @{ LIToken = ( Read-Host -Prompt 'Token' -AsSecureString ) } New-PACertificate example . com -Plugin Linode -PluginArgs $pArgs -DnsSleep 1020","title":"Linode"},{"location":"Plugins/Linode/#how-to-use-the-linode-dns-plugin","text":"This plugin works against the Linode DNS provider. It is assumed that you have already setup an account and created the DNS zone(s) you will be working against. Note The link above is an affiliate link which reduces my out of pocket cost to maintain this plugin. I'd be most grateful if you use it when signing up for a new account.","title":"How To Use the Linode DNS Plugin"},{"location":"Plugins/Linode/#setup","text":"This plugin works against v4 of the Linode API which is not compatible with \"legacy\" pre-paid accounts. In order to use it and generate the appropriate API Token, your account must be a newer style \"hourly billed\" account which it should automatically be if you created it after late 2014. Login to your account and go to the API Tokens section of your profile. Generate a Personal Access Token and give it Read/Write access to Domains. Record the value to use later. You can't retrieve it if you forget it. You can only delete and re-create.","title":"Setup"},{"location":"Plugins/Linode/#using-the-plugin","text":"The token you created is used with the LIToken SecureString parameter. Warning The LITokenInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. Linode also has an unusually long delay between when a record is set and when it propagates to their public name servers. There's a note at the bottom of the DNS Manager web GUI that reads, \"Changes made to a master zone will take effect in our nameservers every quarter hour.\" So you need to set DnsSleep parameter in New-PACertificate to at least 15 minutes. But in testing, 17 minutes (1020 seconds) seemed to be the minimum to reliably satisfy the challenges. $pArgs = @{ LIToken = ( Read-Host -Prompt 'Token' -AsSecureString ) } New-PACertificate example . com -Plugin Linode -PluginArgs $pArgs -DnsSleep 1020","title":"Using the Plugin"},{"location":"Plugins/Loopia/","text":"How to use the Loopia Plugin \u00b6 This plugin works against the Loopia DNS provider. It presumes that you have already set up an account and registered or transferred the domain(s) you are targeting. You will also need to be subscribed to their Advanced DNS product. Setup \u00b6 From the customer zone , click API user and then Create API User . Configure an appropriate Username and Password and select Advanced privileges . When complete, open the details for the user you created and select the following privileges: addSubdomain addZoneRecord getDomains getSubdomains getZoneRecords removeSubdomain removeZoneRecord Keep in mind, the username you selected will end with @loopiaapi and you will need to include the full username@loopiaapi value in the plugin parameters later. Using the Plugin \u00b6 The username is used with the LoopiaUser parameter and the password is used with the LoopiaPass SecureString parameter. Warning The LoopiaPassInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ LoopiaUser = 'username@loopiaapi' LoopiaPass = ( Read-Host 'Password' -AsSecureString ) } New-PACertificate example . com -Plugin Loopia -PluginArgs $pArgs","title":"Loopia"},{"location":"Plugins/Loopia/#how-to-use-the-loopia-plugin","text":"This plugin works against the Loopia DNS provider. It presumes that you have already set up an account and registered or transferred the domain(s) you are targeting. You will also need to be subscribed to their Advanced DNS product.","title":"How to use the Loopia Plugin"},{"location":"Plugins/Loopia/#setup","text":"From the customer zone , click API user and then Create API User . Configure an appropriate Username and Password and select Advanced privileges . When complete, open the details for the user you created and select the following privileges: addSubdomain addZoneRecord getDomains getSubdomains getZoneRecords removeSubdomain removeZoneRecord Keep in mind, the username you selected will end with @loopiaapi and you will need to include the full username@loopiaapi value in the plugin parameters later.","title":"Setup"},{"location":"Plugins/Loopia/#using-the-plugin","text":"The username is used with the LoopiaUser parameter and the password is used with the LoopiaPass SecureString parameter. Warning The LoopiaPassInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ LoopiaUser = 'username@loopiaapi' LoopiaPass = ( Read-Host 'Password' -AsSecureString ) } New-PACertificate example . com -Plugin Loopia -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/LuaDns/","text":"How To Use the LuaDns DNS Plugin \u00b6 This plugin works against the LuaDns DNS provider. It is assumed that you have already setup an account and created the DNS zone(s) you will be working against. Setup \u00b6 First, go to the Account Settings page and make sure the Enable API Access box is checked. Then click Show Token to see the API token for your account. You'll also need the email address associated with the account. Using the Plugin \u00b6 The account email address and API token should be used to create a PSCredential object that you'll pass to the LuaCredential parameter. Warning The LuaUsername and LuaPassword parameters are deprecated and will be removed in the next major module version. If you are using them, please migrate to the Secure parameter set. $pArgs = @{ LuaCredential = ( Get-Credential ) } New-PACertificate example . com -Plugin LuaDns -PluginArgs $pArgs","title":"LuaDns"},{"location":"Plugins/LuaDns/#how-to-use-the-luadns-dns-plugin","text":"This plugin works against the LuaDns DNS provider. It is assumed that you have already setup an account and created the DNS zone(s) you will be working against.","title":"How To Use the LuaDns DNS Plugin"},{"location":"Plugins/LuaDns/#setup","text":"First, go to the Account Settings page and make sure the Enable API Access box is checked. Then click Show Token to see the API token for your account. You'll also need the email address associated with the account.","title":"Setup"},{"location":"Plugins/LuaDns/#using-the-plugin","text":"The account email address and API token should be used to create a PSCredential object that you'll pass to the LuaCredential parameter. Warning The LuaUsername and LuaPassword parameters are deprecated and will be removed in the next major module version. If you are using them, please migrate to the Secure parameter set. $pArgs = @{ LuaCredential = ( Get-Credential ) } New-PACertificate example . com -Plugin LuaDns -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/NS1/","text":"How To Use the NS1 DNS Plugin \u00b6 This plugin works against the NS1 DNS provider. It is assumed that you have already setup an account and created the DNS zone(s) you will be working against. Setup \u00b6 First, go to the API Keys page and click Add Key . Give it an app name like Posh-ACME and uncheck all of the permissions except the ones in the DNS section. You can also optionally add IP whitelist entries to further protect the use of the key. When finished, click Create Key and then unhide and record the key value for later. Using the Plugin \u00b6 The API key will be used with the NS1Key SecureString parameter. Warning The NS1KeyInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ NS1Key = ( Read-Host -Prompt \"API Key\" -AsSecureString ) } New-PACertificate example . com -Plugin NS1 -PluginArgs $pArgs","title":"NS1"},{"location":"Plugins/NS1/#how-to-use-the-ns1-dns-plugin","text":"This plugin works against the NS1 DNS provider. It is assumed that you have already setup an account and created the DNS zone(s) you will be working against.","title":"How To Use the NS1 DNS Plugin"},{"location":"Plugins/NS1/#setup","text":"First, go to the API Keys page and click Add Key . Give it an app name like Posh-ACME and uncheck all of the permissions except the ones in the DNS section. You can also optionally add IP whitelist entries to further protect the use of the key. When finished, click Create Key and then unhide and record the key value for later.","title":"Setup"},{"location":"Plugins/NS1/#using-the-plugin","text":"The API key will be used with the NS1Key SecureString parameter. Warning The NS1KeyInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ NS1Key = ( Read-Host -Prompt \"API Key\" -AsSecureString ) } New-PACertificate example . com -Plugin NS1 -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/NameCom/","text":"How To Use the NameCom DNS Plugin \u00b6 This plugin works against the name.com domain registrar and DNS provider. It is assumed that you have already setup an account and purchased domain you will be working against. You must also be using name.com's own DNS hosting. Setup \u00b6 First, go to the Account API Settings page and create a new API token for your account. Make a note of both the token value and the username associated with the token. If the username is blank immediately following the token creation, try refreshing the page. Using the Plugin \u00b6 The username is used with the NameComUsername parameter and the token is used with the NameComTokenSecure SecureString parameter. If you are using name.com's API testing environment, you'll also need to include NameComUseTestEnv=$true in your plugin arguments. Warning The NameComeToken parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pargs = @{ NameComUsername = 'username' NameComTokenSecure = ( Read-Host 'Token' -AsSecureString ) } New-PACertificate example . com -Plugin NameCom -PluginArgs $pargs","title":"NameCom"},{"location":"Plugins/NameCom/#how-to-use-the-namecom-dns-plugin","text":"This plugin works against the name.com domain registrar and DNS provider. It is assumed that you have already setup an account and purchased domain you will be working against. You must also be using name.com's own DNS hosting.","title":"How To Use the NameCom DNS Plugin"},{"location":"Plugins/NameCom/#setup","text":"First, go to the Account API Settings page and create a new API token for your account. Make a note of both the token value and the username associated with the token. If the username is blank immediately following the token creation, try refreshing the page.","title":"Setup"},{"location":"Plugins/NameCom/#using-the-plugin","text":"The username is used with the NameComUsername parameter and the token is used with the NameComTokenSecure SecureString parameter. If you are using name.com's API testing environment, you'll also need to include NameComUseTestEnv=$true in your plugin arguments. Warning The NameComeToken parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pargs = @{ NameComUsername = 'username' NameComTokenSecure = ( Read-Host 'Token' -AsSecureString ) } New-PACertificate example . com -Plugin NameCom -PluginArgs $pargs","title":"Using the Plugin"},{"location":"Plugins/NameSilo/","text":"How To Use the NameSilo DNS Plugin \u00b6 This plugin works against the NameSilo domain registrar. It is assumed that you have already setup an account and created the DNS zone(s) you will be working against. Setup \u00b6 For authentication against the NameSilo API, an API key is required. Open the api manager page to generate the key. Read the note and understand that you can only retrieve the generated key once. If you have previously generated a key, use that one, otherwise by generating a new key you will invalidate the old key. Accept the API terms of use and click generate. Save the generated key in a secure location. Using the Plugin \u00b6 The API key is used with the NameSiloKey SecureString parameter. NameSilo only updates DNS records every 15 minutes. So you should also provide a -DnsSleep parameter of 900 or more. Warning The NameSiloKeyInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ NameSiloKey = ( Read-Host \"NameSilo Key\" -AsSecureString ) } New-PACertificate example . com -Plugin NameSilo -PluginArgs $pArgs -DnsSleep 900","title":"NameSilo"},{"location":"Plugins/NameSilo/#how-to-use-the-namesilo-dns-plugin","text":"This plugin works against the NameSilo domain registrar. It is assumed that you have already setup an account and created the DNS zone(s) you will be working against.","title":"How To Use the NameSilo DNS Plugin"},{"location":"Plugins/NameSilo/#setup","text":"For authentication against the NameSilo API, an API key is required. Open the api manager page to generate the key. Read the note and understand that you can only retrieve the generated key once. If you have previously generated a key, use that one, otherwise by generating a new key you will invalidate the old key. Accept the API terms of use and click generate. Save the generated key in a secure location.","title":"Setup"},{"location":"Plugins/NameSilo/#using-the-plugin","text":"The API key is used with the NameSiloKey SecureString parameter. NameSilo only updates DNS records every 15 minutes. So you should also provide a -DnsSleep parameter of 900 or more. Warning The NameSiloKeyInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ NameSiloKey = ( Read-Host \"NameSilo Key\" -AsSecureString ) } New-PACertificate example . com -Plugin NameSilo -PluginArgs $pArgs -DnsSleep 900","title":"Using the Plugin"},{"location":"Plugins/Namecheap/","text":"How To Use the Namecheap DNS Plugin \u00b6 This plugin works against the Namecheap FreeDNS provider. It is assumed that you have already setup an account and registered the domains you will be working against. The domains must not be using custom DNS servers. Setup \u00b6 First, login to your account and go to the Profile - Tools page. In the \"Business & Dev Tools\" section, API Access must be turned on. Namecheap seems to require a certain amount of activity (registered domains or money spent) in order to enable API Access. Turning it on requires Namecheap support to authorize and actually enable which can take a couple days. Once API Access is turned on, click the Manage button and record your API Key value and your Namecheap username. You will also need to whitelist the public IP address of each machine you will be running Posh-ACME from. whatsmyip.com can help here if you're behind a NAT router. Using the Plugin \u00b6 The username is used with the NCUsername parameter and the API key is used with the NCApiKey SecureString parameter. Warning The NCApiKeyInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ NCUsername = 'myusername' NCApiKey = ( Read-Host 'API Key' -AsSecureString ) } New-PACertificate example . com -Plugin Namecheap -PluginArgs $pArgs","title":"Namecheap"},{"location":"Plugins/Namecheap/#how-to-use-the-namecheap-dns-plugin","text":"This plugin works against the Namecheap FreeDNS provider. It is assumed that you have already setup an account and registered the domains you will be working against. The domains must not be using custom DNS servers.","title":"How To Use the Namecheap DNS Plugin"},{"location":"Plugins/Namecheap/#setup","text":"First, login to your account and go to the Profile - Tools page. In the \"Business & Dev Tools\" section, API Access must be turned on. Namecheap seems to require a certain amount of activity (registered domains or money spent) in order to enable API Access. Turning it on requires Namecheap support to authorize and actually enable which can take a couple days. Once API Access is turned on, click the Manage button and record your API Key value and your Namecheap username. You will also need to whitelist the public IP address of each machine you will be running Posh-ACME from. whatsmyip.com can help here if you're behind a NAT router.","title":"Setup"},{"location":"Plugins/Namecheap/#using-the-plugin","text":"The username is used with the NCUsername parameter and the API key is used with the NCApiKey SecureString parameter. Warning The NCApiKeyInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ NCUsername = 'myusername' NCApiKey = ( Read-Host 'API Key' -AsSecureString ) } New-PACertificate example . com -Plugin Namecheap -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/OVH/","text":"How To Use the OVH DNS Plugin \u00b6 This plugin works against the OVH DNS provider. It is assumed that you have already setup an account and created the domain(s) you will be working against. Setup \u00b6 OVH has a variety of supported regions each with their own API endpoint and sets of credentials. In order to set things up properly, you must know which region your account is in. The table below lists the available regions, the region code, and a link to create an Application Credential. Region Code API App Creation OVH Europe ovh-eu Create App OVH US ovh-us Create App OVH North-America ovh-ca Create App So you Start Europe soyoustart-eu Create App So you Start North America soyoustart-ca Create App Kimsufi Europe kimsufi-eu Create App Kimsufi North America kimsufi-ca Create App RunAbove runabove-ca Create App Create Application Credentials \u00b6 Select the region that matches your account and use the appropriate \"Create App\" link to create an application credential for your account. Set the App Name and Description to whatever you want and click Create Keys . You will be presented with an Application Key and Application Secret which you should save for later. Generate Consumer Key \u00b6 Now we need to generate a Consumer Key for these App credentials that is associated with a set of permissions on your account. There are generally three different ways to configure permissions for the Consumer Key. Write access to all DNS zones on your account. This is useful if you want a single instance of Posh-ACME to be able to generate certs for any name in any domain you might host on OVH. Write access to only a specific set of DNS zones on your account. This lets you keep some zones inaccessible, but still lets you generate certs for any name within allowed set of domains. Write access only to specific pre-created TXT records. This is the most complicated to setup, but also provides the least risk in case the key is compromised. There is a helper function built-into the plugin file that can make setting up these permissions easier. In order to use it, run the following to add the function to your current PowerShell session. Then follow the instructions in the next section for the option you will be using. Import-Module Posh-ACME . ( Join-Path ( Get-Module Posh-ACME ). ModuleBase \"Plugins\\OVH.ps1\" ) Write to All Zones \u00b6 Using the appropriate region code from the table above and the Application Key you previously created, run the following PowerShell and follow the instructions it gives. It will generate a URL you must open in a browser, verify the requested permissions, set the Validity to \"Unlimited\" , and click Log In . Invoke-OVHSetup -AppKey 'xxxxxxxxxxxx' -OVHRegion 'ovh-eu' Write to Specific Zones \u00b6 Define the set of zones you wish to grant access to. $zones = 'example.com' , 'example.net' , 'example.org' Using the appropriate region code from the table above and the Application Key you previously created, run the following PowerShell and follow the instructions it gives. It will generate a URL you must open in a browser, verify the requested permissions, set the Validity to \"Unlimited\" , and click Log In . Invoke-OVHSetup -AppKey 'xxxxxxxxxxxx' -OVHRegion 'ovh-eu' -Zone $zones Write to Specific Records \u00b6 In order to use this method, you have to pre-create every TXT record the ACME server is going to need in order to validate the names in the certs you will be requesting. For non-wildcard names, prepend _acme-challenge. to the name. For wildcard names, replace the * with _acme-challenge . For a cert that contains example.com , www.example.com , and support.example.com , you would need to create the following three records. Sub-domain: _acme-challenge .example.com Sub-domain: _acme-challenge.www .example.com Sub-domain: _acme-challenge.support .example.com For a typical wildcard cert that contains example.com and *.example.com , you would need to create two copies of the same record. Sub-domain: _acme-challenge .example.com Sub-domain: _acme-challenge .example.com Once your records are created, you need to identify the record ID for each one. Unfortunately, we haven't found an easy way to find these from OVH's web based DNS editor. The closest alternative is the API Console . Login and expand the GET /domain/zone/{zoneName}/record entry. Add the appropriate record details to lookup and press Execute . The result should be one or more record ID numbers. Using the record ID(s) and associated zone name(s), create an array of permission objects. It should contain a GET /domain/zone/<zone name>/record* and POST /domain/zone/<zone name>/refresh entry for each domain plus a PUT /domain/zone/<zone name>/record/<id> entry for each record. So the typical wildcard cert example might look like this: $rules = @( @{ method = 'GET' ; path = '/domain/zone/example.com/record*' } @{ method = 'POST' ; path = '/domain/zone/example.com/refresh' } @{ method = 'PUT' ; path = '/domain/zone/example.com/record/1111111111' } @{ method = 'PUT' ; path = '/domain/zone/example.com/record/2222222222' } ) Using the appropriate region code from the table above and the Application Key you previously created, run the following PowerShell and follow the instructions it gives. It will generate a URL you must open in a browser, verify the requested permissions, set the Validity to \"Unlimited\" , and click Log In . Invoke-OVHSetup -AppKey 'xxxxxxxxxxxx' -OVHRegion 'ovh-eu' -AccessRules $rules Save the Resulting Consumer Key \u00b6 After logging in successfully, you should be redirected to a success page on the Posh-ACME wiki. Press Enter in the PowerShell Window to be presented with your Consumer Key value which you should save for later. Using the Plugin \u00b6 The App Key value will be used with the OVHAppKey parameter. The App Secret and Consumer Key values will be used with the OVHAppSecret and OVHConsumerKey SecureString parameters. Warning The OVHAppSecretInsecure and OVHConsumerKeyInsecure parameters are deprecated and will be removed in the next major module version. If you are using them, please migrate to the Secure parameter set. Warning If the permissions on your consumer key only allow write access to specific records, you must add OVHUseModify = $true to your plugin arguments. This instructs the plugin to modify existing records instead of trying to create new ones from scratch which will fail. $pArgs = @{ OVHAppKey = 'xxxxxxxxxxx' OVHAppSecret = ( Read-Host -Prompt \"App Secret\" -AsSecureString ) OVHConsumerKey = ( Read-Host -Prompt \"Consumer Key\" -AsSecureString ) OVHRegion = 'ovh-eu' } New-PACertificate example . com -Plugin OVH -PluginArgs $pArgs","title":"OVH"},{"location":"Plugins/OVH/#how-to-use-the-ovh-dns-plugin","text":"This plugin works against the OVH DNS provider. It is assumed that you have already setup an account and created the domain(s) you will be working against.","title":"How To Use the OVH DNS Plugin"},{"location":"Plugins/OVH/#setup","text":"OVH has a variety of supported regions each with their own API endpoint and sets of credentials. In order to set things up properly, you must know which region your account is in. The table below lists the available regions, the region code, and a link to create an Application Credential. Region Code API App Creation OVH Europe ovh-eu Create App OVH US ovh-us Create App OVH North-America ovh-ca Create App So you Start Europe soyoustart-eu Create App So you Start North America soyoustart-ca Create App Kimsufi Europe kimsufi-eu Create App Kimsufi North America kimsufi-ca Create App RunAbove runabove-ca Create App","title":"Setup"},{"location":"Plugins/OVH/#create-application-credentials","text":"Select the region that matches your account and use the appropriate \"Create App\" link to create an application credential for your account. Set the App Name and Description to whatever you want and click Create Keys . You will be presented with an Application Key and Application Secret which you should save for later.","title":"Create Application Credentials"},{"location":"Plugins/OVH/#generate-consumer-key","text":"Now we need to generate a Consumer Key for these App credentials that is associated with a set of permissions on your account. There are generally three different ways to configure permissions for the Consumer Key. Write access to all DNS zones on your account. This is useful if you want a single instance of Posh-ACME to be able to generate certs for any name in any domain you might host on OVH. Write access to only a specific set of DNS zones on your account. This lets you keep some zones inaccessible, but still lets you generate certs for any name within allowed set of domains. Write access only to specific pre-created TXT records. This is the most complicated to setup, but also provides the least risk in case the key is compromised. There is a helper function built-into the plugin file that can make setting up these permissions easier. In order to use it, run the following to add the function to your current PowerShell session. Then follow the instructions in the next section for the option you will be using. Import-Module Posh-ACME . ( Join-Path ( Get-Module Posh-ACME ). ModuleBase \"Plugins\\OVH.ps1\" )","title":"Generate Consumer Key"},{"location":"Plugins/OVH/#write-to-all-zones","text":"Using the appropriate region code from the table above and the Application Key you previously created, run the following PowerShell and follow the instructions it gives. It will generate a URL you must open in a browser, verify the requested permissions, set the Validity to \"Unlimited\" , and click Log In . Invoke-OVHSetup -AppKey 'xxxxxxxxxxxx' -OVHRegion 'ovh-eu'","title":"Write to All Zones"},{"location":"Plugins/OVH/#write-to-specific-zones","text":"Define the set of zones you wish to grant access to. $zones = 'example.com' , 'example.net' , 'example.org' Using the appropriate region code from the table above and the Application Key you previously created, run the following PowerShell and follow the instructions it gives. It will generate a URL you must open in a browser, verify the requested permissions, set the Validity to \"Unlimited\" , and click Log In . Invoke-OVHSetup -AppKey 'xxxxxxxxxxxx' -OVHRegion 'ovh-eu' -Zone $zones","title":"Write to Specific Zones"},{"location":"Plugins/OVH/#write-to-specific-records","text":"In order to use this method, you have to pre-create every TXT record the ACME server is going to need in order to validate the names in the certs you will be requesting. For non-wildcard names, prepend _acme-challenge. to the name. For wildcard names, replace the * with _acme-challenge . For a cert that contains example.com , www.example.com , and support.example.com , you would need to create the following three records. Sub-domain: _acme-challenge .example.com Sub-domain: _acme-challenge.www .example.com Sub-domain: _acme-challenge.support .example.com For a typical wildcard cert that contains example.com and *.example.com , you would need to create two copies of the same record. Sub-domain: _acme-challenge .example.com Sub-domain: _acme-challenge .example.com Once your records are created, you need to identify the record ID for each one. Unfortunately, we haven't found an easy way to find these from OVH's web based DNS editor. The closest alternative is the API Console . Login and expand the GET /domain/zone/{zoneName}/record entry. Add the appropriate record details to lookup and press Execute . The result should be one or more record ID numbers. Using the record ID(s) and associated zone name(s), create an array of permission objects. It should contain a GET /domain/zone/<zone name>/record* and POST /domain/zone/<zone name>/refresh entry for each domain plus a PUT /domain/zone/<zone name>/record/<id> entry for each record. So the typical wildcard cert example might look like this: $rules = @( @{ method = 'GET' ; path = '/domain/zone/example.com/record*' } @{ method = 'POST' ; path = '/domain/zone/example.com/refresh' } @{ method = 'PUT' ; path = '/domain/zone/example.com/record/1111111111' } @{ method = 'PUT' ; path = '/domain/zone/example.com/record/2222222222' } ) Using the appropriate region code from the table above and the Application Key you previously created, run the following PowerShell and follow the instructions it gives. It will generate a URL you must open in a browser, verify the requested permissions, set the Validity to \"Unlimited\" , and click Log In . Invoke-OVHSetup -AppKey 'xxxxxxxxxxxx' -OVHRegion 'ovh-eu' -AccessRules $rules","title":"Write to Specific Records"},{"location":"Plugins/OVH/#save-the-resulting-consumer-key","text":"After logging in successfully, you should be redirected to a success page on the Posh-ACME wiki. Press Enter in the PowerShell Window to be presented with your Consumer Key value which you should save for later.","title":"Save the Resulting Consumer Key"},{"location":"Plugins/OVH/#using-the-plugin","text":"The App Key value will be used with the OVHAppKey parameter. The App Secret and Consumer Key values will be used with the OVHAppSecret and OVHConsumerKey SecureString parameters. Warning The OVHAppSecretInsecure and OVHConsumerKeyInsecure parameters are deprecated and will be removed in the next major module version. If you are using them, please migrate to the Secure parameter set. Warning If the permissions on your consumer key only allow write access to specific records, you must add OVHUseModify = $true to your plugin arguments. This instructs the plugin to modify existing records instead of trying to create new ones from scratch which will fail. $pArgs = @{ OVHAppKey = 'xxxxxxxxxxx' OVHAppSecret = ( Read-Host -Prompt \"App Secret\" -AsSecureString ) OVHConsumerKey = ( Read-Host -Prompt \"Consumer Key\" -AsSecureString ) OVHRegion = 'ovh-eu' } New-PACertificate example . com -Plugin OVH -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/Plugin-Development-Guide/","text":"Plugin Development Guide \u00b6 Introduction \u00b6 A validation plugin for Posh-ACME is a standard PowerShell PS1 script file located in the module's Plugins folder. It can also be in a folder outside the module and referenced using the POSHACME_PLUGINS environment variable. The file name is what users will use to reference it when specifying a plugin, so it should be related to the provider it is publishing against. All plugins must contain a function called Get-CurrentPluginType which returns a string indicating the type of ACME challenge they support. Posh-ACME currently supports the dns-01 and http-01 challenge types. DNS plugins must contain the following additional functions: Add-DnsTxt Remove-DnsTxt Save-DnsTxt HTTP plugins must contain the following additional functions: Add-HttpChallenge Remove-HttpChallenge Save-HttpChallenge The easiest way to get started is to make a copy of _Example-DNS.ps1 or _Example-HTTP.ps1 depending on the type of plugin you are making and rename it for your purposes. Pull Requests for new plugins are quite welcome. Function Details \u00b6 Add-DnsTxt and Remove-DnsTxt \u00b6 These are responsible for adding/removing TXT records to/from a DNS server/provider. There are two mandatory and positional string parameters, $RecordName and $TxtValue . RecordName is the fully qualified domain name (FQDN) of the record we will be adding a TXT value for. TxtValue is the actual value that will be set in the TXT record. Do not modify or remove these first two parameters. Additional parameters should be added as necessary for the specific DNS provider such as credentials or API keys. In addition to standard PowerShell naming standards, their names must also not conflict with any other plugin's parameters. A good way to do that is to use a unique prefix on all of the parameters. It doesn't have to match the plugin name exactly as long as it's unique and reasonably related to the plugin. Common parameters that can be shared between this plugin's functions should be named the same as each other. The last parameter should always be $ExtraParams with the ValueFromRemainingArguments parameter attribute. This allows callers to splat the combined collection of plugin parameters to each plugin without errors for parameters that don't exist. Many DNS providers will only need the Add and Remove functions. In those cases, remember to remove all but the $ExtraParams parameter in the Save function and just leave the function body empty. For other providers, it is may be more efficient to stage changes in bulk and then perform what is effectively a Save or Commit operation on those changes. In those cases, implement the Save function as described below. Add-HttpChallenge and Remove-HttpChallenge \u00b6 These are responsible for publishing/unpublishing the ACME challenge body text at a specific HTTP URL. There are three mandatory and positional string parameters, $Domain , $Token , and $Body . Domain and Token are what the validation server will use to build the URL it will check against ( http://<Domain>/.well-known/acme-challenge/<Token> ). Body is the text value it expects to get in response to that query. Do not modify or remove these first three parameters. Additional parameters should be added as necessary for the specific HTTP provider such as filesystem paths, credentials, or API keys. In addition to standard PowerShell naming standards, their names must also not conflict with any other plugin's parameters. A good way to do that is to use a unique prefix on all of the parameters. It doesn't have to match the plugin name exactly as long as it's unique and reasonably related to the plugin. Common parameters that can be shared between this plugin's functions should be named the same as each other. The last parameter should always be $ExtraParams with the ValueFromRemainingArguments parameter attribute. This allows callers to splat the combined collection of plugin parameters to each plugin without errors for parameters that don't exist. Many HTTP providers will only need the Add and Remove functions. In those cases, remember to remove all but the $ExtraParams parameter in the Save function and just leave the function body empty. For other providers, it is may be more efficient to stage changes in bulk and then perform what is effectively a Save or Commit operation on those changes. In those cases, implement the Save function as described below. Save-DnsTxt and Save-HttpChallenge \u00b6 These functions are optional for DNS/HTTP plugins where it is more efficient to stage changes in bulk before Saving or Committing the changes. There are no required parameters except $ExtraParams which should always be last and have the ValueFromRemainingArguments parameter attribute. Parameter Types \u00b6 Try to limit parameters to simple data types like [string] , [int] , and [switch] . Arrays and Hashtables are fine as long as the contents are also simple types. Hashtables in particular should not be nested. The parameters should be able to convert nicely back and forth using Convert-ToJson and Convert-FromJson . Secrets such as passwords and API keys/tokens should use [SecureString] or [PSCredential] parameters even if you ultimately need them in plain text within the plugin. This ensures the values are encrypted when saved to disk for later renewals. Here are some examples for how to convert them back to plain text in the plugin code. # get the username and password from a PSCredential called $cred $username = $cred . Username $password = $cred . GetNetworkCredential (). Password # get the plain text from a SecureString called $secString $plainText = [pscredential] :: new ( 'a' , $secString ). GetNetworkCredential (). Password Usage Guides \u00b6 In addition to the native function help, it can be very helpful to new users to have a plugin specific readme. It should be a Markdown formatted file in the docs/Plugins folder called <PluginName>.md . It's usually easiest to copy an existing guide and modify it. The title: field at the top of the file should match the name of the plugin including capitalization. Note You may notice there are some Markdown files for other plugins in the main Plugins folder called <PluginName>-Readme.md . These exist for legacy reasons before the docs website was around and are not necessary for new plugins. For people who may be setting up automation against their provider for the first time, it can be helpful to add guidance on creating service accounts, limited access roles, or any prerequisite setup that the plugin requires to work properly. It should also have a section with an example on how to use the plugin with New-PACertificate . General Development Tips and Tricks \u00b6 No Write-Host \u00b6 Unless your plugin requires interactive user input which should be rare, do not use Write-Host to display informational messages or debug output. Use Write-Verbose for messages you would want a potential user to see. Use Write-Debug for things only the plugin developer would likely care about or a user trying to troubleshoot a plugin that is not working. When testing your module, use -Verbose to see your verbose messages. And run $DebugPreference = 'Continue' to make the debug messages show up without prompting for confirmation (which happens if you use -Debug ) . No Pipeline Output \u00b6 Do not output any objects to the pipeline from your plugin. This will interfere with scripts and workflows that use the normal output of public functions. You can use Out-Null on internal calls that would normally output to the pipeline when you don't care about that data. UseBasicParsing \u00b6 Any time you call Invoke-WebRequest or Invoke-RestMethod , you should always add @script:UseBasic to the end. By default in PowerShell 5.1, those two functions use Internet Explorer's DOM parser to process the response body which can cause errors in cases where IE is not installed or hasn't gone through its first-run sequence yet. Both functions have a -UseBasicParsing parameter that switches the parser to a PowerShell native parser and is the new default functionality in PowerShell 6+. The parameter is also deprecated because they don't plan on bringing back IE DOM parsing in future PowerShell versions. So the module creates a variable when it is first loaded that checks whether -UseBasicParsing is still available or not and adds it to the $script:UseBasic hashtable. That way, you can just splat it on all your calls to those two functions which will future proof your plugin. Testing Plugins \u00b6 If the module is already loaded in the session, you will need to re-import it using Import-Module -Force . There is a helper script called instdev.ps1 in the root of the git repository that can make this process a lot easier as you are developing the plugin. First make sure any existing copies of the module are uninstalled (or at least don't reside in your $env:PSModulePath ). Clone the git repository (or your fork) to a folder on your local system and add your plugin file to the Posh-Acme\\Plugins folder if it's not already there. Open a new PowerShell session to the repository root folder and run .\\instdev.ps1 which will do the following: Copy the module files to the current user's default PowerShell modules folder. Run Import-Module Posh-ACME -Force Display the available module commands If there are no problems, your plugin should now be listed in the output of Get-PAPlugin . Testing a plugin can be done without requesting a new certificate. All you need is an existing ACME account created with New-PAAccount and the Publish-Challenge , Unpublish-Challenge , and Save-Challenge functions. They call the Add, Remove, and Save functions from the plugin. Here are some examples of how I generally call them while testing. $DebugPreference = 'Continue' $pArgs = @{ MyParam1 = 'asdf' ; MyParam2 = 'qwer' } # multiple calls to publish/unpublish are generally more useful for DNS plugins Publish-Challenge example . com ( Get-PAAccount ) test1 MyPlugin $pArgs -Verbose Publish-Challenge example . com ( Get-PAAccount ) test2 MyPlugin $pArgs -Verbose Publish-Challenge example . com ( Get-PAAccount ) test3 MyPlugin $pArgs -Verbose # save is only necessary if your plugin implements it Save-Challenge MyPlugin $pArgs -Verbose Unpublish-Challenge example . com ( Get-PAAccount ) test1 MyPlugin $pArgs -Verbose Unpublish-Challenge example . com ( Get-PAAccount ) test2 MyPlugin $pArgs -Verbose Unpublish-Challenge example . com ( Get-PAAccount ) test3 MyPlugin $pArgs -Verbose # save is only necessary if your plugin implements it Save-Challenge MyPlugin $pArgs -Verbose Alternatively, you can dot source the plugin file and call the functions directly. But this can be difficult if the functions depend on module-scoped variables like $script:UseBasic or internal module functions. Also, remember to dot source again each time you make a change to the plugin. DNS Specific Tips and Tricks \u00b6 Multiple TXT Values Per Record \u00b6 It is both supported and expected that a given TXT record may have multiple values. It's most common with wildcard certificates that contain both the wildcard name ( *.example.com ) and the root domain ( example.com ). Both names require TXT records be added for the same FQDN ( _acme-challenge.example.com ). This can also happen if the user is using CNAME challenge aliases. The Add/Remove functions need to support all potential states of the particular TXT record. But how the record is represented by a given provider seems to vary. Some represent it as a single record with multiple values that you need to add to or remove from. Others have distinct records for each value that can be created/deleted individually. So make sure you can both create a new record that doesn't exist and add a value to a record that already does. Remove Only Specific TxtValue \u00b6 Related to having multiple TXT values per record, the remove function must not blindly delete any record that matches $RecordName . It should be able to remove only the $TxtValue on a record that may have multiple values. But if the record only contains a single value, the record should be deleted entirely. Zone Matching \u00b6 A particular DNS provider may be hosting both domain apex zones ( example.com ) and sub-zones ( sub1.example.com ). One of the first things a plugin usually has to do is figure out which zone $RecordName needs to be added to. This should be the deepest sub-zone that would still contain $RecordName . Here are some examples assuming only the two previously mentioned zones exist. $RecordName Matching Zone _acme-challenge.example.com example.com _acme-challenge.site1.example.com example.com _acme-challenge.sub1.example.com sub1.example.com _acme-challenge.site1.sub1.example.com sub1.example.com _acme-challenge.site1.sub3.sub2.sub1.example.com sub1.example.com Many of the existing plugins have a helper function to handle this. Copy and modify their code where it makes sense but make sure helper function names are unique. Relative Record Names \u00b6 Many providers will end up needing you to provide a record's relative/short name such as _acme-challenge or _acme-challenge.www rather than the fully-qualified domain provided by $RecordName . To do this properly, you must first know the zone name that would contain the record. Once you have it, use the following method to separate the relative name from the zone name. # assumes $zoneName contains the zone name containing the record $recShort = ( $RecordName -ireplace [regex] :: Escape ( $zoneName ), [string] :: Empty ). TrimEnd ( '.' ) Keep in mind that there are cases where $RecordName and $zoneName can be identical. The code above will set $recShort to an empty string. Depending on the provider, this may not be the proper way to reference zone apex records. Some providers expect you to use @ , others may want the full zone name like example.com . So if your provider expects something other than an empty string, make sure you account for it. Here's an example: if ( $recShort -eq [string] :: Empty ) { $recShort = '@' } DNS Aliases and Domain Apex \u00b6 Don't forget to test your functions against the domain apex which can happen when users are using DNS challenge aliases. # The my.cname.tld record doesn't actually need to exist for the test to work. # The plugin will only be writing to example.com $publishParams = @{ Domain = 'my.cname.tld' Account = ( Get-PAAccount ) Token = 'fake-token' Plugin = 'MyPlugin' PluginArgs = $pArgs DnsAlias = 'example.com' Verbose = $true } Publish-Challenge @publishParams Unpublish-Challenge @publishParams Deriving Object IDs \u00b6 Many providers assign ID values to object types like zones and records that you need to use to manipulate those objects. A user should ideally not have to know or provide any zone, record, or object IDs in order to use the plugin. All of that should be discovered by the plugin code and the only thing the user should need to provide is whatever credentials or tokens the API requires for authentication. In the rare cases that you do need the user to provide something like a zone ID, make sure you allow for multiple values. A single certificate can contain names from many different zones and the plugin parameters that get passed to the plugin are the same for each TXT record that needs to be created. Trailing Dots \u00b6 Be aware how your particular DNS provider represents zone and record names. Some include the trailing dot ( example.com. ). Others don't. This can affect string matching when finding zones and existing records. Internationalized Domain Name (IDN) \u00b6 Many DNS providers and registrars support IDN domains which contain non-ascii unicode characters (or even emojis). When using IDN domains with ACME, the IDN names must be specified as Punycode . But the DNS providers may still send or receive the unicode version of the name. Particularly if your provider is not US-based, be aware of and try to account for how the provider handles IDN names. The .NET System.Globalization.IdnMapping class can help convert back and for between IDN and punycode names like this: # create an instance of the class $idn = [System.Globalization.IdnMapping] :: new () # convert an IDN name to punycode $idn . GetAscii ( 'b\u00fccher.example' ) # convert a punycode name back to IDN $idn . GetUnicode ( 'xn--bcher-kva.example' ) HTTP Specific Tips and Tricks \u00b6 Validation Timing \u00b6 When DNS plugins are used, there's a user customizable sleep timer between when the TXT records are published and the module asks the ACME server to validate those records because records are not typically available instantaneously worldwide. However, that sleep timer does not exist when an order is only using HTTP plugins because HTTP resources are typically available instantly. If your particular HTTP provider requires a delay between when the challenges are published and when they are validated, you should add that delay in the Save-HttpChallenge function of your plugin. Migrating DNS Plugins from 3.x to 4.x \u00b6 In case you have been using your own private DNS plugin in 3.x, here's how to migrate it to the 4.x format. Add function Get-CurrentPluginType { 'dns-01' } to the top of the file. Replace instances of Add-DnsTxt<Name> with Add-DnsTxt Replace instances of Remove-DnsTxt<Name> with Remove-DnsTxt Replace instances of Save-DnsTxt<Name> with Save-DnsTxt Replace instances of -DnsPlugin with -Plugin in usage guides.","title":"Plugin Development Guide"},{"location":"Plugins/Plugin-Development-Guide/#plugin-development-guide","text":"","title":"Plugin Development Guide"},{"location":"Plugins/Plugin-Development-Guide/#introduction","text":"A validation plugin for Posh-ACME is a standard PowerShell PS1 script file located in the module's Plugins folder. It can also be in a folder outside the module and referenced using the POSHACME_PLUGINS environment variable. The file name is what users will use to reference it when specifying a plugin, so it should be related to the provider it is publishing against. All plugins must contain a function called Get-CurrentPluginType which returns a string indicating the type of ACME challenge they support. Posh-ACME currently supports the dns-01 and http-01 challenge types. DNS plugins must contain the following additional functions: Add-DnsTxt Remove-DnsTxt Save-DnsTxt HTTP plugins must contain the following additional functions: Add-HttpChallenge Remove-HttpChallenge Save-HttpChallenge The easiest way to get started is to make a copy of _Example-DNS.ps1 or _Example-HTTP.ps1 depending on the type of plugin you are making and rename it for your purposes. Pull Requests for new plugins are quite welcome.","title":"Introduction"},{"location":"Plugins/Plugin-Development-Guide/#function-details","text":"","title":"Function Details"},{"location":"Plugins/Plugin-Development-Guide/#add-dnstxt-and-remove-dnstxt","text":"These are responsible for adding/removing TXT records to/from a DNS server/provider. There are two mandatory and positional string parameters, $RecordName and $TxtValue . RecordName is the fully qualified domain name (FQDN) of the record we will be adding a TXT value for. TxtValue is the actual value that will be set in the TXT record. Do not modify or remove these first two parameters. Additional parameters should be added as necessary for the specific DNS provider such as credentials or API keys. In addition to standard PowerShell naming standards, their names must also not conflict with any other plugin's parameters. A good way to do that is to use a unique prefix on all of the parameters. It doesn't have to match the plugin name exactly as long as it's unique and reasonably related to the plugin. Common parameters that can be shared between this plugin's functions should be named the same as each other. The last parameter should always be $ExtraParams with the ValueFromRemainingArguments parameter attribute. This allows callers to splat the combined collection of plugin parameters to each plugin without errors for parameters that don't exist. Many DNS providers will only need the Add and Remove functions. In those cases, remember to remove all but the $ExtraParams parameter in the Save function and just leave the function body empty. For other providers, it is may be more efficient to stage changes in bulk and then perform what is effectively a Save or Commit operation on those changes. In those cases, implement the Save function as described below.","title":"Add-DnsTxt and Remove-DnsTxt"},{"location":"Plugins/Plugin-Development-Guide/#add-httpchallenge-and-remove-httpchallenge","text":"These are responsible for publishing/unpublishing the ACME challenge body text at a specific HTTP URL. There are three mandatory and positional string parameters, $Domain , $Token , and $Body . Domain and Token are what the validation server will use to build the URL it will check against ( http://<Domain>/.well-known/acme-challenge/<Token> ). Body is the text value it expects to get in response to that query. Do not modify or remove these first three parameters. Additional parameters should be added as necessary for the specific HTTP provider such as filesystem paths, credentials, or API keys. In addition to standard PowerShell naming standards, their names must also not conflict with any other plugin's parameters. A good way to do that is to use a unique prefix on all of the parameters. It doesn't have to match the plugin name exactly as long as it's unique and reasonably related to the plugin. Common parameters that can be shared between this plugin's functions should be named the same as each other. The last parameter should always be $ExtraParams with the ValueFromRemainingArguments parameter attribute. This allows callers to splat the combined collection of plugin parameters to each plugin without errors for parameters that don't exist. Many HTTP providers will only need the Add and Remove functions. In those cases, remember to remove all but the $ExtraParams parameter in the Save function and just leave the function body empty. For other providers, it is may be more efficient to stage changes in bulk and then perform what is effectively a Save or Commit operation on those changes. In those cases, implement the Save function as described below.","title":"Add-HttpChallenge and Remove-HttpChallenge"},{"location":"Plugins/Plugin-Development-Guide/#save-dnstxt-and-save-httpchallenge","text":"These functions are optional for DNS/HTTP plugins where it is more efficient to stage changes in bulk before Saving or Committing the changes. There are no required parameters except $ExtraParams which should always be last and have the ValueFromRemainingArguments parameter attribute.","title":"Save-DnsTxt and Save-HttpChallenge"},{"location":"Plugins/Plugin-Development-Guide/#parameter-types","text":"Try to limit parameters to simple data types like [string] , [int] , and [switch] . Arrays and Hashtables are fine as long as the contents are also simple types. Hashtables in particular should not be nested. The parameters should be able to convert nicely back and forth using Convert-ToJson and Convert-FromJson . Secrets such as passwords and API keys/tokens should use [SecureString] or [PSCredential] parameters even if you ultimately need them in plain text within the plugin. This ensures the values are encrypted when saved to disk for later renewals. Here are some examples for how to convert them back to plain text in the plugin code. # get the username and password from a PSCredential called $cred $username = $cred . Username $password = $cred . GetNetworkCredential (). Password # get the plain text from a SecureString called $secString $plainText = [pscredential] :: new ( 'a' , $secString ). GetNetworkCredential (). Password","title":"Parameter Types"},{"location":"Plugins/Plugin-Development-Guide/#usage-guides","text":"In addition to the native function help, it can be very helpful to new users to have a plugin specific readme. It should be a Markdown formatted file in the docs/Plugins folder called <PluginName>.md . It's usually easiest to copy an existing guide and modify it. The title: field at the top of the file should match the name of the plugin including capitalization. Note You may notice there are some Markdown files for other plugins in the main Plugins folder called <PluginName>-Readme.md . These exist for legacy reasons before the docs website was around and are not necessary for new plugins. For people who may be setting up automation against their provider for the first time, it can be helpful to add guidance on creating service accounts, limited access roles, or any prerequisite setup that the plugin requires to work properly. It should also have a section with an example on how to use the plugin with New-PACertificate .","title":"Usage Guides"},{"location":"Plugins/Plugin-Development-Guide/#general-development-tips-and-tricks","text":"","title":"General Development Tips and Tricks"},{"location":"Plugins/Plugin-Development-Guide/#no-write-host","text":"Unless your plugin requires interactive user input which should be rare, do not use Write-Host to display informational messages or debug output. Use Write-Verbose for messages you would want a potential user to see. Use Write-Debug for things only the plugin developer would likely care about or a user trying to troubleshoot a plugin that is not working. When testing your module, use -Verbose to see your verbose messages. And run $DebugPreference = 'Continue' to make the debug messages show up without prompting for confirmation (which happens if you use -Debug ) .","title":"No Write-Host"},{"location":"Plugins/Plugin-Development-Guide/#no-pipeline-output","text":"Do not output any objects to the pipeline from your plugin. This will interfere with scripts and workflows that use the normal output of public functions. You can use Out-Null on internal calls that would normally output to the pipeline when you don't care about that data.","title":"No Pipeline Output"},{"location":"Plugins/Plugin-Development-Guide/#usebasicparsing","text":"Any time you call Invoke-WebRequest or Invoke-RestMethod , you should always add @script:UseBasic to the end. By default in PowerShell 5.1, those two functions use Internet Explorer's DOM parser to process the response body which can cause errors in cases where IE is not installed or hasn't gone through its first-run sequence yet. Both functions have a -UseBasicParsing parameter that switches the parser to a PowerShell native parser and is the new default functionality in PowerShell 6+. The parameter is also deprecated because they don't plan on bringing back IE DOM parsing in future PowerShell versions. So the module creates a variable when it is first loaded that checks whether -UseBasicParsing is still available or not and adds it to the $script:UseBasic hashtable. That way, you can just splat it on all your calls to those two functions which will future proof your plugin.","title":"UseBasicParsing"},{"location":"Plugins/Plugin-Development-Guide/#testing-plugins","text":"If the module is already loaded in the session, you will need to re-import it using Import-Module -Force . There is a helper script called instdev.ps1 in the root of the git repository that can make this process a lot easier as you are developing the plugin. First make sure any existing copies of the module are uninstalled (or at least don't reside in your $env:PSModulePath ). Clone the git repository (or your fork) to a folder on your local system and add your plugin file to the Posh-Acme\\Plugins folder if it's not already there. Open a new PowerShell session to the repository root folder and run .\\instdev.ps1 which will do the following: Copy the module files to the current user's default PowerShell modules folder. Run Import-Module Posh-ACME -Force Display the available module commands If there are no problems, your plugin should now be listed in the output of Get-PAPlugin . Testing a plugin can be done without requesting a new certificate. All you need is an existing ACME account created with New-PAAccount and the Publish-Challenge , Unpublish-Challenge , and Save-Challenge functions. They call the Add, Remove, and Save functions from the plugin. Here are some examples of how I generally call them while testing. $DebugPreference = 'Continue' $pArgs = @{ MyParam1 = 'asdf' ; MyParam2 = 'qwer' } # multiple calls to publish/unpublish are generally more useful for DNS plugins Publish-Challenge example . com ( Get-PAAccount ) test1 MyPlugin $pArgs -Verbose Publish-Challenge example . com ( Get-PAAccount ) test2 MyPlugin $pArgs -Verbose Publish-Challenge example . com ( Get-PAAccount ) test3 MyPlugin $pArgs -Verbose # save is only necessary if your plugin implements it Save-Challenge MyPlugin $pArgs -Verbose Unpublish-Challenge example . com ( Get-PAAccount ) test1 MyPlugin $pArgs -Verbose Unpublish-Challenge example . com ( Get-PAAccount ) test2 MyPlugin $pArgs -Verbose Unpublish-Challenge example . com ( Get-PAAccount ) test3 MyPlugin $pArgs -Verbose # save is only necessary if your plugin implements it Save-Challenge MyPlugin $pArgs -Verbose Alternatively, you can dot source the plugin file and call the functions directly. But this can be difficult if the functions depend on module-scoped variables like $script:UseBasic or internal module functions. Also, remember to dot source again each time you make a change to the plugin.","title":"Testing Plugins"},{"location":"Plugins/Plugin-Development-Guide/#dns-specific-tips-and-tricks","text":"","title":"DNS Specific Tips and Tricks"},{"location":"Plugins/Plugin-Development-Guide/#multiple-txt-values-per-record","text":"It is both supported and expected that a given TXT record may have multiple values. It's most common with wildcard certificates that contain both the wildcard name ( *.example.com ) and the root domain ( example.com ). Both names require TXT records be added for the same FQDN ( _acme-challenge.example.com ). This can also happen if the user is using CNAME challenge aliases. The Add/Remove functions need to support all potential states of the particular TXT record. But how the record is represented by a given provider seems to vary. Some represent it as a single record with multiple values that you need to add to or remove from. Others have distinct records for each value that can be created/deleted individually. So make sure you can both create a new record that doesn't exist and add a value to a record that already does.","title":"Multiple TXT Values Per Record"},{"location":"Plugins/Plugin-Development-Guide/#remove-only-specific-txtvalue","text":"Related to having multiple TXT values per record, the remove function must not blindly delete any record that matches $RecordName . It should be able to remove only the $TxtValue on a record that may have multiple values. But if the record only contains a single value, the record should be deleted entirely.","title":"Remove Only Specific TxtValue"},{"location":"Plugins/Plugin-Development-Guide/#zone-matching","text":"A particular DNS provider may be hosting both domain apex zones ( example.com ) and sub-zones ( sub1.example.com ). One of the first things a plugin usually has to do is figure out which zone $RecordName needs to be added to. This should be the deepest sub-zone that would still contain $RecordName . Here are some examples assuming only the two previously mentioned zones exist. $RecordName Matching Zone _acme-challenge.example.com example.com _acme-challenge.site1.example.com example.com _acme-challenge.sub1.example.com sub1.example.com _acme-challenge.site1.sub1.example.com sub1.example.com _acme-challenge.site1.sub3.sub2.sub1.example.com sub1.example.com Many of the existing plugins have a helper function to handle this. Copy and modify their code where it makes sense but make sure helper function names are unique.","title":"Zone Matching"},{"location":"Plugins/Plugin-Development-Guide/#relative-record-names","text":"Many providers will end up needing you to provide a record's relative/short name such as _acme-challenge or _acme-challenge.www rather than the fully-qualified domain provided by $RecordName . To do this properly, you must first know the zone name that would contain the record. Once you have it, use the following method to separate the relative name from the zone name. # assumes $zoneName contains the zone name containing the record $recShort = ( $RecordName -ireplace [regex] :: Escape ( $zoneName ), [string] :: Empty ). TrimEnd ( '.' ) Keep in mind that there are cases where $RecordName and $zoneName can be identical. The code above will set $recShort to an empty string. Depending on the provider, this may not be the proper way to reference zone apex records. Some providers expect you to use @ , others may want the full zone name like example.com . So if your provider expects something other than an empty string, make sure you account for it. Here's an example: if ( $recShort -eq [string] :: Empty ) { $recShort = '@' }","title":"Relative Record Names"},{"location":"Plugins/Plugin-Development-Guide/#dns-aliases-and-domain-apex","text":"Don't forget to test your functions against the domain apex which can happen when users are using DNS challenge aliases. # The my.cname.tld record doesn't actually need to exist for the test to work. # The plugin will only be writing to example.com $publishParams = @{ Domain = 'my.cname.tld' Account = ( Get-PAAccount ) Token = 'fake-token' Plugin = 'MyPlugin' PluginArgs = $pArgs DnsAlias = 'example.com' Verbose = $true } Publish-Challenge @publishParams Unpublish-Challenge @publishParams","title":"DNS Aliases and Domain Apex"},{"location":"Plugins/Plugin-Development-Guide/#deriving-object-ids","text":"Many providers assign ID values to object types like zones and records that you need to use to manipulate those objects. A user should ideally not have to know or provide any zone, record, or object IDs in order to use the plugin. All of that should be discovered by the plugin code and the only thing the user should need to provide is whatever credentials or tokens the API requires for authentication. In the rare cases that you do need the user to provide something like a zone ID, make sure you allow for multiple values. A single certificate can contain names from many different zones and the plugin parameters that get passed to the plugin are the same for each TXT record that needs to be created.","title":"Deriving Object IDs"},{"location":"Plugins/Plugin-Development-Guide/#trailing-dots","text":"Be aware how your particular DNS provider represents zone and record names. Some include the trailing dot ( example.com. ). Others don't. This can affect string matching when finding zones and existing records.","title":"Trailing Dots"},{"location":"Plugins/Plugin-Development-Guide/#internationalized-domain-name-idn","text":"Many DNS providers and registrars support IDN domains which contain non-ascii unicode characters (or even emojis). When using IDN domains with ACME, the IDN names must be specified as Punycode . But the DNS providers may still send or receive the unicode version of the name. Particularly if your provider is not US-based, be aware of and try to account for how the provider handles IDN names. The .NET System.Globalization.IdnMapping class can help convert back and for between IDN and punycode names like this: # create an instance of the class $idn = [System.Globalization.IdnMapping] :: new () # convert an IDN name to punycode $idn . GetAscii ( 'b\u00fccher.example' ) # convert a punycode name back to IDN $idn . GetUnicode ( 'xn--bcher-kva.example' )","title":"Internationalized Domain Name (IDN)"},{"location":"Plugins/Plugin-Development-Guide/#http-specific-tips-and-tricks","text":"","title":"HTTP Specific Tips and Tricks"},{"location":"Plugins/Plugin-Development-Guide/#validation-timing","text":"When DNS plugins are used, there's a user customizable sleep timer between when the TXT records are published and the module asks the ACME server to validate those records because records are not typically available instantaneously worldwide. However, that sleep timer does not exist when an order is only using HTTP plugins because HTTP resources are typically available instantly. If your particular HTTP provider requires a delay between when the challenges are published and when they are validated, you should add that delay in the Save-HttpChallenge function of your plugin.","title":"Validation Timing"},{"location":"Plugins/Plugin-Development-Guide/#migrating-dns-plugins-from-3x-to-4x","text":"In case you have been using your own private DNS plugin in 3.x, here's how to migrate it to the 4.x format. Add function Get-CurrentPluginType { 'dns-01' } to the top of the file. Replace instances of Add-DnsTxt<Name> with Add-DnsTxt Replace instances of Remove-DnsTxt<Name> with Remove-DnsTxt Replace instances of Save-DnsTxt<Name> with Save-DnsTxt Replace instances of -DnsPlugin with -Plugin in usage guides.","title":"Migrating DNS Plugins from 3.x to 4.x"},{"location":"Plugins/PointDNS/","text":"How to use the PointDNS Plugin \u00b6 This plugin works against the PointDNS DNS provider. It presumes that you have already set up an account and created the DNS zone(s) that you are targeting. Setup \u00b6 Login to your account. Go to Account and copy your API key. Click the key icon if you need to generate a new key. Using the Plugin \u00b6 The PDUser parameter should be set to the email address associatedw ith your account. The API key is used with the PDKey SecureString parameter. Warning The PDKeyInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ PDUser = 'email@example.com' PDKey = ( Read-Host 'API Key' -AsSecureString ) } New-PACertificate example . com -Plugin PointDNS -PluginArgs $pArgs","title":"PointDNS"},{"location":"Plugins/PointDNS/#how-to-use-the-pointdns-plugin","text":"This plugin works against the PointDNS DNS provider. It presumes that you have already set up an account and created the DNS zone(s) that you are targeting.","title":"How to use the PointDNS Plugin"},{"location":"Plugins/PointDNS/#setup","text":"Login to your account. Go to Account and copy your API key. Click the key icon if you need to generate a new key.","title":"Setup"},{"location":"Plugins/PointDNS/#using-the-plugin","text":"The PDUser parameter should be set to the email address associatedw ith your account. The API key is used with the PDKey SecureString parameter. Warning The PDKeyInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ PDUser = 'email@example.com' PDKey = ( Read-Host 'API Key' -AsSecureString ) } New-PACertificate example . com -Plugin PointDNS -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/Porkbun/","text":"How To Use the Porkbun DNS Plugin \u00b6 This plugin works with the Porkbun DNS provider. It is assumed that you have already setup an account and created the DNS zone(s) you will be using. Setup \u00b6 You will need to generate an API key/secret pair if you haven't already done so. Go to API Access after logging in. Give the key a name and click Create API Key . Copy both the key and secret (the name you entered is not needed). Note that you won't be able to retrieve the secret in the future. For each domain that you'd like to manage with the API, you must ensure that API Access is enabled under the Domain Settings (in the Details dropdown) Using the Plugin \u00b6 You will need to provide the API Key and Secret as SecureString s to PorkbunAPIKey and PorkbunSecret respectively. An example is shown below: $PorkbunArgs = @{ PorkbunAPIKey = ( Read-Host 'Porkbun API Key' -AsSecureString ); PorkbunSecret = ( Read-Host 'Porkbun API Secret' -AsSecureString ); } New-PACertificate example . com -Plugin Porkbun -PluginArgs $PorkbunArgs","title":"Porkbun"},{"location":"Plugins/Porkbun/#how-to-use-the-porkbun-dns-plugin","text":"This plugin works with the Porkbun DNS provider. It is assumed that you have already setup an account and created the DNS zone(s) you will be using.","title":"How To Use the Porkbun DNS Plugin"},{"location":"Plugins/Porkbun/#setup","text":"You will need to generate an API key/secret pair if you haven't already done so. Go to API Access after logging in. Give the key a name and click Create API Key . Copy both the key and secret (the name you entered is not needed). Note that you won't be able to retrieve the secret in the future. For each domain that you'd like to manage with the API, you must ensure that API Access is enabled under the Domain Settings (in the Details dropdown)","title":"Setup"},{"location":"Plugins/Porkbun/#using-the-plugin","text":"You will need to provide the API Key and Secret as SecureString s to PorkbunAPIKey and PorkbunSecret respectively. An example is shown below: $PorkbunArgs = @{ PorkbunAPIKey = ( Read-Host 'Porkbun API Key' -AsSecureString ); PorkbunSecret = ( Read-Host 'Porkbun API Secret' -AsSecureString ); } New-PACertificate example . com -Plugin Porkbun -PluginArgs $PorkbunArgs","title":"Using the Plugin"},{"location":"Plugins/PortsManagement/","text":"How To Use the Ports Management DNS Plugin \u00b6 This plugin works against the Ports Management provider. It is assumed that you already have an account and at least one DNS zone you will be working against. Setup \u00b6 Acquiring a API key for the production API is initiated through your Ports Group representative. As specified in Ports own API docs: \"To get access to the production environment contact your Ports Group representative. You will receive instructions on how to retrieve your API key from the Ports Management web user interface in a secure way. Note that you will be able to see the API key only once. You will also be able to configure the privileges of the API access key. That is read-only or read-write access, what part of the organization or what zones the API access key can work with and so forth. It is also possible to get more than one API key with different privileges if required. In addition, you will need to supply your IP addresses/ranges to be accept listed by Ports Group firewalls. Only accept listed IPs can access the Ports Management API servers.\" If you have been given access to the demo environment, you should be able to find a demo API key in the Ports Management Demo API guide . The demo environment is only suitable for testing, as you will not be able to validate any certificates using it. Using the Plugin \u00b6 With your API key, pass it to the plugin using the PortsApiKey parameter as a SecureString. $pArgs = @{ PortsApiKey = ( Read-Host -Prompt 'Ports API key' -AsSecureString ) } New-PACertificate example . com -Plugin PortsManagement -PluginArgs $pArgs Testing the Ports Managment demo environment \u00b6 For testing against the Demo environment, set the parameter PortsEnvironment to 'Demo' Set-PAServer -Name LE_STAGE New-PAAccount -Contact 'yourname@example.com' -AcceptTOS $pluginArgs = @{ PortsApiKey = ( Read-Host 'Ports API key' -AsSecureString ) PortsEnvironment = 'Demo' } $challengeArgs = @{ Domain = 'example.com' Account = ( Get-PAAccount ) Token = 'test1' Plugin = 'PortsManagement' PluginArgs = $pluginArgs } Publish-Challenge @challengeArgs # You can now verify in the Ports Management portal that a record for _acme-challenge has been added to your zone, or use the Get-PortsDnsRecord helper function. # Clean up Unpublish-Challenge @challengeArgs","title":"PortsManagement"},{"location":"Plugins/PortsManagement/#how-to-use-the-ports-management-dns-plugin","text":"This plugin works against the Ports Management provider. It is assumed that you already have an account and at least one DNS zone you will be working against.","title":"How To Use the Ports Management DNS Plugin"},{"location":"Plugins/PortsManagement/#setup","text":"Acquiring a API key for the production API is initiated through your Ports Group representative. As specified in Ports own API docs: \"To get access to the production environment contact your Ports Group representative. You will receive instructions on how to retrieve your API key from the Ports Management web user interface in a secure way. Note that you will be able to see the API key only once. You will also be able to configure the privileges of the API access key. That is read-only or read-write access, what part of the organization or what zones the API access key can work with and so forth. It is also possible to get more than one API key with different privileges if required. In addition, you will need to supply your IP addresses/ranges to be accept listed by Ports Group firewalls. Only accept listed IPs can access the Ports Management API servers.\" If you have been given access to the demo environment, you should be able to find a demo API key in the Ports Management Demo API guide . The demo environment is only suitable for testing, as you will not be able to validate any certificates using it.","title":"Setup"},{"location":"Plugins/PortsManagement/#using-the-plugin","text":"With your API key, pass it to the plugin using the PortsApiKey parameter as a SecureString. $pArgs = @{ PortsApiKey = ( Read-Host -Prompt 'Ports API key' -AsSecureString ) } New-PACertificate example . com -Plugin PortsManagement -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/PortsManagement/#testing-the-ports-managment-demo-environment","text":"For testing against the Demo environment, set the parameter PortsEnvironment to 'Demo' Set-PAServer -Name LE_STAGE New-PAAccount -Contact 'yourname@example.com' -AcceptTOS $pluginArgs = @{ PortsApiKey = ( Read-Host 'Ports API key' -AsSecureString ) PortsEnvironment = 'Demo' } $challengeArgs = @{ Domain = 'example.com' Account = ( Get-PAAccount ) Token = 'test1' Plugin = 'PortsManagement' PluginArgs = $pluginArgs } Publish-Challenge @challengeArgs # You can now verify in the Ports Management portal that a record for _acme-challenge has been added to your zone, or use the Get-PortsDnsRecord helper function. # Clean up Unpublish-Challenge @challengeArgs","title":"Testing the Ports Managment demo environment"},{"location":"Plugins/RFC2136/","text":"How to use the RFC2136 Plugin \u00b6 This plugin works against any DNS provider that supports dynamic updates using the protocol specified in RFC 2136 . Both unauthenticated and TSIG authenticated updates are supported. Setup \u00b6 It is beyond the scope of this guide to explain how to configure your DNS server to accept dynamic updates or generate a TSIG key to use for authentication. But if you're using BIND, the Dynamic Update Policies section of the official docs is a good place to start. There are also a variety of tutorials available with a quick web search. The plugin does not currently support Kerberos (GSS-TSIG) based updates. You must either use unauthenticated updates with an IP allow list or TSIG authenticated updates using a key type supported by your DNS server and the nsupdate utility. As of this writing, the current stable version of BIND is 9.16.20 and supports key types using the following algorithms: hmac-md5 hmac-sha1 hmac-sha224 hmac-sha256 hmac-sha384 hmac-sha512 When using a TSIG key, you will typically have 3 values; a key name, a key type from the list above, and a Base64 encoded key value. You will need to supply all three as plugin parameters. Plugin Dependencies \u00b6 Due to the inexplicable lack of good native DNS libraries within PowerShell/.NET, this plugin relies on the nsupdate utility which is part of the ISC BIND distribution. Most modern Linux distributions will have this installed by default, but double check to be sure. On Windows, you will need to download and install the utility. Go to the ISC BIND Downloads page and download the current stable version for Windows. You don't actually need to run the installer. It is sufficient to simply unzip the archive and either add that folder to your PATH environment variable or specify the full path to nsupdate.exe in the plugin arguments. (Adding the folder to your PATH also gives you easy access to the dig utility which many DNS admins prefer over nslookup) Note Some users have reported needing to install Visual C++ Redistributable libraries in order for the unzip-and-run method to work. Many systems will already have these installed. But if not, among the files unzipped should be a vcredist_x64.exe installer you can use. You can test by running nsupdate -V to check the version. Using the Plugin \u00b6 When using unauthenticated updates, there are no required parameters as long as the nameserver in the domain's SOA record can directly accept the dynamic updates. You can optionally supply DDNSNameserver to override the value in returned in the SOA record. There is also a DDNSPort parameter if your nameserver is not listening on the standard port 53, but the parameter is ignored unless DDNSNameserver is also supplied. When using TSIG authenticated updates, in addition to the previous parameters you must also supply DDNSKeyName , DDNSKeyType , and DDNSKeyValue which is a SecureString object. Warning The DDNSKeyValueInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. If the nsupdate utility is not in your PATH environment variable, you must also supply the full path to it using the DDNSExePath parameter. There is an optional DDNSZone parameter which allows you to specify the zone(s) the records will be added to. But this shouldn't normally be necessary. See issue #307 for more info. Here are a few examples using different combinations of parameters. TSIG and explicit nsupdate path \u00b6 $pArgs = @{ DDNSKeyName = 'mykey' DDNSKeyType = 'hmac-sha256' DDNSKeyValue = ( Read-Host 'TSIG Key Value' -AsSecureString ) DDNSExePath = 'C:\\BIND\\nsupdate.exe' } New-PACertificate example . com -Plugin RFC2136 -PluginArgs $pArgs Unauthenticated with nsupdate in PATH and alternate port \u00b6 $pArgs = @{ DDNSNameserver = 'ns.example.com' DDNSPort = 54 } New-PACertificate example . com -Plugin RFC2136 -PluginArgs $pArgs","title":"RFC2136"},{"location":"Plugins/RFC2136/#how-to-use-the-rfc2136-plugin","text":"This plugin works against any DNS provider that supports dynamic updates using the protocol specified in RFC 2136 . Both unauthenticated and TSIG authenticated updates are supported.","title":"How to use the RFC2136 Plugin"},{"location":"Plugins/RFC2136/#setup","text":"It is beyond the scope of this guide to explain how to configure your DNS server to accept dynamic updates or generate a TSIG key to use for authentication. But if you're using BIND, the Dynamic Update Policies section of the official docs is a good place to start. There are also a variety of tutorials available with a quick web search. The plugin does not currently support Kerberos (GSS-TSIG) based updates. You must either use unauthenticated updates with an IP allow list or TSIG authenticated updates using a key type supported by your DNS server and the nsupdate utility. As of this writing, the current stable version of BIND is 9.16.20 and supports key types using the following algorithms: hmac-md5 hmac-sha1 hmac-sha224 hmac-sha256 hmac-sha384 hmac-sha512 When using a TSIG key, you will typically have 3 values; a key name, a key type from the list above, and a Base64 encoded key value. You will need to supply all three as plugin parameters.","title":"Setup"},{"location":"Plugins/RFC2136/#plugin-dependencies","text":"Due to the inexplicable lack of good native DNS libraries within PowerShell/.NET, this plugin relies on the nsupdate utility which is part of the ISC BIND distribution. Most modern Linux distributions will have this installed by default, but double check to be sure. On Windows, you will need to download and install the utility. Go to the ISC BIND Downloads page and download the current stable version for Windows. You don't actually need to run the installer. It is sufficient to simply unzip the archive and either add that folder to your PATH environment variable or specify the full path to nsupdate.exe in the plugin arguments. (Adding the folder to your PATH also gives you easy access to the dig utility which many DNS admins prefer over nslookup) Note Some users have reported needing to install Visual C++ Redistributable libraries in order for the unzip-and-run method to work. Many systems will already have these installed. But if not, among the files unzipped should be a vcredist_x64.exe installer you can use. You can test by running nsupdate -V to check the version.","title":"Plugin Dependencies"},{"location":"Plugins/RFC2136/#using-the-plugin","text":"When using unauthenticated updates, there are no required parameters as long as the nameserver in the domain's SOA record can directly accept the dynamic updates. You can optionally supply DDNSNameserver to override the value in returned in the SOA record. There is also a DDNSPort parameter if your nameserver is not listening on the standard port 53, but the parameter is ignored unless DDNSNameserver is also supplied. When using TSIG authenticated updates, in addition to the previous parameters you must also supply DDNSKeyName , DDNSKeyType , and DDNSKeyValue which is a SecureString object. Warning The DDNSKeyValueInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. If the nsupdate utility is not in your PATH environment variable, you must also supply the full path to it using the DDNSExePath parameter. There is an optional DDNSZone parameter which allows you to specify the zone(s) the records will be added to. But this shouldn't normally be necessary. See issue #307 for more info. Here are a few examples using different combinations of parameters.","title":"Using the Plugin"},{"location":"Plugins/RFC2136/#tsig-and-explicit-nsupdate-path","text":"$pArgs = @{ DDNSKeyName = 'mykey' DDNSKeyType = 'hmac-sha256' DDNSKeyValue = ( Read-Host 'TSIG Key Value' -AsSecureString ) DDNSExePath = 'C:\\BIND\\nsupdate.exe' } New-PACertificate example . com -Plugin RFC2136 -PluginArgs $pArgs","title":"TSIG and explicit nsupdate path"},{"location":"Plugins/RFC2136/#unauthenticated-with-nsupdate-in-path-and-alternate-port","text":"$pArgs = @{ DDNSNameserver = 'ns.example.com' DDNSPort = 54 } New-PACertificate example . com -Plugin RFC2136 -PluginArgs $pArgs","title":"Unauthenticated with nsupdate in PATH and alternate port"},{"location":"Plugins/Rackspace/","text":"How To Use the Rackspace DNS Plugin \u00b6 This plugin works against the Rackspace Cloud DNS provider. It is assumed that you have already setup an account and created the DNS zone(s) you will be working against. Setup \u00b6 First, go to the Profile page for your account and record the Rackspace API Key value from the Security section. You'll also need your account username. Using the Plugin \u00b6 Your account username is used with the RSUsername paraemter. The API key is used with the RSApiKey SecureString parameter. Warning The RSApiKeyInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ RSUsername = 'myusername' RSApiKey = ( Read-Host \"API Key\" -AsSecureString ) } New-PACertificate example . com -Plugin Rackspace -PluginArgs $pArgs","title":"Rackspace"},{"location":"Plugins/Rackspace/#how-to-use-the-rackspace-dns-plugin","text":"This plugin works against the Rackspace Cloud DNS provider. It is assumed that you have already setup an account and created the DNS zone(s) you will be working against.","title":"How To Use the Rackspace DNS Plugin"},{"location":"Plugins/Rackspace/#setup","text":"First, go to the Profile page for your account and record the Rackspace API Key value from the Security section. You'll also need your account username.","title":"Setup"},{"location":"Plugins/Rackspace/#using-the-plugin","text":"Your account username is used with the RSUsername paraemter. The API key is used with the RSApiKey SecureString parameter. Warning The RSApiKeyInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ RSUsername = 'myusername' RSApiKey = ( Read-Host \"API Key\" -AsSecureString ) } New-PACertificate example . com -Plugin Rackspace -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/Regru/","text":"How To Use the Reg.ru Plugin \u00b6 This plugin works against the Reg.ru and Reg.com provider. It is assumed that you have already setup an account and registered the domain you will be working against. Setup \u00b6 API Access is not allowed without adding your client machine's IP or subnet to a whitelist. You may also set a separate API password that is different than your primary account password. But it is not required. Both settings are configured from the API Settings page. Reg.ru API Settings Reg.com API Settings Using the Plugin \u00b6 Your account username and either the account password or API password are used with the RegRuCredential parameter as a PSCredential object. It has been reported that the typical DNS propagation time for this provider is close to 1 hour. So be sure to set the DNSSleep parameter longer than 3600. Warning The RegRuLogin and RegRuPwdInsecure parameters are deprecated and will be removed in the next major module version. If you are using them, please migrate to the Secure parameter set. $pArgs = @{ RegRuCredential = ( Get-Credential ) } New-PACertificate example . com -Plugin Regru -PluginArgs $pArgs -DNSSleep 4000","title":"Regru"},{"location":"Plugins/Regru/#how-to-use-the-regru-plugin","text":"This plugin works against the Reg.ru and Reg.com provider. It is assumed that you have already setup an account and registered the domain you will be working against.","title":"How To Use the Reg.ru Plugin"},{"location":"Plugins/Regru/#setup","text":"API Access is not allowed without adding your client machine's IP or subnet to a whitelist. You may also set a separate API password that is different than your primary account password. But it is not required. Both settings are configured from the API Settings page. Reg.ru API Settings Reg.com API Settings","title":"Setup"},{"location":"Plugins/Regru/#using-the-plugin","text":"Your account username and either the account password or API password are used with the RegRuCredential parameter as a PSCredential object. It has been reported that the typical DNS propagation time for this provider is close to 1 hour. So be sure to set the DNSSleep parameter longer than 3600. Warning The RegRuLogin and RegRuPwdInsecure parameters are deprecated and will be removed in the next major module version. If you are using them, please migrate to the Secure parameter set. $pArgs = @{ RegRuCredential = ( Get-Credential ) } New-PACertificate example . com -Plugin Regru -PluginArgs $pArgs -DNSSleep 4000","title":"Using the Plugin"},{"location":"Plugins/Route53/","text":"How To Use the Route53 DNS Plugin \u00b6 This plugin works against the AWS Route53 DNS provider. It is assumed that you already have an AWS account with at least one DNS zone. The setup portion of this guide also assumes you have access to create IAM users/roles. If you have been given access credentials by your AWS admin, you may need the admin to create the IAM policies necessary for you to edit the zone TXT records. Note You may use this plugin without the AWS PowerShell module installed unless you use the profile name authentication method. In that case, you will either need the Aws.Tools.Route53 or the older AWSPowerShell or AWSPowerShell.NetCore module depending on your environment. More details can be found in the AWS PowerShell documentation . Setup \u00b6 There are generally two different ways to use this plugin depending on whether you are running it from outside AWS or inside from something like an EC2 instance. When outside, you need to specify explicit credentials for an IAM account that has permissions to modify a zone. When inside, you may instead choose to authenticate using an IAM Role . When using explicit credentials, a personal high-level account will work, but it's a better idea to create a dedicated user with the minimum necessary privileges to create the TXT records necessary for ACME challenges. If you already have your policies, users, groups, and roles setup, skip the rest of this section. Otherwise, read on for examples. Note These examples require either the AWS.Tools.IdentityManagement module or the older AWSPowerShell or AWSPowerShell.NetCore module depending on your environment. Setup Admin Credentials \u00b6 You'll need to create an Access key and associated secret for your account to use with the AWS module. Once you have those, use the following commands to save them to a local profile and set it as the default credential. If you have previously configured your AWS credentials into a profile via Set-AWSCredentials , skip that command below and replace references to the profile name in the Initialize-AWSDefaultConfiguration command with your own. Set-AWSCredential -StoreAs 'dnsadmin' -AccessKey 'xxxxxxxx' -SecretKey 'xxxxxxxx' Initialize-AWSDefaultConfiguration -ProfileName 'dnsadmin' Create IAM Policy \u00b6 Create the policy that allows modifications to hosted zones. $policyDef = @{ Version = '2012-10-17' ; Statement =@( @{ Effect = 'Allow' ; Action =@( 'route53:ListHostedZones' ); Resource = '*' ; }, @{ Effect = 'Allow' ; Action =@( 'route53:GetHostedZone' , 'route53:ListResourceRecordSets' , 'route53:ChangeResourceRecordSets' ); Resource = 'arn:aws:route53:::hostedzone/*' ; } ) } | ConvertTo-Json -Depth 5 ; $policyDef $policy = New-IAMPolicy \"R53_Zone_Editor\" -PolicyDocument $policyDef -Description \"Allow write access to hosted zones.\" If Using Explicit Credentials \u00b6 Create IAM Group and Associate to Policy \u00b6 Rather than associating the policy to a service account directly, it is wise to associate it to a group instead. That way you can easily add or replace additional users later as necessary. $group = New-IAMGroup -GroupName 'HostedZoneEditors' Register-IAMGroupPolicy $group . GroupName $policy . Arn Create IAM User and Add to Group \u00b6 Finally, we'll create the service account and add it to the group we created. We'll also create the access key to use with the plugin. $user = New-IAMUser -UserName 'posh-acme' Add-IAMUserToGroup $group . GroupName $user . UserName $key = New-IAMAccessKey $user . UserName $key The $key variable output should contains AccessKeyId and SecretAccessKey which are what you ultimately use with the plugin. If Using IAM Role \u00b6 Create IAM Role and Associate to Policy \u00b6 If your server that is using Posh-ACME lives within AWS (such as an EC2 instance), you can create an IAM Role and associate it to the instance which then avoids the need to use and store explicit credential for Route53. Here's how you might create the role and associate it with the policy created earlier. $roleTrust = @{ Version = '2012-10-17' Statement =@( @{ Effect = 'Allow' Action = 'sts:AssumeRole' Principal =@{ Service = 'ec2.amazonaws.com' } } ) } | ConvertTo-Json -Depth 5 ; $roleTrust $role = New-IAMRole -RoleName 'R53_Zone_Editor_Role' -AssumeRolePolicyDocument $roleTrust -Description 'Allows associated EC2 instances to modify Route53 zones for certificate validation purposes.' Register-IAMRolePolicy $role . RoleName $policy . Arn Now you'd need to attach the role with your EC2 instance or launch a new instance with the role pre-attached. More details on that can be found here . Using the Plugin \u00b6 If you are using explicit credentials, you may send them directly to the plugin via R53AccessKey and R53SecretKey parameters. A SecureString value is required for R53SecretKey . If you lost the keys, you can re-generate them from the AWS IAM console. But there's no way to retrieve an existing secret key value. Warning The R53SecretKeyInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. Explicit Credentials \u00b6 $pArgs = @{ R53AccessKey = 'xxxxxxxx' R53SecretKey = ( Read-Host \"Secret Key\" -AsSecureString ) } New-PACertificate example . com -Plugin Route53 -PluginArgs $pArgs AWS Powershell Module Profile \u00b6 You may also use the R53ProfileName parameter to specify the profile name of an existing credential stored with Set-AwsCredential from an AWS powershell module. Remember that the module must remain installed for renewals when using this method. # store the access/secret key in a profile called 'poshacme' Set-AWSCredential -StoreAs 'poshacme' -AccessKey 'xxxxxxxx' -SecretKey 'yyyyyyyy' # set the params and generate the cert $pArgs = @{ R53ProfileName = 'poshacme' } New-PACertificate example . com -Plugin Route53 -PluginArgs $pArgs IAM Role \u00b6 When using an IAM Role, the only thing you need to specify is a switch called R53UseIAMRole . New-PACertificate example . com -Plugin Route53 -PluginArgs @{ R53UseIAMRole = $true }","title":"Route53"},{"location":"Plugins/Route53/#how-to-use-the-route53-dns-plugin","text":"This plugin works against the AWS Route53 DNS provider. It is assumed that you already have an AWS account with at least one DNS zone. The setup portion of this guide also assumes you have access to create IAM users/roles. If you have been given access credentials by your AWS admin, you may need the admin to create the IAM policies necessary for you to edit the zone TXT records. Note You may use this plugin without the AWS PowerShell module installed unless you use the profile name authentication method. In that case, you will either need the Aws.Tools.Route53 or the older AWSPowerShell or AWSPowerShell.NetCore module depending on your environment. More details can be found in the AWS PowerShell documentation .","title":"How To Use the Route53 DNS Plugin"},{"location":"Plugins/Route53/#setup","text":"There are generally two different ways to use this plugin depending on whether you are running it from outside AWS or inside from something like an EC2 instance. When outside, you need to specify explicit credentials for an IAM account that has permissions to modify a zone. When inside, you may instead choose to authenticate using an IAM Role . When using explicit credentials, a personal high-level account will work, but it's a better idea to create a dedicated user with the minimum necessary privileges to create the TXT records necessary for ACME challenges. If you already have your policies, users, groups, and roles setup, skip the rest of this section. Otherwise, read on for examples. Note These examples require either the AWS.Tools.IdentityManagement module or the older AWSPowerShell or AWSPowerShell.NetCore module depending on your environment.","title":"Setup"},{"location":"Plugins/Route53/#setup-admin-credentials","text":"You'll need to create an Access key and associated secret for your account to use with the AWS module. Once you have those, use the following commands to save them to a local profile and set it as the default credential. If you have previously configured your AWS credentials into a profile via Set-AWSCredentials , skip that command below and replace references to the profile name in the Initialize-AWSDefaultConfiguration command with your own. Set-AWSCredential -StoreAs 'dnsadmin' -AccessKey 'xxxxxxxx' -SecretKey 'xxxxxxxx' Initialize-AWSDefaultConfiguration -ProfileName 'dnsadmin'","title":"Setup Admin Credentials"},{"location":"Plugins/Route53/#create-iam-policy","text":"Create the policy that allows modifications to hosted zones. $policyDef = @{ Version = '2012-10-17' ; Statement =@( @{ Effect = 'Allow' ; Action =@( 'route53:ListHostedZones' ); Resource = '*' ; }, @{ Effect = 'Allow' ; Action =@( 'route53:GetHostedZone' , 'route53:ListResourceRecordSets' , 'route53:ChangeResourceRecordSets' ); Resource = 'arn:aws:route53:::hostedzone/*' ; } ) } | ConvertTo-Json -Depth 5 ; $policyDef $policy = New-IAMPolicy \"R53_Zone_Editor\" -PolicyDocument $policyDef -Description \"Allow write access to hosted zones.\"","title":"Create IAM Policy"},{"location":"Plugins/Route53/#if-using-explicit-credentials","text":"","title":"If Using Explicit Credentials"},{"location":"Plugins/Route53/#create-iam-group-and-associate-to-policy","text":"Rather than associating the policy to a service account directly, it is wise to associate it to a group instead. That way you can easily add or replace additional users later as necessary. $group = New-IAMGroup -GroupName 'HostedZoneEditors' Register-IAMGroupPolicy $group . GroupName $policy . Arn","title":"Create IAM Group and Associate to Policy"},{"location":"Plugins/Route53/#create-iam-user-and-add-to-group","text":"Finally, we'll create the service account and add it to the group we created. We'll also create the access key to use with the plugin. $user = New-IAMUser -UserName 'posh-acme' Add-IAMUserToGroup $group . GroupName $user . UserName $key = New-IAMAccessKey $user . UserName $key The $key variable output should contains AccessKeyId and SecretAccessKey which are what you ultimately use with the plugin.","title":"Create IAM User and Add to Group"},{"location":"Plugins/Route53/#if-using-iam-role","text":"","title":"If Using IAM Role"},{"location":"Plugins/Route53/#create-iam-role-and-associate-to-policy","text":"If your server that is using Posh-ACME lives within AWS (such as an EC2 instance), you can create an IAM Role and associate it to the instance which then avoids the need to use and store explicit credential for Route53. Here's how you might create the role and associate it with the policy created earlier. $roleTrust = @{ Version = '2012-10-17' Statement =@( @{ Effect = 'Allow' Action = 'sts:AssumeRole' Principal =@{ Service = 'ec2.amazonaws.com' } } ) } | ConvertTo-Json -Depth 5 ; $roleTrust $role = New-IAMRole -RoleName 'R53_Zone_Editor_Role' -AssumeRolePolicyDocument $roleTrust -Description 'Allows associated EC2 instances to modify Route53 zones for certificate validation purposes.' Register-IAMRolePolicy $role . RoleName $policy . Arn Now you'd need to attach the role with your EC2 instance or launch a new instance with the role pre-attached. More details on that can be found here .","title":"Create IAM Role and Associate to Policy"},{"location":"Plugins/Route53/#using-the-plugin","text":"If you are using explicit credentials, you may send them directly to the plugin via R53AccessKey and R53SecretKey parameters. A SecureString value is required for R53SecretKey . If you lost the keys, you can re-generate them from the AWS IAM console. But there's no way to retrieve an existing secret key value. Warning The R53SecretKeyInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set.","title":"Using the Plugin"},{"location":"Plugins/Route53/#explicit-credentials","text":"$pArgs = @{ R53AccessKey = 'xxxxxxxx' R53SecretKey = ( Read-Host \"Secret Key\" -AsSecureString ) } New-PACertificate example . com -Plugin Route53 -PluginArgs $pArgs","title":"Explicit Credentials"},{"location":"Plugins/Route53/#aws-powershell-module-profile","text":"You may also use the R53ProfileName parameter to specify the profile name of an existing credential stored with Set-AwsCredential from an AWS powershell module. Remember that the module must remain installed for renewals when using this method. # store the access/secret key in a profile called 'poshacme' Set-AWSCredential -StoreAs 'poshacme' -AccessKey 'xxxxxxxx' -SecretKey 'yyyyyyyy' # set the params and generate the cert $pArgs = @{ R53ProfileName = 'poshacme' } New-PACertificate example . com -Plugin Route53 -PluginArgs $pArgs","title":"AWS Powershell Module Profile"},{"location":"Plugins/Route53/#iam-role","text":"When using an IAM Role, the only thing you need to specify is a switch called R53UseIAMRole . New-PACertificate example . com -Plugin Route53 -PluginArgs @{ R53UseIAMRole = $true }","title":"IAM Role"},{"location":"Plugins/SSHProxy/","text":"How to use the SSHProxy plugin \u00b6 This plugin works by delegating the update via SSH to another server which is already able to do dynamic updates against your chosen DNS provider(s). It is designed to use SSH keypairs rather than relying on negiotiating username/password authentication so as to allow the SSH server administrator greater control over what can be run on behalf of Posh-ACME. Setup \u00b6 Plugin dependencies \u00b6 You will need (Open)SSH client software installed on your Posh-ACME client. On Linux and MacOS, this comes pre-installed. For Windows, the OpenSSH client can be downloaded from Microsoft (https://learn.microsoft.com/en-us/windows-server/administration/openssh/openssh_install_firstuse?tabs=gui) or the upstream version from https://github.com/PowerShell/Win32-OpenSSH. Note that PuTTY isn't sufficient, though plink.exe (from the PuTTY suite) would work. You will also need an SSH server where you can install your Posh-ACME public key and run your update script from. Posh-ACME Client SSH setup \u00b6 To allow the Posh-ACME client to connect to your chosen SSH server, you will need to generate an SSH keypair and ensure this on both the Posh-ACME client and the server. The current best-practice recommends ed_25519 keys. To generate these, run the following on your Posh-ACME client device. ssh-keygen -q -N '' -t ed25519 -f $HOME /poshacme This will create two files in your home directory poshacme - your private key poshacme.pub - your public key You will need to reference the first in your Posh-ACME SSHProxy configuration and use the contents of second on the SSH server. (thoughout this document, i'll be using $HOME/poshacme - you can replace this with a filename of your choosing). SSH (proxy) server setup \u00b6 On the SSH server, for the account chosen to proxy your Posh-ACME DNS updates, edit the users' $HOME/.ssh/authorized_keys file and add (all one line) from=\"1.2.3.4\",restrict,command=\"/usr/local/bin/dnsupdate\" <contents of generated poshacme.pub file> replacing 1.2.3.4 with the IP address of the Posh-ACME device and /usr/local/bin/dnsupdate with the name of the script that will run your DDNS update and append the contents of the poshacme.pub file generated earlier by ssh-keygen . Whilst it is beyond the scope of this guide to explain how to configure the actual DDNS update that will be undertaken on your behalf by the SSH server, The following example using nsupdate should suffice. Example /usr/local/bin/dnsupdate command #!/bin/bash # grab args given to when connecting set -- $SSH_ORIGINAL_COMMAND # belt and braces validatation if [ \" $# \" -ne 3 ] ; then echo \"usage: $0 [add|delete] _acme-challenge.some.name token\" exit 1 fi if [ \" $1 \" = \"add\" ] ; then : elif [ \" $1 \" = \"delete\" ] ; then : else echo \"usage: $0 [add|delete] _acme-challenge.some.name token\" fi # in particular, we want $2 to start _acme-challenge - we could do more # fancy validation if wanted. if ! [[ \" $2 \" = ~ ^_acme-challenge.* ]] ; then echo \"usage: $0 [add|delete] _acme-challenge.some.name token\" exit 1 fi # do the update printf \"update $1 $2 . 60 TXT $3 \\nsend\\n\" | nsupdate -y all:myupdatekey It should also be noted that this isn't restricted to SSH connections to a Linux server. This will work against any OpenSSH server running on Linux, Windows or Mac. Using the Plugin \u00b6 For most, using the following should suffice: $pArgs =@{ SSHServer = \"ssh.example.com\" SSHUser = \"nsupdate\" SSHIdentityFile = \"$HOME/poshacme\" } Publish-Challenge example . com -Plugin SSHProxy -PluginArgs $pArgs Additionally, you can specify SSHConfigFile if you need specify an alternative to the default ssh configuration file. You'll know if you need to do this as you will be doing other fancy SSH things from your Posh-ACME client! Similarly, you can specify SSHRemoteCommand if your SSH server config isn't using a forced command - this is considerably less secure...","title":"SSHProxy"},{"location":"Plugins/SSHProxy/#how-to-use-the-sshproxy-plugin","text":"This plugin works by delegating the update via SSH to another server which is already able to do dynamic updates against your chosen DNS provider(s). It is designed to use SSH keypairs rather than relying on negiotiating username/password authentication so as to allow the SSH server administrator greater control over what can be run on behalf of Posh-ACME.","title":"How to use the SSHProxy plugin"},{"location":"Plugins/SSHProxy/#setup","text":"","title":"Setup"},{"location":"Plugins/SSHProxy/#plugin-dependencies","text":"You will need (Open)SSH client software installed on your Posh-ACME client. On Linux and MacOS, this comes pre-installed. For Windows, the OpenSSH client can be downloaded from Microsoft (https://learn.microsoft.com/en-us/windows-server/administration/openssh/openssh_install_firstuse?tabs=gui) or the upstream version from https://github.com/PowerShell/Win32-OpenSSH. Note that PuTTY isn't sufficient, though plink.exe (from the PuTTY suite) would work. You will also need an SSH server where you can install your Posh-ACME public key and run your update script from.","title":"Plugin dependencies"},{"location":"Plugins/SSHProxy/#posh-acme-client-ssh-setup","text":"To allow the Posh-ACME client to connect to your chosen SSH server, you will need to generate an SSH keypair and ensure this on both the Posh-ACME client and the server. The current best-practice recommends ed_25519 keys. To generate these, run the following on your Posh-ACME client device. ssh-keygen -q -N '' -t ed25519 -f $HOME /poshacme This will create two files in your home directory poshacme - your private key poshacme.pub - your public key You will need to reference the first in your Posh-ACME SSHProxy configuration and use the contents of second on the SSH server. (thoughout this document, i'll be using $HOME/poshacme - you can replace this with a filename of your choosing).","title":"Posh-ACME Client SSH setup"},{"location":"Plugins/SSHProxy/#ssh-proxy-server-setup","text":"On the SSH server, for the account chosen to proxy your Posh-ACME DNS updates, edit the users' $HOME/.ssh/authorized_keys file and add (all one line) from=\"1.2.3.4\",restrict,command=\"/usr/local/bin/dnsupdate\" <contents of generated poshacme.pub file> replacing 1.2.3.4 with the IP address of the Posh-ACME device and /usr/local/bin/dnsupdate with the name of the script that will run your DDNS update and append the contents of the poshacme.pub file generated earlier by ssh-keygen . Whilst it is beyond the scope of this guide to explain how to configure the actual DDNS update that will be undertaken on your behalf by the SSH server, The following example using nsupdate should suffice. Example /usr/local/bin/dnsupdate command #!/bin/bash # grab args given to when connecting set -- $SSH_ORIGINAL_COMMAND # belt and braces validatation if [ \" $# \" -ne 3 ] ; then echo \"usage: $0 [add|delete] _acme-challenge.some.name token\" exit 1 fi if [ \" $1 \" = \"add\" ] ; then : elif [ \" $1 \" = \"delete\" ] ; then : else echo \"usage: $0 [add|delete] _acme-challenge.some.name token\" fi # in particular, we want $2 to start _acme-challenge - we could do more # fancy validation if wanted. if ! [[ \" $2 \" = ~ ^_acme-challenge.* ]] ; then echo \"usage: $0 [add|delete] _acme-challenge.some.name token\" exit 1 fi # do the update printf \"update $1 $2 . 60 TXT $3 \\nsend\\n\" | nsupdate -y all:myupdatekey It should also be noted that this isn't restricted to SSH connections to a Linux server. This will work against any OpenSSH server running on Linux, Windows or Mac.","title":"SSH (proxy) server setup"},{"location":"Plugins/SSHProxy/#using-the-plugin","text":"For most, using the following should suffice: $pArgs =@{ SSHServer = \"ssh.example.com\" SSHUser = \"nsupdate\" SSHIdentityFile = \"$HOME/poshacme\" } Publish-Challenge example . com -Plugin SSHProxy -PluginArgs $pArgs Additionally, you can specify SSHConfigFile if you need specify an alternative to the default ssh configuration file. You'll know if you need to do this as you will be doing other fancy SSH things from your Posh-ACME client! Similarly, you can specify SSHRemoteCommand if your SSH server config isn't using a forced command - this is considerably less secure...","title":"Using the Plugin"},{"location":"Plugins/Selectel/","text":"How To Use the Selectel DNS Plugin \u00b6 This plugin works against the Selectel provider. It is assumed that you have already setup an account and delegated the domain you will be working against. Setup \u00b6 If you haven't done it already, generate API key and record it for later. Using the Plugin \u00b6 The API Key is used with the SelectelAdminToken SecureString parameter. Warning The SelectelAdminTokenInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ SelectelAdminToken = ( Read-Host 'API key' -AsSecureString ) } New-PACertificate example . com -Plugin Selectel -PluginArgs $pArgs","title":"Selectel"},{"location":"Plugins/Selectel/#how-to-use-the-selectel-dns-plugin","text":"This plugin works against the Selectel provider. It is assumed that you have already setup an account and delegated the domain you will be working against.","title":"How To Use the Selectel DNS Plugin"},{"location":"Plugins/Selectel/#setup","text":"If you haven't done it already, generate API key and record it for later.","title":"Setup"},{"location":"Plugins/Selectel/#using-the-plugin","text":"The API Key is used with the SelectelAdminToken SecureString parameter. Warning The SelectelAdminTokenInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ SelectelAdminToken = ( Read-Host 'API key' -AsSecureString ) } New-PACertificate example . com -Plugin Selectel -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/SimpleDNSPlus/","text":"How To Use the Simple DNS Plus Plugin \u00b6 This plugin works with Simple DNS Plus which is a self-hosted DNS server for Windows. It is assumed you have already setup your server(s) and are properly serving the necessary Internet facing DNS zones for the certificates you will request. Setup \u00b6 Enable the HTTP API in the server options dialog In the main window Click Tools Click Options On the left, Scroll down and click HTTP API Make sure Enable HTTP API is checked Leave the URL prefix as default or set a custom one (e.g. https://dns.example.com:443/api). If you use HTTPS for the URL prefix, make sure to follow this guide to setup the certificate properly: How to bind an SSL certificate to the HTTP API Select your desired Authentication method. Anonymous is supported, but not recommended from a security standpoint. Basic is recommended and fully supported on all platforms. It is highly recommended to configure HTTPS when using Basic authentication. You can either use embedded credentials or Windows account credentials. Digest authentication is not officially supported, but can work in some environments. NTLM\\Kerberos is not officially supported, but can work in some environments. Make a note of the credentials for later. The CORS setting is irrelevant for using the plugin. But enabling it can be useful for general HTTP API testing. You don't need to enable the HTTP API v.1 check box. But if you do, remember to add a /v2 to your SdnsApiRoot property later. Click OK Using the Plugin \u00b6 The primary parameter you need with this plugin is SdnsApiRoot which is the root URL for the HTTP API such as http://dns.example.com:8053 . Remember to add a /v2 if you enabled the API v.1 check box. If you're using HTTPS and a self-signed certificate, you'll also need to add the SdnsIgnoreCert parameter. If you're not using anonymous authentication, you'll also need to specify credentials as a PSCredential object with SdnsCred . Warning The SdnsUser and SdnsPassword parameters are deprecated and will be removed in the next major module version. If you are using them, please migrate to the Secure parameter set. Anonymous Authentication \u00b6 $pArgs = @{ SdnsApiRoot = 'http://dns.example.com:8053' SdnsIgnoreCert = $true } New-PACertificate example . com -Plugin SimpleDNSPlus -PluginArgs $pArgs Credential Authentication \u00b6 $pArgs = @{ SdnsApiRoot = 'http://dns.example.com:8053' SdnsIgnoreCert = $true SdnsCred = ( Get-Credential ) } New-PACertificate example . com -Plugin SimpleDNSPlus -PluginArgs $pArgs","title":"SimpleDNSPlus"},{"location":"Plugins/SimpleDNSPlus/#how-to-use-the-simple-dns-plus-plugin","text":"This plugin works with Simple DNS Plus which is a self-hosted DNS server for Windows. It is assumed you have already setup your server(s) and are properly serving the necessary Internet facing DNS zones for the certificates you will request.","title":"How To Use the Simple DNS Plus Plugin"},{"location":"Plugins/SimpleDNSPlus/#setup","text":"Enable the HTTP API in the server options dialog In the main window Click Tools Click Options On the left, Scroll down and click HTTP API Make sure Enable HTTP API is checked Leave the URL prefix as default or set a custom one (e.g. https://dns.example.com:443/api). If you use HTTPS for the URL prefix, make sure to follow this guide to setup the certificate properly: How to bind an SSL certificate to the HTTP API Select your desired Authentication method. Anonymous is supported, but not recommended from a security standpoint. Basic is recommended and fully supported on all platforms. It is highly recommended to configure HTTPS when using Basic authentication. You can either use embedded credentials or Windows account credentials. Digest authentication is not officially supported, but can work in some environments. NTLM\\Kerberos is not officially supported, but can work in some environments. Make a note of the credentials for later. The CORS setting is irrelevant for using the plugin. But enabling it can be useful for general HTTP API testing. You don't need to enable the HTTP API v.1 check box. But if you do, remember to add a /v2 to your SdnsApiRoot property later. Click OK","title":"Setup"},{"location":"Plugins/SimpleDNSPlus/#using-the-plugin","text":"The primary parameter you need with this plugin is SdnsApiRoot which is the root URL for the HTTP API such as http://dns.example.com:8053 . Remember to add a /v2 if you enabled the API v.1 check box. If you're using HTTPS and a self-signed certificate, you'll also need to add the SdnsIgnoreCert parameter. If you're not using anonymous authentication, you'll also need to specify credentials as a PSCredential object with SdnsCred . Warning The SdnsUser and SdnsPassword parameters are deprecated and will be removed in the next major module version. If you are using them, please migrate to the Secure parameter set.","title":"Using the Plugin"},{"location":"Plugins/SimpleDNSPlus/#anonymous-authentication","text":"$pArgs = @{ SdnsApiRoot = 'http://dns.example.com:8053' SdnsIgnoreCert = $true } New-PACertificate example . com -Plugin SimpleDNSPlus -PluginArgs $pArgs","title":"Anonymous Authentication"},{"location":"Plugins/SimpleDNSPlus/#credential-authentication","text":"$pArgs = @{ SdnsApiRoot = 'http://dns.example.com:8053' SdnsIgnoreCert = $true SdnsCred = ( Get-Credential ) } New-PACertificate example . com -Plugin SimpleDNSPlus -PluginArgs $pArgs","title":"Credential Authentication"},{"location":"Plugins/Simply/","text":"How To Use the Simply.com DNS Plugin \u00b6 This plugin works against the Simply.com DNS provider. It is assumed that you have already setup an account and created the DNS zone(s) you will be working against. Setup \u00b6 Using the Simply.com API requires only your account name or account number and API Key which can be found in your Control Panel on the Account page. Using the Plugin \u00b6 Your account name/number is used with the SimplyAccount parameter. The API key is used with the SimplyAPIKey SecureString parameter. Warning The SimplyAPIKeyInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ SimplyAccount = 'S123456' SimplyAPIKey = ( Read-Host 'Enter Key' -AsSecureString ) } New-PACertificate example . com -Plugin Simply -PluginArgs $pArgs","title":"Simply"},{"location":"Plugins/Simply/#how-to-use-the-simplycom-dns-plugin","text":"This plugin works against the Simply.com DNS provider. It is assumed that you have already setup an account and created the DNS zone(s) you will be working against.","title":"How To Use the Simply.com DNS Plugin"},{"location":"Plugins/Simply/#setup","text":"Using the Simply.com API requires only your account name or account number and API Key which can be found in your Control Panel on the Account page.","title":"Setup"},{"location":"Plugins/Simply/#using-the-plugin","text":"Your account name/number is used with the SimplyAccount parameter. The API key is used with the SimplyAPIKey SecureString parameter. Warning The SimplyAPIKeyInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ SimplyAccount = 'S123456' SimplyAPIKey = ( Read-Host 'Enter Key' -AsSecureString ) } New-PACertificate example . com -Plugin Simply -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/TotalUptime/","text":"How To Use the TotalUptime Cloud DNS Plugin \u00b6 This plugin works against the TotalUptime Cloud DNS Service. It is assumed that you have already setup an account and created the DNS zone(s) you will be working against. Setup \u00b6 In order to use the TotalUptime Cloud DNS Plugin you will need an to create an API Account with a Role permitting access to DNS Create role \u00b6 In account settings go to the Roles & Security tab Add a role with DNS Enabled, DNS/Information Read, and DNS/Domains Full For further information refer to the documentation at: Add a Role Create API Account \u00b6 In account settings go to the Users tab Add a User checking the API Account box with the role you created earlier For further information refer to the documentation at: Add a User Using the Plugin \u00b6 You will need to specify the API account username and password in a PSCredentials object in TotalUptimeCredential $pArgs = @{ TotalUptimeCredential = ( Get-Credential ) } New-PACertificate example . com -Plugin TotalUptime -PluginArgs $pArgs","title":"TotalUptime"},{"location":"Plugins/TotalUptime/#how-to-use-the-totaluptime-cloud-dns-plugin","text":"This plugin works against the TotalUptime Cloud DNS Service. It is assumed that you have already setup an account and created the DNS zone(s) you will be working against.","title":"How To Use the TotalUptime Cloud DNS Plugin"},{"location":"Plugins/TotalUptime/#setup","text":"In order to use the TotalUptime Cloud DNS Plugin you will need an to create an API Account with a Role permitting access to DNS","title":"Setup"},{"location":"Plugins/TotalUptime/#create-role","text":"In account settings go to the Roles & Security tab Add a role with DNS Enabled, DNS/Information Read, and DNS/Domains Full For further information refer to the documentation at: Add a Role","title":"Create role"},{"location":"Plugins/TotalUptime/#create-api-account","text":"In account settings go to the Users tab Add a User checking the API Account box with the role you created earlier For further information refer to the documentation at: Add a User","title":"Create API Account"},{"location":"Plugins/TotalUptime/#using-the-plugin","text":"You will need to specify the API account username and password in a PSCredentials object in TotalUptimeCredential $pArgs = @{ TotalUptimeCredential = ( Get-Credential ) } New-PACertificate example . com -Plugin TotalUptime -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/UKFast/","text":"How To Use the UKFast SafeDNS Plugin \u00b6 This plugin works against the UKFast provider. It is assumed that you have already setup an account and created the zone in SafeDNS you will be working against. Setup \u00b6 Authentication against the UKFast SafeDNS API requires an API Application Key , which can be obtained from the API Applications portal. Additionally the key must be given READ/WRITE permission for the SafeDNS service. For further documentation on working with API keys, please visit the UKFast Developer Centre . Using the Plugin \u00b6 The API key will be used with the UKFastApiKey SecureString parameter. $pArgs = @{ UKFastApiKey = ( Read-Host \"Enter API Key\" -AsSecureString ) } New-PACertificate example . com -Plugin UKFast -PluginArgs $pArgs","title":"UKFast"},{"location":"Plugins/UKFast/#how-to-use-the-ukfast-safedns-plugin","text":"This plugin works against the UKFast provider. It is assumed that you have already setup an account and created the zone in SafeDNS you will be working against.","title":"How To Use the UKFast SafeDNS Plugin"},{"location":"Plugins/UKFast/#setup","text":"Authentication against the UKFast SafeDNS API requires an API Application Key , which can be obtained from the API Applications portal. Additionally the key must be given READ/WRITE permission for the SafeDNS service. For further documentation on working with API keys, please visit the UKFast Developer Centre .","title":"Setup"},{"location":"Plugins/UKFast/#using-the-plugin","text":"The API key will be used with the UKFastApiKey SecureString parameter. $pArgs = @{ UKFastApiKey = ( Read-Host \"Enter API Key\" -AsSecureString ) } New-PACertificate example . com -Plugin UKFast -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/WebRoot/","text":"How To Use the WebRoot Plugin \u00b6 This is an HTTP challenge plugin that works by writing challenge files to the local filesystem or a network share. It is generally used when you have an existing web server hosting the content for your domain and you would prefer not to stop it during the certificate issuance process. Setup \u00b6 The ACME server will be validating challenges using a standard HTTP GET query on port 80 to http://<domain>/.well-known/acme-challenge/<token> . You will need to know the filesystem path to the root folder that corresponds to your site. For example, the Default Web Site in IIS has its web root located at C:\\inetpub\\wwwroot . By default, the plugin will write the challenge files to \\.well-known\\acme-challenge\\ off of the specified root folder. But in some cases, you may have the http://<domain>/.well-known/acme-challenge/ URL mapped to a specific location on the filesystem and don't want the plugin to add the \\.well-known\\acme-challenge sub-folders. There is a switch described in the next section that will prevent those sub-folders from being created in the specified web root. If you are using a network share as the web root, make sure PowerShell is running as a user with permissions to write to that share. There is currently no way to specify explicit credentials. Using the Plugin \u00b6 The web root is specified using the WRPath parameter. If you don't want the plugin to put the files in a \\.well-known\\acme-challenge sub-folder, you must also specify WRExactPath = $true in your plugin args. Note WRPath can be set to an array of paths instead of just one. This can be useful with multiple web servers running behind a load balancer. Default functionality \u00b6 $pArgs = @{ WRPath = 'C:\\inetpub\\wwwroot' } New-PACertificate example . com -Plugin WebRoot -PluginArgs $pArgs No sub-folder example \u00b6 $pArgs = @{ WRPath = 'C:\\inetpub\\wwwroot\\.well-known\\acme-challenge' WRExactPath = $true } New-PACertificate example . com -Plugin WebRoot -PluginArgs $pArgs","title":"WebRoot"},{"location":"Plugins/WebRoot/#how-to-use-the-webroot-plugin","text":"This is an HTTP challenge plugin that works by writing challenge files to the local filesystem or a network share. It is generally used when you have an existing web server hosting the content for your domain and you would prefer not to stop it during the certificate issuance process.","title":"How To Use the WebRoot Plugin"},{"location":"Plugins/WebRoot/#setup","text":"The ACME server will be validating challenges using a standard HTTP GET query on port 80 to http://<domain>/.well-known/acme-challenge/<token> . You will need to know the filesystem path to the root folder that corresponds to your site. For example, the Default Web Site in IIS has its web root located at C:\\inetpub\\wwwroot . By default, the plugin will write the challenge files to \\.well-known\\acme-challenge\\ off of the specified root folder. But in some cases, you may have the http://<domain>/.well-known/acme-challenge/ URL mapped to a specific location on the filesystem and don't want the plugin to add the \\.well-known\\acme-challenge sub-folders. There is a switch described in the next section that will prevent those sub-folders from being created in the specified web root. If you are using a network share as the web root, make sure PowerShell is running as a user with permissions to write to that share. There is currently no way to specify explicit credentials.","title":"Setup"},{"location":"Plugins/WebRoot/#using-the-plugin","text":"The web root is specified using the WRPath parameter. If you don't want the plugin to put the files in a \\.well-known\\acme-challenge sub-folder, you must also specify WRExactPath = $true in your plugin args. Note WRPath can be set to an array of paths instead of just one. This can be useful with multiple web servers running behind a load balancer.","title":"Using the Plugin"},{"location":"Plugins/WebRoot/#default-functionality","text":"$pArgs = @{ WRPath = 'C:\\inetpub\\wwwroot' } New-PACertificate example . com -Plugin WebRoot -PluginArgs $pArgs","title":"Default functionality"},{"location":"Plugins/WebRoot/#no-sub-folder-example","text":"$pArgs = @{ WRPath = 'C:\\inetpub\\wwwroot\\.well-known\\acme-challenge' WRExactPath = $true } New-PACertificate example . com -Plugin WebRoot -PluginArgs $pArgs","title":"No sub-folder example"},{"location":"Plugins/WebSelfHost/","text":"How To Use the WebSelfHost Plugin \u00b6 This is an HTTP challenge plugin that works by temporarily running an HTTP listener to directly respond to challenge requests from the ACME server. It is commonly used when your certificate will not be used with an existing web server or the server is not listening on port 80. It can also be used with an existing web server if you are willing to temporarily stop the server during the certificate issuance process, but this requires additional scripting. The plugin will not automatically stop and restart the other web server. Setup \u00b6 Windows Only Prerequisites \u00b6 When running on Windows, the HttpListener class depends on a kernel mode web server called http.sys. Because it's a system-level service, non-administrator users can't use it without an explicit URL reservation that gives them permission. Open an elevated PowerShell session and run the following to see the current list of URL reservations. netsh http show urlacl Modern Windows versions will have a bunch of these even in a default install for various system components and services. We need to add one that matches what the plugin will be trying to use. By default, it will use http://+:80/.well-known/acme-challenge/ . The easiest thing to do is create the reservation and give permissions to \"Everyone\". It's perfectly reasonable to only grant permissions to the user or group who will need it as well. But you will need to adjust the command line appropriately with the target user/group instead of an sddl string. netsh http add urlacl url=http://+:80/.well-known/acme-challenge/ sddl=D:(A;;GX;;;S-1-1-0) If you will be running the listener on an alternate port, make sure your reservation also uses the alternate port. Also keep in mind that the ACME validation server will always request challenges on port 80. So if you're using an alternate port, make sure there's an appropriate port forward if it's behind NAT or an HTTP redirect if another server is in front of it. Additional Considerations \u00b6 Regardless of the underlying OS, you need to make sure the listener won't conflict with other software running on the system. If port 80 is in use, you will need to run the listener on an alternate port. But keep in mind, the ACME challenge validations must be served from port 80 on the internet-facing side of things. Often, there will be port forwarding or a reverse proxy in place that maps the internet-facing port 80 to an internal alternate port. Using the Plugin \u00b6 No plugin args are required if you will be using the default port 80 and 120 second timeout. Otherwise, you may use WSHPort and WSHTimeout respectively. Default functionality \u00b6 New-PACertificate example . com -Plugin WebSelfHost -PluginArgs @{} Non-standard port \u00b6 $pArgs = @{ WSHPort = 8000 } New-PACertificate example . com -Plugin WebSelfHost -PluginArgs $pArgs","title":"WebSelfHost"},{"location":"Plugins/WebSelfHost/#how-to-use-the-webselfhost-plugin","text":"This is an HTTP challenge plugin that works by temporarily running an HTTP listener to directly respond to challenge requests from the ACME server. It is commonly used when your certificate will not be used with an existing web server or the server is not listening on port 80. It can also be used with an existing web server if you are willing to temporarily stop the server during the certificate issuance process, but this requires additional scripting. The plugin will not automatically stop and restart the other web server.","title":"How To Use the WebSelfHost Plugin"},{"location":"Plugins/WebSelfHost/#setup","text":"","title":"Setup"},{"location":"Plugins/WebSelfHost/#windows-only-prerequisites","text":"When running on Windows, the HttpListener class depends on a kernel mode web server called http.sys. Because it's a system-level service, non-administrator users can't use it without an explicit URL reservation that gives them permission. Open an elevated PowerShell session and run the following to see the current list of URL reservations. netsh http show urlacl Modern Windows versions will have a bunch of these even in a default install for various system components and services. We need to add one that matches what the plugin will be trying to use. By default, it will use http://+:80/.well-known/acme-challenge/ . The easiest thing to do is create the reservation and give permissions to \"Everyone\". It's perfectly reasonable to only grant permissions to the user or group who will need it as well. But you will need to adjust the command line appropriately with the target user/group instead of an sddl string. netsh http add urlacl url=http://+:80/.well-known/acme-challenge/ sddl=D:(A;;GX;;;S-1-1-0) If you will be running the listener on an alternate port, make sure your reservation also uses the alternate port. Also keep in mind that the ACME validation server will always request challenges on port 80. So if you're using an alternate port, make sure there's an appropriate port forward if it's behind NAT or an HTTP redirect if another server is in front of it.","title":"Windows Only Prerequisites"},{"location":"Plugins/WebSelfHost/#additional-considerations","text":"Regardless of the underlying OS, you need to make sure the listener won't conflict with other software running on the system. If port 80 is in use, you will need to run the listener on an alternate port. But keep in mind, the ACME challenge validations must be served from port 80 on the internet-facing side of things. Often, there will be port forwarding or a reverse proxy in place that maps the internet-facing port 80 to an internal alternate port.","title":"Additional Considerations"},{"location":"Plugins/WebSelfHost/#using-the-plugin","text":"No plugin args are required if you will be using the default port 80 and 120 second timeout. Otherwise, you may use WSHPort and WSHTimeout respectively.","title":"Using the Plugin"},{"location":"Plugins/WebSelfHost/#default-functionality","text":"New-PACertificate example . com -Plugin WebSelfHost -PluginArgs @{}","title":"Default functionality"},{"location":"Plugins/WebSelfHost/#non-standard-port","text":"$pArgs = @{ WSHPort = 8000 } New-PACertificate example . com -Plugin WebSelfHost -PluginArgs $pArgs","title":"Non-standard port"},{"location":"Plugins/Windows/","text":"How To Use the Windows DNS Plugin \u00b6 This plugin works against the Microsoft Windows DNS server. It doesn't matter whether it's hosted on-premises or in the cloud, physical or virtual, domain joined or standalone. As long as it can be managed via the standard DnsServer PowerShell module , it should be supported. This does not work against Azure DNS . Use the Azure plugin for that. Warning The DnsServer module is not available on Windows versions prior to Windows 8 and Windows Server 2012. So this plugin will only work on those OSes or newer. Using Zone Scopes requires the Windows 10 or Windows Server 2016 version of the module or newer. Warning This plugin currently does not work on non-Windows OSes in PowerShell Core. On Windows, it requires at least PowerShell 7. Setup \u00b6 DnsServer module \u00b6 The client machine running Posh-ACME must have the DnsServer PowerShell module installed. On Windows Server OSes, this can be installed from Server Manager or via PowerShell as follows. Install-WindowsFeature RSAT-DNS-Server On Windows client OSes, you will need to download and install the appropriate Remote Server Administration Tools (RSAT) for your OS. The installers are historically OS specific. Here are links for Windows 10 , Windows 8.1 , Windows 8 , and Windows 7 . Warning The vast majority of testing for this plugin was done on Windows 10 and Windows Server 2016. Please submit issues if you run into problems on downlevel OSes. PSRemoting and New-CimSession \u00b6 The DnsServer module relies on PowerShell remoting via New-CimSession to establish a remote connection to the DNS server. Depending on your environment, PSRemoting might already be enabled. If not, you need to make sure it is working between your client and DNS server before trying to use Posh-ACME. Typically, the easiest environment to get things working has both client and server domain joined to the same Active Directory or different domains where the client's domain credentials are trusted by the server's AD. In this case, you can try the following to test from the client machine. # test in the context of the current process (current user) $cs = New-CimSession -ComputerName dnsserver . example . com # test in the context of a different user $cs = New-CimSession -ComputerName dnsserver . example . com -Credential ( Get-Credential ) In environments where one or both of the client and server are not domain joined, you may need to explicitly connect via HTTPS. This may involve extra steps during setup to enable an HTTPS listener on the server. Here is a decent guide on getting things setup with a self-signed certificate, though a trusted certificate would work as well. And here is how to test from the client machine. $so = New-CimSessionOption -UseSsl $cs = New-CimSession -ComputerName dnsserver . example . com -Credential ( Get-Credential ) -SessionOptions $so Do not proceed until you can successfully establish a CimSession from the client to the DNS server. Permissions \u00b6 Setting permissions on Windows DNS depends on whether the DNS zones are integrated with Active Directory or not. Standalone non-domain joined DNS servers don't really have granular permissions as far as I can tell. The user must be local administrator. AD integrated servers can usually set more granular permissions on a per-zone level or better. Suffice it to say, the account being used to connect must have adequate permissions to add and delete TXT records in the associated zone(s). Using the Plugin \u00b6 In a domain joined environment, the only required parameter is the hostname or IP of the DNS server unless you want the module to use different credentials than what PowerShell is running as. In that case, you would specify credentials and optionally the -WinUseSSL switch. Both of those tend to be required for non-domain joined servers. # domain joined environment, no credentials or SSL needed New-PACertificate example . com -Plugin Windows -PluginArgs @{ WinServer = 'dns1.example.com' } # standalone environment, adding credentials and SSL flag $pArgs = @{ WinServer = 'dns1.example.com' WinCred = ( Get-Credential ) WinUseSSL = $true } New-PACertificate example . com -Plugin Windows -PluginArgs $pArgs Advanced Features \u00b6 Zone Scopes were added in the Windows Server 2016 version of the DNS server and are now supported in the plugin with the WinZoneScope parameter. This is useful if you have a split-brain DNS setup and your external zone is in the non-default scope. Using the parameter requires that your client be running the Windows 10/2016 version of the DnsServer module. # using zone scope in domain joined environment $pArgs = @{ WinServer = 'dns1.example.com' WinZoneScope = 'external' } New-PACertificate example . com -Plugin Windows -PluginArgs $pArgs VirtualizationInstances are not currently supported. If you use that features and need it supported, please submit an issue describing your environment.","title":"Windows"},{"location":"Plugins/Windows/#how-to-use-the-windows-dns-plugin","text":"This plugin works against the Microsoft Windows DNS server. It doesn't matter whether it's hosted on-premises or in the cloud, physical or virtual, domain joined or standalone. As long as it can be managed via the standard DnsServer PowerShell module , it should be supported. This does not work against Azure DNS . Use the Azure plugin for that. Warning The DnsServer module is not available on Windows versions prior to Windows 8 and Windows Server 2012. So this plugin will only work on those OSes or newer. Using Zone Scopes requires the Windows 10 or Windows Server 2016 version of the module or newer. Warning This plugin currently does not work on non-Windows OSes in PowerShell Core. On Windows, it requires at least PowerShell 7.","title":"How To Use the Windows DNS Plugin"},{"location":"Plugins/Windows/#setup","text":"","title":"Setup"},{"location":"Plugins/Windows/#dnsserver-module","text":"The client machine running Posh-ACME must have the DnsServer PowerShell module installed. On Windows Server OSes, this can be installed from Server Manager or via PowerShell as follows. Install-WindowsFeature RSAT-DNS-Server On Windows client OSes, you will need to download and install the appropriate Remote Server Administration Tools (RSAT) for your OS. The installers are historically OS specific. Here are links for Windows 10 , Windows 8.1 , Windows 8 , and Windows 7 . Warning The vast majority of testing for this plugin was done on Windows 10 and Windows Server 2016. Please submit issues if you run into problems on downlevel OSes.","title":"DnsServer module"},{"location":"Plugins/Windows/#psremoting-and-new-cimsession","text":"The DnsServer module relies on PowerShell remoting via New-CimSession to establish a remote connection to the DNS server. Depending on your environment, PSRemoting might already be enabled. If not, you need to make sure it is working between your client and DNS server before trying to use Posh-ACME. Typically, the easiest environment to get things working has both client and server domain joined to the same Active Directory or different domains where the client's domain credentials are trusted by the server's AD. In this case, you can try the following to test from the client machine. # test in the context of the current process (current user) $cs = New-CimSession -ComputerName dnsserver . example . com # test in the context of a different user $cs = New-CimSession -ComputerName dnsserver . example . com -Credential ( Get-Credential ) In environments where one or both of the client and server are not domain joined, you may need to explicitly connect via HTTPS. This may involve extra steps during setup to enable an HTTPS listener on the server. Here is a decent guide on getting things setup with a self-signed certificate, though a trusted certificate would work as well. And here is how to test from the client machine. $so = New-CimSessionOption -UseSsl $cs = New-CimSession -ComputerName dnsserver . example . com -Credential ( Get-Credential ) -SessionOptions $so Do not proceed until you can successfully establish a CimSession from the client to the DNS server.","title":"PSRemoting and New-CimSession"},{"location":"Plugins/Windows/#permissions","text":"Setting permissions on Windows DNS depends on whether the DNS zones are integrated with Active Directory or not. Standalone non-domain joined DNS servers don't really have granular permissions as far as I can tell. The user must be local administrator. AD integrated servers can usually set more granular permissions on a per-zone level or better. Suffice it to say, the account being used to connect must have adequate permissions to add and delete TXT records in the associated zone(s).","title":"Permissions"},{"location":"Plugins/Windows/#using-the-plugin","text":"In a domain joined environment, the only required parameter is the hostname or IP of the DNS server unless you want the module to use different credentials than what PowerShell is running as. In that case, you would specify credentials and optionally the -WinUseSSL switch. Both of those tend to be required for non-domain joined servers. # domain joined environment, no credentials or SSL needed New-PACertificate example . com -Plugin Windows -PluginArgs @{ WinServer = 'dns1.example.com' } # standalone environment, adding credentials and SSL flag $pArgs = @{ WinServer = 'dns1.example.com' WinCred = ( Get-Credential ) WinUseSSL = $true } New-PACertificate example . com -Plugin Windows -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/Windows/#advanced-features","text":"Zone Scopes were added in the Windows Server 2016 version of the DNS server and are now supported in the plugin with the WinZoneScope parameter. This is useful if you have a split-brain DNS setup and your external zone is in the non-default scope. Using the parameter requires that your client be running the Windows 10/2016 version of the DnsServer module. # using zone scope in domain joined environment $pArgs = @{ WinServer = 'dns1.example.com' WinZoneScope = 'external' } New-PACertificate example . com -Plugin Windows -PluginArgs $pArgs VirtualizationInstances are not currently supported. If you use that features and need it supported, please submit an issue describing your environment.","title":"Advanced Features"},{"location":"Plugins/Yandex/","text":"How To Use the Yandex DNS Plugin \u00b6 This plugin works against the Yandex DNS provider. It is assumed that you have already setup an account and delegated and confirmed the domain you will be working against. Setup \u00b6 If you haven't done it already, generate an administrator token and record it for later. It is also known as a \"PDD\" admin token. Using the Plugin \u00b6 The PDD admin token is used with the YDAdminToken SecureString parameter. Users have reported DNS replication delays of up to 15 minutes. So you may also have to override the default DNSSleep parameter with something longer like 1000. Warning The YDAdminTokenInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ YDAdminToken = ( Read-Host \"Yandex token\" -AsSecureString ) } New-PACertificate example . com -Plugin Yandex -PluginArgs $pArgs -DNSSleep 1000","title":"Yandex"},{"location":"Plugins/Yandex/#how-to-use-the-yandex-dns-plugin","text":"This plugin works against the Yandex DNS provider. It is assumed that you have already setup an account and delegated and confirmed the domain you will be working against.","title":"How To Use the Yandex DNS Plugin"},{"location":"Plugins/Yandex/#setup","text":"If you haven't done it already, generate an administrator token and record it for later. It is also known as a \"PDD\" admin token.","title":"Setup"},{"location":"Plugins/Yandex/#using-the-plugin","text":"The PDD admin token is used with the YDAdminToken SecureString parameter. Users have reported DNS replication delays of up to 15 minutes. So you may also have to override the default DNSSleep parameter with something longer like 1000. Warning The YDAdminTokenInsecure parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. $pArgs = @{ YDAdminToken = ( Read-Host \"Yandex token\" -AsSecureString ) } New-PACertificate example . com -Plugin Yandex -PluginArgs $pArgs -DNSSleep 1000","title":"Using the Plugin"},{"location":"Plugins/Zilore/","text":"How To Use the Zilore DNS Plugin \u00b6 This plugin works against the Zilore DNS provider. It is assumed that you have already setup an account and created the DNS zone(s) you will be working against. Note: Zilore does not currently offer API access to free accounts. You must be on a paid plan to use this plugin. Setup \u00b6 You will need to retrieve your API key from the API Settings page. Using the Plugin \u00b6 The API key is specified using the ZiloreKey parameter which is a SecureString value. $pArgs = @{ ZiloreKey = ( Read-Host \"API Key\" -AsSecureString ) } New-PACertificate example . com -Plugin Zilore -PluginArgs $pArgs","title":"Zilore"},{"location":"Plugins/Zilore/#how-to-use-the-zilore-dns-plugin","text":"This plugin works against the Zilore DNS provider. It is assumed that you have already setup an account and created the DNS zone(s) you will be working against. Note: Zilore does not currently offer API access to free accounts. You must be on a paid plan to use this plugin.","title":"How To Use the Zilore DNS Plugin"},{"location":"Plugins/Zilore/#setup","text":"You will need to retrieve your API key from the API Settings page.","title":"Setup"},{"location":"Plugins/Zilore/#using-the-plugin","text":"The API key is specified using the ZiloreKey parameter which is a SecureString value. $pArgs = @{ ZiloreKey = ( Read-Host \"API Key\" -AsSecureString ) } New-PACertificate example . com -Plugin Zilore -PluginArgs $pArgs","title":"Using the Plugin"},{"location":"Plugins/Zonomi/","text":"How To Use the Zonomi DNS Plugin \u00b6 This plugin works against the Zonomi DNS provider. It is assumed that you have already setup an account and created the DNS zone(s) you will be working against. Note The API Zonomi uses is also used by other providers such as RimuHosting . This plugin is compatible with those as well. Setup \u00b6 Generate an API key from the API Keys page using the \"DNS\" type. Click the the green plus icon to generate a new key if one is not already displayed. If you use a different compatible provider, there should be an equivalent control panel page for API Keys available. Using the Plugin \u00b6 The API key is used with the ZonomiKey SecureString parameter. Users on other Zonomi compatible providers will also need to supply the API URL for that provider to the ZonomiApiUrl parameter. Warning The ZonomiApiKey parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set. Using Zonomi \u00b6 $pArgs = @{ ZonomiKey = ( Read-Host 'API Key' -AsSecureString ) } New-PACertificate example . com -Plugin Zonomi -PluginArgs $pArgs Using RimuHosting \u00b6 $pArgs = @{ ZonomiKey = ( Read-Host 'API Key' -AsSecureString ) ZonomiApiUrl = 'https://rimuhosting.com/dns/dyndns.jsp' } New-PACertificate example . com -Plugin Zonomi -PluginArgs $pArgs","title":"Zonomi"},{"location":"Plugins/Zonomi/#how-to-use-the-zonomi-dns-plugin","text":"This plugin works against the Zonomi DNS provider. It is assumed that you have already setup an account and created the DNS zone(s) you will be working against. Note The API Zonomi uses is also used by other providers such as RimuHosting . This plugin is compatible with those as well.","title":"How To Use the Zonomi DNS Plugin"},{"location":"Plugins/Zonomi/#setup","text":"Generate an API key from the API Keys page using the \"DNS\" type. Click the the green plus icon to generate a new key if one is not already displayed. If you use a different compatible provider, there should be an equivalent control panel page for API Keys available.","title":"Setup"},{"location":"Plugins/Zonomi/#using-the-plugin","text":"The API key is used with the ZonomiKey SecureString parameter. Users on other Zonomi compatible providers will also need to supply the API URL for that provider to the ZonomiApiUrl parameter. Warning The ZonomiApiKey parameter is deprecated and will be removed in the next major module version. If you are using it, please migrate to the Secure parameter set.","title":"Using the Plugin"},{"location":"Plugins/Zonomi/#using-zonomi","text":"$pArgs = @{ ZonomiKey = ( Read-Host 'API Key' -AsSecureString ) } New-PACertificate example . com -Plugin Zonomi -PluginArgs $pArgs","title":"Using Zonomi"},{"location":"Plugins/Zonomi/#using-rimuhosting","text":"$pArgs = @{ ZonomiKey = ( Read-Host 'API Key' -AsSecureString ) ZonomiApiUrl = 'https://rimuhosting.com/dns/dyndns.jsp' } New-PACertificate example . com -Plugin Zonomi -PluginArgs $pArgs","title":"Using RimuHosting"},{"location":"Tutorial/","text":"Tutorial \u00b6 Picking a Server \u00b6 Before we begin, let's configure our ACME server to be the Let's Encrypt Staging server. This will let us figure out all of the commands and parameters without likely running into the production server's rate limits . Set-PAServer LE_STAGE Note LE_STAGE is a shortcut for the Let's Encrypt Staging server's directory URL. You could do the same thing by specifying the actual URL which is https://acme-staging-v02.api.letsencrypt.org/directory and this module should work with any ACME compliant directory URL. Other currently supported shortcuts include LE_PROD , BUYPASS_PROD , BUYPASS_TEST , and ZEROSSL_PROD . Once you set a server, the module will continue to perform future actions against that server until you change it with another call to Set-PAServer . The first time you connect to a server, a link to its Terms of Service will be displayed. You should review it before continuing. Your First Certificate \u00b6 The bare minimum you need to request a certificate is just the domain name. New-PACertificate example . com Since you haven't created an ACME account on this server yet, the command will attempt to create one for you using default settings and you'll get an error about having not agreed to the Terms of Service. Assuming you've reviewed the TOS link from before, add -AcceptTOS to the original command to proceed. You only need to do this once when creating a new account. You also probably want to associate an email address with this account so you can receive certificate expiration notifications. So let's do that even though it's not required. New-PACertificate example . com -AcceptTOS -Contact 'admin@example.com' Note Multiple email addresses per account are supported. Just pass it an array of addresses. Because you didn't specify a plugin, it will default to using the Manual DNS plugin. That manual plugin will also be prompting you to create a DNS TXT record to answer the ACME server's validation challenge for the domain. At this point, you can either press Ctrl+C to cancel the process and modify your command or go ahead and create the requested TXT record and hit any key to continue. We'll cover plugins next, so for now create the record manually and press a key to continue. If you run into problems creating the TXT record, check out Troubleshooting DNS Validation . The command will sleep for 2 minutes by default to allow the DNS changes to propagate. Then if the ACME server is able to properly validate the TXT record, the final certificate files are generated and the command should output the details of your new certificate. Only a subset of the details are displayed by default. To see them all, run Get-PACertificate | fl . The files generated in the output folder should contain the following: cert.cer (Base64 encoded PEM certificate) cert.key (Base64 encoded PEM private key) cert.pfx (PKCS12 container with cert+key) chain.cer (Base64 encoded PEM with the issuing CA chain) chainX.cer (Base64 encoded PEM with alternate issuing CA chains) fullchain.cer (Base64 encoded PEM with cert+chain) fullchain.pfx (PKCS12 container with cert+key+chain) Posh-ACME is only designed to obtain certificates, not deploy them to your web server or service. The certificate details are written to the pipeline so you can either save them to a variable or pipe the output to another command. Posh-ACME.Deploy is a sister module containing some example deployment functions for common services to get you started. But ultimately, it's up to you how you want to deploy your certificates. The password on the PFX files is poshacme because we didn't override the default with -PfxPass or -PfxPassSecure . If you're running PowerShell with elevated privileges on Windows, you can also add the -Install switch to automatically import the certificate into the local computer's certificate store. So now you have a certificate and that's great! But Let's Encrypt certificates expire relatively quickly (90 days). And you won't be able to renew this certificate without going through the manual DNS TXT record hassle again. So let's add a validation plugin to the process. Plugins \u00b6 The ACME protocol currently supports three types of challenges to prove you control the domain you're requesting a certificate for: dns-01 , http-01 , and tls-alpn-01 . We are going to focus on dns-01 because it is the only one that can be used to request wildcard (*.example.com) certificates and the majority of Posh-ACME plugins are for DNS providers . The ability to use a DNS plugin is going to depend on whether your DNS provider has a supported plugin in the current version of the module. If not, please submit an issue requesting support. If you have PowerShell development skills, you might also try writing a plugin yourself. Instructions can be found in the Plugins README . Pull requests for new plugins are both welcome and appreciated. It's also possible to redirect ACME DNS validations using a CNAME record in your primary zone pointing to another DNS server that is supported. More on that later. The first thing to do is figure out which DNS plugin to use and how to use it. Start by listing the available plugins. Get-PAPlugin Most plugins have a detailed usage guide here . In these examples, we'll use the AWS Route53 plugin. Here's a quick shortcut to get to the usage guide. This will open the default browser to the page on Windows and just display the URL on non-Windows. Get-PAPlugin Route53 -Guide Using a plugin will almost always require creating a hashtable with required plugin parameters. To see a quick reference of the available parameter sets try this: PS> Get-PAPlugin Route53 -Params Set Name: Keys (Default) Parameter Type IsMandatory --------- ---- ----------- R53AccessKey String True R53SecretKey SecureString True Set Name: KeysInsecure Parameter Type IsMandatory --------- ---- ----------- R53AccessKey String True R53SecretKeyInsecure String True Set Name: Profile Parameter Type IsMandatory --------- ---- ----------- R53ProfileName String True Set Name: IAMRole Parameter Type IsMandatory --------- ---- ----------- R53UseIAMRole SwitchParameter True We can see there are four different parameter sets we can use: Keys , KeysInsecure , Profile , and IAMRole . The Keys set requires R53AccessKey and R53SecretKey . These are API credentials for AWS and presumably as an AWS user, you already know how to generate them. The access key is just a normal String variable. But the secret key is a SecureString which takes a bit more effort to setup. So let's create the hashtable we need. $r53Secret = Read-Host 'Enter Secret' -AsSecureString $pArgs = @{ R53AccessKey = 'ABCD1234' ; R53SecretKey = $r53Secret } This $pArgs variable is what we'll pass to the -PluginArgs parameter on functions that use it. Now we know what plugin we're using and we have our plugin arguments in a hashtable. If this is the first time using a particular plugin, it's usually wise to test it before actually trying to use it for a new certificate. So let's do that. The command has no output unless we add the -Verbose switch to show what's going on under the hood. # get a reference to the current account $acct = Get-PAAccount Publish-Challenge example . com -Account $acct -Token faketoken -Plugin Route53 -PluginArgs $pArgs -Verbose Assuming there was no error, you should be able to validate that the TXT record was created in the Route53 management console. If so, go ahead and unpublish the record. Otherwise, troubleshoot why it failed and get it working before moving on. Unpublish-Challenge example . com -Account $acct -Token faketoken -Plugin Route53 -PluginArgs $pArgs -Verbose All we have left to do is add the necessary plugin parameters to our original certificate request command. But let's get crazy and change it up a bit by making the cert a wildcard cert with the root domain as a subject alternative name (SAN) . New-PACertificate '*.example.com' , 'example.com' -AcceptTOS -Contact 'admin@example.com' -Plugin Route53 ` -PluginArgs $pArgs -Verbose Warning According to current Let's Encrypt rate limits , a single certificate can have up to 100 names. The only caveat is that wildcard certs may not contain any SANs that would overlap with the wildcard entry. So you'll get an error if you try to put *.example.com and www.example.com in the same cert. But *.example.com and example.com or www.sub.example.com are just fine. We included the -Verbose switch again so we can see what's going on. But normally, that wouldn't be necessary. Assuming everything went well, you should now have a fresh new wildcard cert that required no user interaction. Keep in mind, HTTP plugins work the exactly the same way as DNS plugins. They just can't be used to validate wildcard names in certs from Let's Encrypt. Renewals and Deployment \u00b6 Now that you have a cert order that can successfully answer DNS challenges via a plugin, it's even easier to renew it. Submit-Renewal Note Be aware that renewals don\u2019t count against your Certificates per Registered Domain limit, but they are subject to a Duplicate Certificate limit of 5 per week. The module saves all of the parameters associated with an order and re-uses the same values to renew it. It will throw a warning right now because the cert hasn't reached the suggested renewal window. But you can use -Force to do it anyway if you want to try it. Let's Encrypt currently caches authorizations for roughly 30 days, so the forced renewal won't need to go through validating the challenges again. But you can de-authorize your existing challenges using the following command if you want to test the validation process again. Get-PAOrder | Revoke-PAAuthorization If you have multiple orders on an account or even multiple accounts, there are flags to renew all of those as well. # renew all orders on the current account Submit-Renewal -AllOrders # renew all orders across all accounts in the current profile Submit-Renewal -AllAccounts Note The -Force parameter works with these as well. Task Scheduler / Cron \u00b6 Because PowerShell has no native way to run recurring tasks, you'll need to set something up using whatever job scheduling utility your OS provides like Task Scheduler on Windows or cron on Linux. It is suggested to run the job once or twice a day at ideally randomized times. At the very least, try not to run them directly on any hour marks to avoid potential load spikes on the ACME server. Generally, the task must run as the same user you're currently logged in as because the Posh-ACME config is stored in your local user profile. However, it's possible to change the default config location . As mentioned earlier, Posh-ACME doesn't handle certificate deployment. So you'll likely want to create a script to both renew the cert and deploy it to your service/application. All the details you should need to deploy the cert are in the PACertificate object that is returned by Submit-Renewal . It's also the same object returned by New-PACertificate and Get-PACertificate ; the latter being useful to test deployment scripts with. Submit-Renewal will only return PACertificate objects for certs that were actually renewed successfully. So the typical template for a renew/deploy script might look something like this. Set-PAOrder example . com if ( $cert = Submit-Renewal ) { # do stuff with $cert to deploy it } For a job that is renewing multiple certificates, it might look more like this. Submit-Renewal -AllOrders | ForEach -Object { $cert = $_ if ( 'example.com' -in $cert . AllSANs ) { # deploy for example.com } elseif ( 'example.net' -in $cert . AllSANs ) { # deploy for example.net } else { # deploy for everything else } } Updating Plugin Parameters on Renewal \u00b6 Credentials and Tokens can change over time and some plugins can be used with purposefully short-lived access tokens. In these cases, you can specify the new plugin parameters using the -PluginArgs parameter on either Set-PAOrder or Submit-Renewal . The full set of plugin arguments must be specified. As an example, consider the case for the Azure DNS plugin: # renew specifying new plugin arguments Submit-Renewal -PluginArgs @{ AZSubscriptionId = 'mysubscriptionid' ; AZAccessToken = 'myaccesstoken' } Going Into Production \u00b6 Now that you've got everything working against the Let's Encrypt staging server, all you have to do is switch over to the production server and re-run your New-PACertificate command to get your shiny new publicly trusted certificate. Set-PAServer LE_PROD New-PACertificate '*.example.com' , 'example.com' -AcceptTOS -Contact 'admin@example.com' ` -Plugin Route53 -PluginArgs $pArgs -Verbose Modifying Certificate Names \u00b6 You may eventually need to add or remove names from your certificate to accommodate changes in the services you're hosting. But certificates can't be modified after they're generated. So you need to request a new certificate with the updated set of names. While you could just re-run your New-PACertificate command with a modified domain list and all the other original parameters and plugin details, that can be a hassle if it has been a while since you originally setup the certificate and don't remember exactly what you ran. However, all you really need is the modified domain list and the order name. Grab the the order details for the order you'll be modifying and create a hashtable for splatting with the Name and Domain parameters. $o = Get-PAOrder -Name example . com $newCertParams = @{ Name = $o . Name ; Domain = @( $o . MainDomain )+@( $o . SANs ) } Now modify the Domain parameter in the hashtable however you need to. Here are a couple examples. # add a new name $newCertParams . Domain += 'blog.example.com' # remove an existing name $newCertParams . Domain = $newCertParams . Domain | ?{ $_ -ne 'oldsite.example.com' } Finally, run New-PACertificate and splat your updated parameters. New-PACertificate @newCertParams -Verbose The function should pick up all the old parameters from the previous order (finding it via the Name parameter) and create a new order/cert that overwrites the old one.","title":"Tutorial"},{"location":"Tutorial/#tutorial","text":"","title":"Tutorial"},{"location":"Tutorial/#picking-a-server","text":"Before we begin, let's configure our ACME server to be the Let's Encrypt Staging server. This will let us figure out all of the commands and parameters without likely running into the production server's rate limits . Set-PAServer LE_STAGE Note LE_STAGE is a shortcut for the Let's Encrypt Staging server's directory URL. You could do the same thing by specifying the actual URL which is https://acme-staging-v02.api.letsencrypt.org/directory and this module should work with any ACME compliant directory URL. Other currently supported shortcuts include LE_PROD , BUYPASS_PROD , BUYPASS_TEST , and ZEROSSL_PROD . Once you set a server, the module will continue to perform future actions against that server until you change it with another call to Set-PAServer . The first time you connect to a server, a link to its Terms of Service will be displayed. You should review it before continuing.","title":"Picking a Server"},{"location":"Tutorial/#your-first-certificate","text":"The bare minimum you need to request a certificate is just the domain name. New-PACertificate example . com Since you haven't created an ACME account on this server yet, the command will attempt to create one for you using default settings and you'll get an error about having not agreed to the Terms of Service. Assuming you've reviewed the TOS link from before, add -AcceptTOS to the original command to proceed. You only need to do this once when creating a new account. You also probably want to associate an email address with this account so you can receive certificate expiration notifications. So let's do that even though it's not required. New-PACertificate example . com -AcceptTOS -Contact 'admin@example.com' Note Multiple email addresses per account are supported. Just pass it an array of addresses. Because you didn't specify a plugin, it will default to using the Manual DNS plugin. That manual plugin will also be prompting you to create a DNS TXT record to answer the ACME server's validation challenge for the domain. At this point, you can either press Ctrl+C to cancel the process and modify your command or go ahead and create the requested TXT record and hit any key to continue. We'll cover plugins next, so for now create the record manually and press a key to continue. If you run into problems creating the TXT record, check out Troubleshooting DNS Validation . The command will sleep for 2 minutes by default to allow the DNS changes to propagate. Then if the ACME server is able to properly validate the TXT record, the final certificate files are generated and the command should output the details of your new certificate. Only a subset of the details are displayed by default. To see them all, run Get-PACertificate | fl . The files generated in the output folder should contain the following: cert.cer (Base64 encoded PEM certificate) cert.key (Base64 encoded PEM private key) cert.pfx (PKCS12 container with cert+key) chain.cer (Base64 encoded PEM with the issuing CA chain) chainX.cer (Base64 encoded PEM with alternate issuing CA chains) fullchain.cer (Base64 encoded PEM with cert+chain) fullchain.pfx (PKCS12 container with cert+key+chain) Posh-ACME is only designed to obtain certificates, not deploy them to your web server or service. The certificate details are written to the pipeline so you can either save them to a variable or pipe the output to another command. Posh-ACME.Deploy is a sister module containing some example deployment functions for common services to get you started. But ultimately, it's up to you how you want to deploy your certificates. The password on the PFX files is poshacme because we didn't override the default with -PfxPass or -PfxPassSecure . If you're running PowerShell with elevated privileges on Windows, you can also add the -Install switch to automatically import the certificate into the local computer's certificate store. So now you have a certificate and that's great! But Let's Encrypt certificates expire relatively quickly (90 days). And you won't be able to renew this certificate without going through the manual DNS TXT record hassle again. So let's add a validation plugin to the process.","title":"Your First Certificate"},{"location":"Tutorial/#plugins","text":"The ACME protocol currently supports three types of challenges to prove you control the domain you're requesting a certificate for: dns-01 , http-01 , and tls-alpn-01 . We are going to focus on dns-01 because it is the only one that can be used to request wildcard (*.example.com) certificates and the majority of Posh-ACME plugins are for DNS providers . The ability to use a DNS plugin is going to depend on whether your DNS provider has a supported plugin in the current version of the module. If not, please submit an issue requesting support. If you have PowerShell development skills, you might also try writing a plugin yourself. Instructions can be found in the Plugins README . Pull requests for new plugins are both welcome and appreciated. It's also possible to redirect ACME DNS validations using a CNAME record in your primary zone pointing to another DNS server that is supported. More on that later. The first thing to do is figure out which DNS plugin to use and how to use it. Start by listing the available plugins. Get-PAPlugin Most plugins have a detailed usage guide here . In these examples, we'll use the AWS Route53 plugin. Here's a quick shortcut to get to the usage guide. This will open the default browser to the page on Windows and just display the URL on non-Windows. Get-PAPlugin Route53 -Guide Using a plugin will almost always require creating a hashtable with required plugin parameters. To see a quick reference of the available parameter sets try this: PS> Get-PAPlugin Route53 -Params Set Name: Keys (Default) Parameter Type IsMandatory --------- ---- ----------- R53AccessKey String True R53SecretKey SecureString True Set Name: KeysInsecure Parameter Type IsMandatory --------- ---- ----------- R53AccessKey String True R53SecretKeyInsecure String True Set Name: Profile Parameter Type IsMandatory --------- ---- ----------- R53ProfileName String True Set Name: IAMRole Parameter Type IsMandatory --------- ---- ----------- R53UseIAMRole SwitchParameter True We can see there are four different parameter sets we can use: Keys , KeysInsecure , Profile , and IAMRole . The Keys set requires R53AccessKey and R53SecretKey . These are API credentials for AWS and presumably as an AWS user, you already know how to generate them. The access key is just a normal String variable. But the secret key is a SecureString which takes a bit more effort to setup. So let's create the hashtable we need. $r53Secret = Read-Host 'Enter Secret' -AsSecureString $pArgs = @{ R53AccessKey = 'ABCD1234' ; R53SecretKey = $r53Secret } This $pArgs variable is what we'll pass to the -PluginArgs parameter on functions that use it. Now we know what plugin we're using and we have our plugin arguments in a hashtable. If this is the first time using a particular plugin, it's usually wise to test it before actually trying to use it for a new certificate. So let's do that. The command has no output unless we add the -Verbose switch to show what's going on under the hood. # get a reference to the current account $acct = Get-PAAccount Publish-Challenge example . com -Account $acct -Token faketoken -Plugin Route53 -PluginArgs $pArgs -Verbose Assuming there was no error, you should be able to validate that the TXT record was created in the Route53 management console. If so, go ahead and unpublish the record. Otherwise, troubleshoot why it failed and get it working before moving on. Unpublish-Challenge example . com -Account $acct -Token faketoken -Plugin Route53 -PluginArgs $pArgs -Verbose All we have left to do is add the necessary plugin parameters to our original certificate request command. But let's get crazy and change it up a bit by making the cert a wildcard cert with the root domain as a subject alternative name (SAN) . New-PACertificate '*.example.com' , 'example.com' -AcceptTOS -Contact 'admin@example.com' -Plugin Route53 ` -PluginArgs $pArgs -Verbose Warning According to current Let's Encrypt rate limits , a single certificate can have up to 100 names. The only caveat is that wildcard certs may not contain any SANs that would overlap with the wildcard entry. So you'll get an error if you try to put *.example.com and www.example.com in the same cert. But *.example.com and example.com or www.sub.example.com are just fine. We included the -Verbose switch again so we can see what's going on. But normally, that wouldn't be necessary. Assuming everything went well, you should now have a fresh new wildcard cert that required no user interaction. Keep in mind, HTTP plugins work the exactly the same way as DNS plugins. They just can't be used to validate wildcard names in certs from Let's Encrypt.","title":"Plugins"},{"location":"Tutorial/#renewals-and-deployment","text":"Now that you have a cert order that can successfully answer DNS challenges via a plugin, it's even easier to renew it. Submit-Renewal Note Be aware that renewals don\u2019t count against your Certificates per Registered Domain limit, but they are subject to a Duplicate Certificate limit of 5 per week. The module saves all of the parameters associated with an order and re-uses the same values to renew it. It will throw a warning right now because the cert hasn't reached the suggested renewal window. But you can use -Force to do it anyway if you want to try it. Let's Encrypt currently caches authorizations for roughly 30 days, so the forced renewal won't need to go through validating the challenges again. But you can de-authorize your existing challenges using the following command if you want to test the validation process again. Get-PAOrder | Revoke-PAAuthorization If you have multiple orders on an account or even multiple accounts, there are flags to renew all of those as well. # renew all orders on the current account Submit-Renewal -AllOrders # renew all orders across all accounts in the current profile Submit-Renewal -AllAccounts Note The -Force parameter works with these as well.","title":"Renewals and Deployment"},{"location":"Tutorial/#task-scheduler-cron","text":"Because PowerShell has no native way to run recurring tasks, you'll need to set something up using whatever job scheduling utility your OS provides like Task Scheduler on Windows or cron on Linux. It is suggested to run the job once or twice a day at ideally randomized times. At the very least, try not to run them directly on any hour marks to avoid potential load spikes on the ACME server. Generally, the task must run as the same user you're currently logged in as because the Posh-ACME config is stored in your local user profile. However, it's possible to change the default config location . As mentioned earlier, Posh-ACME doesn't handle certificate deployment. So you'll likely want to create a script to both renew the cert and deploy it to your service/application. All the details you should need to deploy the cert are in the PACertificate object that is returned by Submit-Renewal . It's also the same object returned by New-PACertificate and Get-PACertificate ; the latter being useful to test deployment scripts with. Submit-Renewal will only return PACertificate objects for certs that were actually renewed successfully. So the typical template for a renew/deploy script might look something like this. Set-PAOrder example . com if ( $cert = Submit-Renewal ) { # do stuff with $cert to deploy it } For a job that is renewing multiple certificates, it might look more like this. Submit-Renewal -AllOrders | ForEach -Object { $cert = $_ if ( 'example.com' -in $cert . AllSANs ) { # deploy for example.com } elseif ( 'example.net' -in $cert . AllSANs ) { # deploy for example.net } else { # deploy for everything else } }","title":"Task Scheduler / Cron"},{"location":"Tutorial/#updating-plugin-parameters-on-renewal","text":"Credentials and Tokens can change over time and some plugins can be used with purposefully short-lived access tokens. In these cases, you can specify the new plugin parameters using the -PluginArgs parameter on either Set-PAOrder or Submit-Renewal . The full set of plugin arguments must be specified. As an example, consider the case for the Azure DNS plugin: # renew specifying new plugin arguments Submit-Renewal -PluginArgs @{ AZSubscriptionId = 'mysubscriptionid' ; AZAccessToken = 'myaccesstoken' }","title":"Updating Plugin Parameters on Renewal"},{"location":"Tutorial/#going-into-production","text":"Now that you've got everything working against the Let's Encrypt staging server, all you have to do is switch over to the production server and re-run your New-PACertificate command to get your shiny new publicly trusted certificate. Set-PAServer LE_PROD New-PACertificate '*.example.com' , 'example.com' -AcceptTOS -Contact 'admin@example.com' ` -Plugin Route53 -PluginArgs $pArgs -Verbose","title":"Going Into Production"},{"location":"Tutorial/#modifying-certificate-names","text":"You may eventually need to add or remove names from your certificate to accommodate changes in the services you're hosting. But certificates can't be modified after they're generated. So you need to request a new certificate with the updated set of names. While you could just re-run your New-PACertificate command with a modified domain list and all the other original parameters and plugin details, that can be a hassle if it has been a while since you originally setup the certificate and don't remember exactly what you ran. However, all you really need is the modified domain list and the order name. Grab the the order details for the order you'll be modifying and create a hashtable for splatting with the Name and Domain parameters. $o = Get-PAOrder -Name example . com $newCertParams = @{ Name = $o . Name ; Domain = @( $o . MainDomain )+@( $o . SANs ) } Now modify the Domain parameter in the hashtable however you need to. Here are a couple examples. # add a new name $newCertParams . Domain += 'blog.example.com' # remove an existing name $newCertParams . Domain = $newCertParams . Domain | ?{ $_ -ne 'oldsite.example.com' } Finally, run New-PACertificate and splat your updated parameters. New-PACertificate @newCertParams -Verbose The function should pick up all the old parameters from the previous order (finding it via the Name parameter) and create a new order/cert that overwrites the old one.","title":"Modifying Certificate Names"}]}